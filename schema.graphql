enum ActionKind {
  """
  Action responsible for fetching data from a resource
  """
  ApiAction

  """
  Action with custom code
  """
  CodeAction
}

"""
Allows picking a action from the list of actions
"""
type ActionType implements IBaseType {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ActionTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type ActionTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ActionTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
}

input ActionTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input ActionTypeConnectOrCreateWhere {
  node: ActionTypeUniqueWhere!
}

input ActionTypeConnectWhere {
  node: ActionTypeWhere!
}

input ActionTypeCreateInput {
  id: ID!
  kind: TypeKind! = ActionType
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input ActionTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
}

input ActionTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type ActionTypeEdge {
  cursor: String!
  node: ActionType!
}

input ActionTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = ActionType
  name: String!
}

input ActionTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ActionTypeSort objects to sort ActionTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ActionTypeSort!]
}

input ActionTypeOwnerAggregateInput {
  AND: [ActionTypeOwnerAggregateInput!]
  NOT: ActionTypeOwnerAggregateInput
  OR: [ActionTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ActionTypeOwnerNodeAggregationWhereInput
}

input ActionTypeOwnerNodeAggregationWhereInput {
  AND: [ActionTypeOwnerNodeAggregationWhereInput!]
  NOT: ActionTypeOwnerNodeAggregationWhereInput
  OR: [ActionTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input ActionTypeRelationInput {
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort ActionTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ActionTypeSort object.
"""
input ActionTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ActionTypeUniqueWhere {
  id: ID
  name: String
}

input ActionTypeUpdateInput {
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type ActionTypeUserOwnerAggregationSelection {
  count: Int!
  node: ActionTypeUserOwnerNodeAggregateSelection
}

type ActionTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ActionTypeWhere {
  AND: [ActionTypeWhere!]
  NOT: ActionTypeWhere
  OR: [ActionTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ActionTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ActionTypesConnection {
  edges: [ActionTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

union AnyAction = ApiAction | CodeAction

input AnyActionWhere {
  ApiAction: ApiActionWhere
  CodeAction: CodeActionWhere
}

union AnyType =
    ActionType
  | AppType
  | ArrayType
  | CodeMirrorType
  | ElementType
  | EnumType
  | InterfaceType
  | LambdaType
  | PageType
  | PrimitiveType
  | ReactNodeType
  | RenderPropType
  | UnionType

input AnyTypeWhere {
  ActionType: ActionTypeWhere
  AppType: AppTypeWhere
  ArrayType: ArrayTypeWhere
  CodeMirrorType: CodeMirrorTypeWhere
  ElementType: ElementTypeWhere
  EnumType: EnumTypeWhere
  InterfaceType: InterfaceTypeWhere
  LambdaType: LambdaTypeWhere
  PageType: PageTypeWhere
  PrimitiveType: PrimitiveTypeWhere
  ReactNodeType: ReactNodeTypeWhere
  RenderPropType: RenderPropTypeWhere
  UnionType: UnionTypeWhere
}

type ApiAction implements BaseAction {
  config(
    directed: Boolean = true
    options: PropOptions
    where: PropWhere
  ): Prop!
  configAggregate(
    directed: Boolean = true
    where: PropWhere
  ): ApiActionPropConfigAggregationSelection
  configConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ApiActionConfigConnectionSort!]
    where: ApiActionConfigConnectionWhere
  ): ApiActionConfigConnection!
  element(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  elementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ApiActionElementElementAggregationSelection
  elementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [BaseActionElementConnectionSort!]
    where: BaseActionElementConnectionWhere
  ): BaseActionElementConnection!
  errorAction(
    directed: Boolean = true
    options: QueryOptions
    where: AnyActionWhere
  ): AnyAction
  errorActionConnection(
    after: String
    directed: Boolean = true
    first: Int
    where: ApiActionErrorActionConnectionWhere
  ): ApiActionErrorActionConnection!
  id: ID!
  name: String!

  """
  Resource to fetch data from
  """
  resource(
    directed: Boolean = true
    options: ResourceOptions
    where: ResourceWhere
  ): Resource!
  resourceAggregate(
    directed: Boolean = true
    where: ResourceWhere
  ): ApiActionResourceResourceAggregationSelection
  resourceConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ApiActionResourceConnectionSort!]
    where: ApiActionResourceConnectionWhere
  ): ApiActionResourceConnection!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): ApiActionStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [BaseActionStoreConnectionSort!]
    where: BaseActionStoreConnectionWhere
  ): BaseActionStoreConnection!

  """
  Response handlers
  """
  successAction(
    directed: Boolean = true
    options: QueryOptions
    where: AnyActionWhere
  ): AnyAction
  successActionConnection(
    after: String
    directed: Boolean = true
    first: Int
    where: ApiActionSuccessActionConnectionWhere
  ): ApiActionSuccessActionConnection!
  type: ActionKind!
}

type ApiActionAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ApiActionConfigAggregateInput {
  AND: [ApiActionConfigAggregateInput!]
  NOT: ApiActionConfigAggregateInput
  OR: [ApiActionConfigAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ApiActionConfigNodeAggregationWhereInput
}

input ApiActionConfigConnectFieldInput {
  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: PropConnectWhere
}

input ApiActionConfigConnectOrCreateFieldInput {
  onCreate: ApiActionConfigConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input ApiActionConfigConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type ApiActionConfigConnection {
  edges: [ApiActionConfigRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ApiActionConfigConnectionSort {
  node: PropSort
}

input ApiActionConfigConnectionWhere {
  AND: [ApiActionConfigConnectionWhere!]
  NOT: ApiActionConfigConnectionWhere
  OR: [ApiActionConfigConnectionWhere!]
  node: PropWhere
}

input ApiActionConfigCreateFieldInput {
  node: PropCreateInput!
}

input ApiActionConfigDeleteFieldInput {
  where: ApiActionConfigConnectionWhere
}

input ApiActionConfigDisconnectFieldInput {
  where: ApiActionConfigConnectionWhere
}

input ApiActionConfigFieldInput {
  connect: ApiActionConfigConnectFieldInput
  connectOrCreate: ApiActionConfigConnectOrCreateFieldInput
  create: ApiActionConfigCreateFieldInput
}

input ApiActionConfigNodeAggregationWhereInput {
  AND: [ApiActionConfigNodeAggregationWhereInput!]
  NOT: ApiActionConfigNodeAggregationWhereInput
  OR: [ApiActionConfigNodeAggregationWhereInput!]
  data_AVERAGE_LENGTH_EQUAL: Float
  data_AVERAGE_LENGTH_GT: Float
  data_AVERAGE_LENGTH_GTE: Float
  data_AVERAGE_LENGTH_LT: Float
  data_AVERAGE_LENGTH_LTE: Float
  data_LONGEST_LENGTH_EQUAL: Int
  data_LONGEST_LENGTH_GT: Int
  data_LONGEST_LENGTH_GTE: Int
  data_LONGEST_LENGTH_LT: Int
  data_LONGEST_LENGTH_LTE: Int
  data_SHORTEST_LENGTH_EQUAL: Int
  data_SHORTEST_LENGTH_GT: Int
  data_SHORTEST_LENGTH_GTE: Int
  data_SHORTEST_LENGTH_LT: Int
  data_SHORTEST_LENGTH_LTE: Int
}

type ApiActionConfigRelationship {
  cursor: String!
  node: Prop!
}

input ApiActionConfigUpdateConnectionInput {
  node: PropUpdateInput
}

input ApiActionConfigUpdateFieldInput {
  connect: ApiActionConfigConnectFieldInput
  connectOrCreate: ApiActionConfigConnectOrCreateFieldInput
  create: ApiActionConfigCreateFieldInput
  delete: ApiActionConfigDeleteFieldInput
  disconnect: ApiActionConfigDisconnectFieldInput
  update: ApiActionConfigUpdateConnectionInput
  where: ApiActionConfigConnectionWhere
}

input ApiActionConnectInput {
  config: ApiActionConfigConnectFieldInput
  element: BaseActionElementConnectFieldInput
  errorAction: ApiActionErrorActionConnectInput
  resource: ApiActionResourceConnectFieldInput
  store: BaseActionStoreConnectFieldInput
  successAction: ApiActionSuccessActionConnectInput
}

input ApiActionConnectOrCreateInput {
  config: ApiActionConfigConnectOrCreateFieldInput
  element: BaseActionElementConnectOrCreateFieldInput
  errorAction: ApiActionErrorActionConnectOrCreateInput
  resource: ApiActionResourceConnectOrCreateFieldInput
  store: BaseActionStoreConnectOrCreateFieldInput
  successAction: ApiActionSuccessActionConnectOrCreateInput
}

input ApiActionConnectOrCreateWhere {
  node: ApiActionUniqueWhere!
}

input ApiActionConnectWhere {
  node: ApiActionWhere!
}

input ApiActionCreateInput {
  config: ApiActionConfigFieldInput
  element: BaseActionElementFieldInput
  errorAction: ApiActionErrorActionCreateInput
  id: ID!
  name: String!
  resource: ApiActionResourceFieldInput
  store: BaseActionStoreFieldInput
  successAction: ApiActionSuccessActionCreateInput
  type: ActionKind! = ApiAction
}

input ApiActionDeleteInput {
  config: ApiActionConfigDeleteFieldInput
  element: BaseActionElementDeleteFieldInput
  errorAction: ApiActionErrorActionDeleteInput
  resource: ApiActionResourceDeleteFieldInput
  store: BaseActionStoreDeleteFieldInput
  successAction: ApiActionSuccessActionDeleteInput
}

input ApiActionDisconnectInput {
  config: ApiActionConfigDisconnectFieldInput
  element: BaseActionElementDisconnectFieldInput
  errorAction: ApiActionErrorActionDisconnectInput
  resource: ApiActionResourceDisconnectFieldInput
  store: BaseActionStoreDisconnectFieldInput
  successAction: ApiActionSuccessActionDisconnectInput
}

type ApiActionEdge {
  cursor: String!
  node: ApiAction!
}

input ApiActionElementAggregateInput {
  AND: [ApiActionElementAggregateInput!]
  NOT: ApiActionElementAggregateInput
  OR: [ApiActionElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ApiActionElementNodeAggregationWhereInput
}

type ApiActionElementElementAggregationSelection {
  count: Int!
  node: ApiActionElementElementNodeAggregateSelection
}

type ApiActionElementElementNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

input ApiActionElementNodeAggregationWhereInput {
  AND: [ApiActionElementNodeAggregationWhereInput!]
  NOT: ApiActionElementNodeAggregationWhereInput
  OR: [ApiActionElementNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

input ApiActionErrorActionApiActionConnectFieldInput {
  connect: ApiActionConnectInput
  where: ApiActionConnectWhere
}

input ApiActionErrorActionApiActionConnectOrCreateFieldInput {
  onCreate: ApiActionErrorActionApiActionConnectOrCreateFieldInputOnCreate!
  where: ApiActionConnectOrCreateWhere!
}

input ApiActionErrorActionApiActionConnectOrCreateFieldInputOnCreate {
  node: ApiActionOnCreateInput!
}

input ApiActionErrorActionApiActionConnectionWhere {
  AND: [ApiActionErrorActionApiActionConnectionWhere!]
  NOT: ApiActionErrorActionApiActionConnectionWhere
  OR: [ApiActionErrorActionApiActionConnectionWhere!]
  node: ApiActionWhere
}

input ApiActionErrorActionApiActionCreateFieldInput {
  node: ApiActionCreateInput!
}

input ApiActionErrorActionApiActionDeleteFieldInput {
  delete: ApiActionDeleteInput
  where: ApiActionErrorActionApiActionConnectionWhere
}

input ApiActionErrorActionApiActionDisconnectFieldInput {
  disconnect: ApiActionDisconnectInput
  where: ApiActionErrorActionApiActionConnectionWhere
}

input ApiActionErrorActionApiActionFieldInput {
  connect: ApiActionErrorActionApiActionConnectFieldInput
  connectOrCreate: ApiActionErrorActionApiActionConnectOrCreateFieldInput
  create: ApiActionErrorActionApiActionCreateFieldInput
}

input ApiActionErrorActionApiActionUpdateConnectionInput {
  node: ApiActionUpdateInput
}

input ApiActionErrorActionApiActionUpdateFieldInput {
  connect: ApiActionErrorActionApiActionConnectFieldInput
  connectOrCreate: ApiActionErrorActionApiActionConnectOrCreateFieldInput
  create: ApiActionErrorActionApiActionCreateFieldInput
  delete: ApiActionErrorActionApiActionDeleteFieldInput
  disconnect: ApiActionErrorActionApiActionDisconnectFieldInput
  update: ApiActionErrorActionApiActionUpdateConnectionInput
  where: ApiActionErrorActionApiActionConnectionWhere
}

input ApiActionErrorActionCodeActionConnectFieldInput {
  connect: CodeActionConnectInput
  where: CodeActionConnectWhere
}

input ApiActionErrorActionCodeActionConnectOrCreateFieldInput {
  onCreate: ApiActionErrorActionCodeActionConnectOrCreateFieldInputOnCreate!
  where: CodeActionConnectOrCreateWhere!
}

input ApiActionErrorActionCodeActionConnectOrCreateFieldInputOnCreate {
  node: CodeActionOnCreateInput!
}

input ApiActionErrorActionCodeActionConnectionWhere {
  AND: [ApiActionErrorActionCodeActionConnectionWhere!]
  NOT: ApiActionErrorActionCodeActionConnectionWhere
  OR: [ApiActionErrorActionCodeActionConnectionWhere!]
  node: CodeActionWhere
}

input ApiActionErrorActionCodeActionCreateFieldInput {
  node: CodeActionCreateInput!
}

input ApiActionErrorActionCodeActionDeleteFieldInput {
  delete: CodeActionDeleteInput
  where: ApiActionErrorActionCodeActionConnectionWhere
}

input ApiActionErrorActionCodeActionDisconnectFieldInput {
  disconnect: CodeActionDisconnectInput
  where: ApiActionErrorActionCodeActionConnectionWhere
}

input ApiActionErrorActionCodeActionFieldInput {
  connect: ApiActionErrorActionCodeActionConnectFieldInput
  connectOrCreate: ApiActionErrorActionCodeActionConnectOrCreateFieldInput
  create: ApiActionErrorActionCodeActionCreateFieldInput
}

input ApiActionErrorActionCodeActionUpdateConnectionInput {
  node: CodeActionUpdateInput
}

input ApiActionErrorActionCodeActionUpdateFieldInput {
  connect: ApiActionErrorActionCodeActionConnectFieldInput
  connectOrCreate: ApiActionErrorActionCodeActionConnectOrCreateFieldInput
  create: ApiActionErrorActionCodeActionCreateFieldInput
  delete: ApiActionErrorActionCodeActionDeleteFieldInput
  disconnect: ApiActionErrorActionCodeActionDisconnectFieldInput
  update: ApiActionErrorActionCodeActionUpdateConnectionInput
  where: ApiActionErrorActionCodeActionConnectionWhere
}

input ApiActionErrorActionConnectInput {
  ApiAction: ApiActionErrorActionApiActionConnectFieldInput
  CodeAction: ApiActionErrorActionCodeActionConnectFieldInput
}

input ApiActionErrorActionConnectOrCreateInput {
  ApiAction: ApiActionErrorActionApiActionConnectOrCreateFieldInput
  CodeAction: ApiActionErrorActionCodeActionConnectOrCreateFieldInput
}

type ApiActionErrorActionConnection {
  edges: [ApiActionErrorActionRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ApiActionErrorActionConnectionWhere {
  ApiAction: ApiActionErrorActionApiActionConnectionWhere
  CodeAction: ApiActionErrorActionCodeActionConnectionWhere
}

input ApiActionErrorActionCreateFieldInput {
  ApiAction: ApiActionErrorActionApiActionCreateFieldInput
  CodeAction: ApiActionErrorActionCodeActionCreateFieldInput
}

input ApiActionErrorActionCreateInput {
  ApiAction: ApiActionErrorActionApiActionFieldInput
  CodeAction: ApiActionErrorActionCodeActionFieldInput
}

input ApiActionErrorActionDeleteInput {
  ApiAction: ApiActionErrorActionApiActionDeleteFieldInput
  CodeAction: ApiActionErrorActionCodeActionDeleteFieldInput
}

input ApiActionErrorActionDisconnectInput {
  ApiAction: ApiActionErrorActionApiActionDisconnectFieldInput
  CodeAction: ApiActionErrorActionCodeActionDisconnectFieldInput
}

type ApiActionErrorActionRelationship {
  cursor: String!
  node: AnyAction!
}

input ApiActionErrorActionUpdateInput {
  ApiAction: ApiActionErrorActionApiActionUpdateFieldInput
  CodeAction: ApiActionErrorActionCodeActionUpdateFieldInput
}

input ApiActionOnCreateInput {
  id: ID!
  name: String!
  type: ActionKind! = ApiAction
}

input ApiActionOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ApiActionSort objects to sort ApiActions by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ApiActionSort!]
}

type ApiActionPropConfigAggregationSelection {
  count: Int!
  node: ApiActionPropConfigNodeAggregateSelection
}

type ApiActionPropConfigNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ApiActionRelationInput {
  config: ApiActionConfigCreateFieldInput
  element: BaseActionElementCreateFieldInput
  errorAction: ApiActionErrorActionCreateFieldInput
  resource: ApiActionResourceCreateFieldInput
  store: BaseActionStoreCreateFieldInput
  successAction: ApiActionSuccessActionCreateFieldInput
}

input ApiActionResourceAggregateInput {
  AND: [ApiActionResourceAggregateInput!]
  NOT: ApiActionResourceAggregateInput
  OR: [ApiActionResourceAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ApiActionResourceNodeAggregationWhereInput
}

input ApiActionResourceConnectFieldInput {
  connect: ResourceConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ResourceConnectWhere
}

input ApiActionResourceConnectOrCreateFieldInput {
  onCreate: ApiActionResourceConnectOrCreateFieldInputOnCreate!
  where: ResourceConnectOrCreateWhere!
}

input ApiActionResourceConnectOrCreateFieldInputOnCreate {
  node: ResourceOnCreateInput!
}

type ApiActionResourceConnection {
  edges: [ApiActionResourceRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ApiActionResourceConnectionSort {
  node: ResourceSort
}

input ApiActionResourceConnectionWhere {
  AND: [ApiActionResourceConnectionWhere!]
  NOT: ApiActionResourceConnectionWhere
  OR: [ApiActionResourceConnectionWhere!]
  node: ResourceWhere
}

input ApiActionResourceCreateFieldInput {
  node: ResourceCreateInput!
}

input ApiActionResourceDeleteFieldInput {
  delete: ResourceDeleteInput
  where: ApiActionResourceConnectionWhere
}

input ApiActionResourceDisconnectFieldInput {
  disconnect: ResourceDisconnectInput
  where: ApiActionResourceConnectionWhere
}

input ApiActionResourceFieldInput {
  connect: ApiActionResourceConnectFieldInput
  connectOrCreate: ApiActionResourceConnectOrCreateFieldInput
  create: ApiActionResourceCreateFieldInput
}

input ApiActionResourceNodeAggregationWhereInput {
  AND: [ApiActionResourceNodeAggregationWhereInput!]
  NOT: ApiActionResourceNodeAggregationWhereInput
  OR: [ApiActionResourceNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type ApiActionResourceRelationship {
  cursor: String!
  node: Resource!
}

type ApiActionResourceResourceAggregationSelection {
  count: Int!
  node: ApiActionResourceResourceNodeAggregateSelection
}

type ApiActionResourceResourceNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ApiActionResourceUpdateConnectionInput {
  node: ResourceUpdateInput
}

input ApiActionResourceUpdateFieldInput {
  connect: ApiActionResourceConnectFieldInput
  connectOrCreate: ApiActionResourceConnectOrCreateFieldInput
  create: ApiActionResourceCreateFieldInput
  delete: ApiActionResourceDeleteFieldInput
  disconnect: ApiActionResourceDisconnectFieldInput
  update: ApiActionResourceUpdateConnectionInput
  where: ApiActionResourceConnectionWhere
}

"""
Fields to sort ApiActions by. The order in which sorts are applied is not guaranteed when specifying many fields in one ApiActionSort object.
"""
input ApiActionSort {
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

input ApiActionStoreAggregateInput {
  AND: [ApiActionStoreAggregateInput!]
  NOT: ApiActionStoreAggregateInput
  OR: [ApiActionStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ApiActionStoreNodeAggregationWhereInput
}

input ApiActionStoreNodeAggregationWhereInput {
  AND: [ApiActionStoreNodeAggregationWhereInput!]
  NOT: ApiActionStoreNodeAggregationWhereInput
  OR: [ApiActionStoreNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type ApiActionStoreStoreAggregationSelection {
  count: Int!
  node: ApiActionStoreStoreNodeAggregateSelection
}

type ApiActionStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ApiActionSuccessActionApiActionConnectFieldInput {
  connect: ApiActionConnectInput
  where: ApiActionConnectWhere
}

input ApiActionSuccessActionApiActionConnectOrCreateFieldInput {
  onCreate: ApiActionSuccessActionApiActionConnectOrCreateFieldInputOnCreate!
  where: ApiActionConnectOrCreateWhere!
}

input ApiActionSuccessActionApiActionConnectOrCreateFieldInputOnCreate {
  node: ApiActionOnCreateInput!
}

input ApiActionSuccessActionApiActionConnectionWhere {
  AND: [ApiActionSuccessActionApiActionConnectionWhere!]
  NOT: ApiActionSuccessActionApiActionConnectionWhere
  OR: [ApiActionSuccessActionApiActionConnectionWhere!]
  node: ApiActionWhere
}

input ApiActionSuccessActionApiActionCreateFieldInput {
  node: ApiActionCreateInput!
}

input ApiActionSuccessActionApiActionDeleteFieldInput {
  delete: ApiActionDeleteInput
  where: ApiActionSuccessActionApiActionConnectionWhere
}

input ApiActionSuccessActionApiActionDisconnectFieldInput {
  disconnect: ApiActionDisconnectInput
  where: ApiActionSuccessActionApiActionConnectionWhere
}

input ApiActionSuccessActionApiActionFieldInput {
  connect: ApiActionSuccessActionApiActionConnectFieldInput
  connectOrCreate: ApiActionSuccessActionApiActionConnectOrCreateFieldInput
  create: ApiActionSuccessActionApiActionCreateFieldInput
}

input ApiActionSuccessActionApiActionUpdateConnectionInput {
  node: ApiActionUpdateInput
}

input ApiActionSuccessActionApiActionUpdateFieldInput {
  connect: ApiActionSuccessActionApiActionConnectFieldInput
  connectOrCreate: ApiActionSuccessActionApiActionConnectOrCreateFieldInput
  create: ApiActionSuccessActionApiActionCreateFieldInput
  delete: ApiActionSuccessActionApiActionDeleteFieldInput
  disconnect: ApiActionSuccessActionApiActionDisconnectFieldInput
  update: ApiActionSuccessActionApiActionUpdateConnectionInput
  where: ApiActionSuccessActionApiActionConnectionWhere
}

input ApiActionSuccessActionCodeActionConnectFieldInput {
  connect: CodeActionConnectInput
  where: CodeActionConnectWhere
}

input ApiActionSuccessActionCodeActionConnectOrCreateFieldInput {
  onCreate: ApiActionSuccessActionCodeActionConnectOrCreateFieldInputOnCreate!
  where: CodeActionConnectOrCreateWhere!
}

input ApiActionSuccessActionCodeActionConnectOrCreateFieldInputOnCreate {
  node: CodeActionOnCreateInput!
}

input ApiActionSuccessActionCodeActionConnectionWhere {
  AND: [ApiActionSuccessActionCodeActionConnectionWhere!]
  NOT: ApiActionSuccessActionCodeActionConnectionWhere
  OR: [ApiActionSuccessActionCodeActionConnectionWhere!]
  node: CodeActionWhere
}

input ApiActionSuccessActionCodeActionCreateFieldInput {
  node: CodeActionCreateInput!
}

input ApiActionSuccessActionCodeActionDeleteFieldInput {
  delete: CodeActionDeleteInput
  where: ApiActionSuccessActionCodeActionConnectionWhere
}

input ApiActionSuccessActionCodeActionDisconnectFieldInput {
  disconnect: CodeActionDisconnectInput
  where: ApiActionSuccessActionCodeActionConnectionWhere
}

input ApiActionSuccessActionCodeActionFieldInput {
  connect: ApiActionSuccessActionCodeActionConnectFieldInput
  connectOrCreate: ApiActionSuccessActionCodeActionConnectOrCreateFieldInput
  create: ApiActionSuccessActionCodeActionCreateFieldInput
}

input ApiActionSuccessActionCodeActionUpdateConnectionInput {
  node: CodeActionUpdateInput
}

input ApiActionSuccessActionCodeActionUpdateFieldInput {
  connect: ApiActionSuccessActionCodeActionConnectFieldInput
  connectOrCreate: ApiActionSuccessActionCodeActionConnectOrCreateFieldInput
  create: ApiActionSuccessActionCodeActionCreateFieldInput
  delete: ApiActionSuccessActionCodeActionDeleteFieldInput
  disconnect: ApiActionSuccessActionCodeActionDisconnectFieldInput
  update: ApiActionSuccessActionCodeActionUpdateConnectionInput
  where: ApiActionSuccessActionCodeActionConnectionWhere
}

input ApiActionSuccessActionConnectInput {
  ApiAction: ApiActionSuccessActionApiActionConnectFieldInput
  CodeAction: ApiActionSuccessActionCodeActionConnectFieldInput
}

input ApiActionSuccessActionConnectOrCreateInput {
  ApiAction: ApiActionSuccessActionApiActionConnectOrCreateFieldInput
  CodeAction: ApiActionSuccessActionCodeActionConnectOrCreateFieldInput
}

type ApiActionSuccessActionConnection {
  edges: [ApiActionSuccessActionRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ApiActionSuccessActionConnectionWhere {
  ApiAction: ApiActionSuccessActionApiActionConnectionWhere
  CodeAction: ApiActionSuccessActionCodeActionConnectionWhere
}

input ApiActionSuccessActionCreateFieldInput {
  ApiAction: ApiActionSuccessActionApiActionCreateFieldInput
  CodeAction: ApiActionSuccessActionCodeActionCreateFieldInput
}

input ApiActionSuccessActionCreateInput {
  ApiAction: ApiActionSuccessActionApiActionFieldInput
  CodeAction: ApiActionSuccessActionCodeActionFieldInput
}

input ApiActionSuccessActionDeleteInput {
  ApiAction: ApiActionSuccessActionApiActionDeleteFieldInput
  CodeAction: ApiActionSuccessActionCodeActionDeleteFieldInput
}

input ApiActionSuccessActionDisconnectInput {
  ApiAction: ApiActionSuccessActionApiActionDisconnectFieldInput
  CodeAction: ApiActionSuccessActionCodeActionDisconnectFieldInput
}

type ApiActionSuccessActionRelationship {
  cursor: String!
  node: AnyAction!
}

input ApiActionSuccessActionUpdateInput {
  ApiAction: ApiActionSuccessActionApiActionUpdateFieldInput
  CodeAction: ApiActionSuccessActionCodeActionUpdateFieldInput
}

input ApiActionUniqueWhere {
  id: ID
}

input ApiActionUpdateInput {
  config: ApiActionConfigUpdateFieldInput
  element: BaseActionElementUpdateFieldInput
  errorAction: ApiActionErrorActionUpdateInput
  id: ID
  name: String
  resource: ApiActionResourceUpdateFieldInput
  store: BaseActionStoreUpdateFieldInput
  successAction: ApiActionSuccessActionUpdateInput
}

input ApiActionWhere {
  AND: [ApiActionWhere!]
  NOT: ApiActionWhere
  OR: [ApiActionWhere!]
  config: PropWhere
  configAggregate: ApiActionConfigAggregateInput
  configConnection: ApiActionConfigConnectionWhere
  configConnection_NOT: ApiActionConfigConnectionWhere
  config_NOT: PropWhere
  element: ElementWhere
  elementAggregate: ApiActionElementAggregateInput
  elementConnection: BaseActionElementConnectionWhere
  elementConnection_NOT: BaseActionElementConnectionWhere
  element_NOT: ElementWhere
  errorActionConnection: ApiActionErrorActionConnectionWhere
  errorActionConnection_NOT: ApiActionErrorActionConnectionWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  resource: ResourceWhere
  resourceAggregate: ApiActionResourceAggregateInput
  resourceConnection: ApiActionResourceConnectionWhere
  resourceConnection_NOT: ApiActionResourceConnectionWhere
  resource_NOT: ResourceWhere
  store: StoreWhere
  storeAggregate: ApiActionStoreAggregateInput
  storeConnection: BaseActionStoreConnectionWhere
  storeConnection_NOT: BaseActionStoreConnectionWhere
  store_NOT: StoreWhere
  successActionConnection: ApiActionSuccessActionConnectionWhere
  successActionConnection_NOT: ApiActionSuccessActionConnectionWhere
  type: ActionKind
  type_IN: [ActionKind!]
}

type ApiActionsConnection {
  edges: [ApiActionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type App implements WithOwner {
  _compoundName: String!
  domains(
    directed: Boolean = true
    options: DomainOptions
    where: DomainWhere
  ): [Domain!]!
  domainsAggregate(
    directed: Boolean = true
    where: DomainWhere
  ): AppDomainDomainsAggregationSelection
  domainsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AppDomainsConnectionSort!]
    where: AppDomainsConnectionWhere
  ): AppDomainsConnection!
  id: ID!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): AppUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [WithOwnerOwnerConnectionSort!]
    where: WithOwnerOwnerConnectionWhere
  ): WithOwnerOwnerConnection!
  pages(
    directed: Boolean = true
    options: PageOptions
    where: PageWhere
  ): [Page!]!
  pagesAggregate(
    directed: Boolean = true
    where: PageWhere
  ): AppPagePagesAggregationSelection
  pagesConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AppPagesConnectionSort!]
    where: AppPagesConnectionWhere
  ): AppPagesConnection!
  slug: String!
}

type AppAggregateSelection {
  _compoundName: StringAggregateSelectionNonNullable!
  count: Int!
  id: IDAggregateSelectionNonNullable!
}

input AppConnectInput {
  domains: [AppDomainsConnectFieldInput!]
  owner: WithOwnerOwnerConnectFieldInput
  pages: [AppPagesConnectFieldInput!]
}

input AppConnectOrCreateInput {
  domains: [AppDomainsConnectOrCreateFieldInput!]
  owner: WithOwnerOwnerConnectOrCreateFieldInput
  pages: [AppPagesConnectOrCreateFieldInput!]
}

input AppConnectOrCreateWhere {
  node: AppUniqueWhere!
}

input AppConnectWhere {
  node: AppWhere!
}

input AppCreateInput {
  _compoundName: String!
  domains: AppDomainsFieldInput
  id: ID!
  owner: WithOwnerOwnerFieldInput
  pages: AppPagesFieldInput
}

input AppDeleteInput {
  domains: [AppDomainsDeleteFieldInput!]
  owner: WithOwnerOwnerDeleteFieldInput
  pages: [AppPagesDeleteFieldInput!]
}

input AppDisconnectInput {
  domains: [AppDomainsDisconnectFieldInput!]
  owner: WithOwnerOwnerDisconnectFieldInput
  pages: [AppPagesDisconnectFieldInput!]
}

type AppDomainDomainsAggregationSelection {
  count: Int!
  node: AppDomainDomainsNodeAggregateSelection
}

type AppDomainDomainsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AppDomainsAggregateInput {
  AND: [AppDomainsAggregateInput!]
  NOT: AppDomainsAggregateInput
  OR: [AppDomainsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppDomainsNodeAggregationWhereInput
}

input AppDomainsConnectFieldInput {
  connect: [DomainConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: DomainConnectWhere
}

input AppDomainsConnectOrCreateFieldInput {
  onCreate: AppDomainsConnectOrCreateFieldInputOnCreate!
  where: DomainConnectOrCreateWhere!
}

input AppDomainsConnectOrCreateFieldInputOnCreate {
  node: DomainOnCreateInput!
}

type AppDomainsConnection {
  edges: [AppDomainsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppDomainsConnectionSort {
  node: DomainSort
}

input AppDomainsConnectionWhere {
  AND: [AppDomainsConnectionWhere!]
  NOT: AppDomainsConnectionWhere
  OR: [AppDomainsConnectionWhere!]
  node: DomainWhere
}

input AppDomainsCreateFieldInput {
  node: DomainCreateInput!
}

input AppDomainsDeleteFieldInput {
  delete: DomainDeleteInput
  where: AppDomainsConnectionWhere
}

input AppDomainsDisconnectFieldInput {
  disconnect: DomainDisconnectInput
  where: AppDomainsConnectionWhere
}

input AppDomainsFieldInput {
  connect: [AppDomainsConnectFieldInput!]
  connectOrCreate: [AppDomainsConnectOrCreateFieldInput!]
  create: [AppDomainsCreateFieldInput!]
}

input AppDomainsNodeAggregationWhereInput {
  AND: [AppDomainsNodeAggregationWhereInput!]
  NOT: AppDomainsNodeAggregationWhereInput
  OR: [AppDomainsNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type AppDomainsRelationship {
  cursor: String!
  node: Domain!
}

input AppDomainsUpdateConnectionInput {
  node: DomainUpdateInput
}

input AppDomainsUpdateFieldInput {
  connect: [AppDomainsConnectFieldInput!]
  connectOrCreate: [AppDomainsConnectOrCreateFieldInput!]
  create: [AppDomainsCreateFieldInput!]
  delete: [AppDomainsDeleteFieldInput!]
  disconnect: [AppDomainsDisconnectFieldInput!]
  update: AppDomainsUpdateConnectionInput
  where: AppDomainsConnectionWhere
}

type AppEdge {
  cursor: String!
  node: App!
}

input AppOnCreateInput {
  _compoundName: String!
  id: ID!
}

input AppOptions {
  limit: Int
  offset: Int

  """
  Specify one or more AppSort objects to sort Apps by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [AppSort!]
}

input AppOwnerAggregateInput {
  AND: [AppOwnerAggregateInput!]
  NOT: AppOwnerAggregateInput
  OR: [AppOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppOwnerNodeAggregationWhereInput
}

input AppOwnerNodeAggregationWhereInput {
  AND: [AppOwnerNodeAggregationWhereInput!]
  NOT: AppOwnerNodeAggregationWhereInput
  OR: [AppOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

type AppPagePagesAggregationSelection {
  count: Int!
  node: AppPagePagesNodeAggregateSelection
}

type AppPagePagesNodeAggregateSelection {
  _compoundName: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  url: StringAggregateSelectionNonNullable!
}

input AppPagesAggregateInput {
  AND: [AppPagesAggregateInput!]
  NOT: AppPagesAggregateInput
  OR: [AppPagesAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppPagesNodeAggregationWhereInput
}

input AppPagesConnectFieldInput {
  connect: [PageConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: PageConnectWhere
}

input AppPagesConnectOrCreateFieldInput {
  onCreate: AppPagesConnectOrCreateFieldInputOnCreate!
  where: PageConnectOrCreateWhere!
}

input AppPagesConnectOrCreateFieldInputOnCreate {
  node: PageOnCreateInput!
}

type AppPagesConnection {
  edges: [AppPagesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppPagesConnectionSort {
  node: PageSort
}

input AppPagesConnectionWhere {
  AND: [AppPagesConnectionWhere!]
  NOT: AppPagesConnectionWhere
  OR: [AppPagesConnectionWhere!]
  node: PageWhere
}

input AppPagesCreateFieldInput {
  node: PageCreateInput!
}

input AppPagesDeleteFieldInput {
  delete: PageDeleteInput
  where: AppPagesConnectionWhere
}

input AppPagesDisconnectFieldInput {
  disconnect: PageDisconnectInput
  where: AppPagesConnectionWhere
}

input AppPagesFieldInput {
  connect: [AppPagesConnectFieldInput!]
  connectOrCreate: [AppPagesConnectOrCreateFieldInput!]
  create: [AppPagesCreateFieldInput!]
}

input AppPagesNodeAggregationWhereInput {
  AND: [AppPagesNodeAggregationWhereInput!]
  NOT: AppPagesNodeAggregationWhereInput
  OR: [AppPagesNodeAggregationWhereInput!]
  _compoundName_AVERAGE_LENGTH_EQUAL: Float
  _compoundName_AVERAGE_LENGTH_GT: Float
  _compoundName_AVERAGE_LENGTH_GTE: Float
  _compoundName_AVERAGE_LENGTH_LT: Float
  _compoundName_AVERAGE_LENGTH_LTE: Float
  _compoundName_LONGEST_LENGTH_EQUAL: Int
  _compoundName_LONGEST_LENGTH_GT: Int
  _compoundName_LONGEST_LENGTH_GTE: Int
  _compoundName_LONGEST_LENGTH_LT: Int
  _compoundName_LONGEST_LENGTH_LTE: Int
  _compoundName_SHORTEST_LENGTH_EQUAL: Int
  _compoundName_SHORTEST_LENGTH_GT: Int
  _compoundName_SHORTEST_LENGTH_GTE: Int
  _compoundName_SHORTEST_LENGTH_LT: Int
  _compoundName_SHORTEST_LENGTH_LTE: Int
  url_AVERAGE_LENGTH_EQUAL: Float
  url_AVERAGE_LENGTH_GT: Float
  url_AVERAGE_LENGTH_GTE: Float
  url_AVERAGE_LENGTH_LT: Float
  url_AVERAGE_LENGTH_LTE: Float
  url_LONGEST_LENGTH_EQUAL: Int
  url_LONGEST_LENGTH_GT: Int
  url_LONGEST_LENGTH_GTE: Int
  url_LONGEST_LENGTH_LT: Int
  url_LONGEST_LENGTH_LTE: Int
  url_SHORTEST_LENGTH_EQUAL: Int
  url_SHORTEST_LENGTH_GT: Int
  url_SHORTEST_LENGTH_GTE: Int
  url_SHORTEST_LENGTH_LT: Int
  url_SHORTEST_LENGTH_LTE: Int
}

type AppPagesRelationship {
  cursor: String!
  node: Page!
}

input AppPagesUpdateConnectionInput {
  node: PageUpdateInput
}

input AppPagesUpdateFieldInput {
  connect: [AppPagesConnectFieldInput!]
  connectOrCreate: [AppPagesConnectOrCreateFieldInput!]
  create: [AppPagesCreateFieldInput!]
  delete: [AppPagesDeleteFieldInput!]
  disconnect: [AppPagesDisconnectFieldInput!]
  update: AppPagesUpdateConnectionInput
  where: AppPagesConnectionWhere
}

input AppRelationInput {
  domains: [AppDomainsCreateFieldInput!]
  owner: WithOwnerOwnerCreateFieldInput
  pages: [AppPagesCreateFieldInput!]
}

"""
Fields to sort Apps by. The order in which sorts are applied is not guaranteed when specifying many fields in one AppSort object.
"""
input AppSort {
  _compoundName: SortDirection
  id: SortDirection
}

"""
Allows picking a app from the list of apps
"""
type AppType implements IBaseType {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): AppTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type AppTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AppTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
}

input AppTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input AppTypeConnectOrCreateWhere {
  node: AppTypeUniqueWhere!
}

input AppTypeConnectWhere {
  node: AppTypeWhere!
}

input AppTypeCreateInput {
  id: ID!
  kind: TypeKind! = AppType
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input AppTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
}

input AppTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type AppTypeEdge {
  cursor: String!
  node: AppType!
}

input AppTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = AppType
  name: String!
}

input AppTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more AppTypeSort objects to sort AppTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [AppTypeSort!]
}

input AppTypeOwnerAggregateInput {
  AND: [AppTypeOwnerAggregateInput!]
  NOT: AppTypeOwnerAggregateInput
  OR: [AppTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppTypeOwnerNodeAggregationWhereInput
}

input AppTypeOwnerNodeAggregationWhereInput {
  AND: [AppTypeOwnerNodeAggregationWhereInput!]
  NOT: AppTypeOwnerNodeAggregationWhereInput
  OR: [AppTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input AppTypeRelationInput {
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort AppTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one AppTypeSort object.
"""
input AppTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input AppTypeUniqueWhere {
  id: ID
}

input AppTypeUpdateInput {
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type AppTypeUserOwnerAggregationSelection {
  count: Int!
  node: AppTypeUserOwnerNodeAggregateSelection
}

type AppTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input AppTypeWhere {
  AND: [AppTypeWhere!]
  NOT: AppTypeWhere
  OR: [AppTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: AppTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type AppTypesConnection {
  edges: [AppTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppUniqueWhere {
  _compoundName: String
  id: ID
}

input AppUpdateInput {
  _compoundName: String
  domains: [AppDomainsUpdateFieldInput!]
  id: ID
  owner: WithOwnerOwnerUpdateFieldInput
  pages: [AppPagesUpdateFieldInput!]
}

type AppUserOwnerAggregationSelection {
  count: Int!
  node: AppUserOwnerNodeAggregateSelection
}

type AppUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input AppWhere {
  AND: [AppWhere!]
  NOT: AppWhere
  OR: [AppWhere!]
  _compoundName: String
  _compoundName_CONTAINS: String
  _compoundName_ENDS_WITH: String
  _compoundName_IN: [String!]
  _compoundName_MATCHES: String
  _compoundName_STARTS_WITH: String
  domainsAggregate: AppDomainsAggregateInput

  """
  Return Apps where all of the related AppDomainsConnections match this filter
  """
  domainsConnection_ALL: AppDomainsConnectionWhere

  """
  Return Apps where none of the related AppDomainsConnections match this filter
  """
  domainsConnection_NONE: AppDomainsConnectionWhere

  """
  Return Apps where one of the related AppDomainsConnections match this filter
  """
  domainsConnection_SINGLE: AppDomainsConnectionWhere

  """
  Return Apps where some of the related AppDomainsConnections match this filter
  """
  domainsConnection_SOME: AppDomainsConnectionWhere

  """
  Return Apps where all of the related Domains match this filter
  """
  domains_ALL: DomainWhere

  """
  Return Apps where none of the related Domains match this filter
  """
  domains_NONE: DomainWhere

  """
  Return Apps where one of the related Domains match this filter
  """
  domains_SINGLE: DomainWhere

  """
  Return Apps where some of the related Domains match this filter
  """
  domains_SOME: DomainWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  owner: UserWhere
  ownerAggregate: AppOwnerAggregateInput
  ownerConnection: WithOwnerOwnerConnectionWhere
  ownerConnection_NOT: WithOwnerOwnerConnectionWhere
  owner_NOT: UserWhere
  pagesAggregate: AppPagesAggregateInput

  """
  Return Apps where all of the related AppPagesConnections match this filter
  """
  pagesConnection_ALL: AppPagesConnectionWhere

  """
  Return Apps where none of the related AppPagesConnections match this filter
  """
  pagesConnection_NONE: AppPagesConnectionWhere

  """
  Return Apps where one of the related AppPagesConnections match this filter
  """
  pagesConnection_SINGLE: AppPagesConnectionWhere

  """
  Return Apps where some of the related AppPagesConnections match this filter
  """
  pagesConnection_SOME: AppPagesConnectionWhere

  """
  Return Apps where all of the related Pages match this filter
  """
  pages_ALL: PageWhere

  """
  Return Apps where none of the related Pages match this filter
  """
  pages_NONE: PageWhere

  """
  Return Apps where one of the related Pages match this filter
  """
  pages_SINGLE: PageWhere

  """
  Return Apps where some of the related Pages match this filter
  """
  pages_SOME: PageWhere
}

type AppsConnection {
  edges: [AppEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
ArrayType Allows defining a variable number of items of a given type.
Contains a reference to another type which is the array item type.
"""
type ArrayType implements IBaseType & WithDescendants {
  descendantTypesIds: [ID!]!
  fieldRefs(
    directed: Boolean = true
    options: FieldOptions
    where: FieldWhere
  ): [Field!]!
  fieldRefsAggregate(
    directed: Boolean = true
    where: FieldWhere
  ): ArrayTypeFieldFieldRefsAggregationSelection
  fieldRefsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ArrayTypeFieldRefsConnectionSort!]
    where: ArrayTypeFieldRefsConnectionWhere
  ): ArrayTypeFieldRefsConnection!
  id: ID!
  itemType(
    directed: Boolean = true
    options: IBaseTypeOptions
    where: IBaseTypeWhere
  ): IBaseType!
  itemTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ArrayTypeItemTypeConnectionSort!]
    where: ArrayTypeItemTypeConnectionWhere
  ): ArrayTypeItemTypeConnection!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ArrayTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type ArrayTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ArrayTypeConnectInput {
  fieldRefs: [ArrayTypeFieldRefsConnectFieldInput!]
  itemType: ArrayTypeItemTypeConnectFieldInput
  owner: IBaseTypeOwnerConnectFieldInput
}

input ArrayTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input ArrayTypeConnectOrCreateWhere {
  node: ArrayTypeUniqueWhere!
}

input ArrayTypeConnectWhere {
  node: ArrayTypeWhere!
}

input ArrayTypeCreateInput {
  fieldRefs: ArrayTypeFieldRefsFieldInput
  id: ID!
  itemType: ArrayTypeItemTypeFieldInput
  kind: TypeKind! = ArrayType
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input ArrayTypeDeleteInput {
  fieldRefs: [ArrayTypeFieldRefsDeleteFieldInput!]
  itemType: ArrayTypeItemTypeDeleteFieldInput
  owner: IBaseTypeOwnerDeleteFieldInput
}

input ArrayTypeDisconnectInput {
  fieldRefs: [ArrayTypeFieldRefsDisconnectFieldInput!]
  itemType: ArrayTypeItemTypeDisconnectFieldInput
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type ArrayTypeEdge {
  cursor: String!
  node: ArrayType!
}

type ArrayTypeFieldFieldRefsAggregationSelection {
  count: Int!
  node: ArrayTypeFieldFieldRefsNodeAggregateSelection
}

type ArrayTypeFieldFieldRefsNodeAggregateSelection {
  defaultValues: StringAggregateSelectionNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  key: StringAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  validationRules: StringAggregateSelectionNullable!
}

input ArrayTypeFieldRefsAggregateInput {
  AND: [ArrayTypeFieldRefsAggregateInput!]
  NOT: ArrayTypeFieldRefsAggregateInput
  OR: [ArrayTypeFieldRefsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ArrayTypeFieldRefsNodeAggregationWhereInput
}

input ArrayTypeFieldRefsConnectFieldInput {
  connect: [FieldConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: FieldConnectWhere
}

type ArrayTypeFieldRefsConnection {
  edges: [ArrayTypeFieldRefsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ArrayTypeFieldRefsConnectionSort {
  node: FieldSort
}

input ArrayTypeFieldRefsConnectionWhere {
  AND: [ArrayTypeFieldRefsConnectionWhere!]
  NOT: ArrayTypeFieldRefsConnectionWhere
  OR: [ArrayTypeFieldRefsConnectionWhere!]
  node: FieldWhere
}

input ArrayTypeFieldRefsCreateFieldInput {
  node: FieldCreateInput!
}

input ArrayTypeFieldRefsDeleteFieldInput {
  delete: FieldDeleteInput
  where: ArrayTypeFieldRefsConnectionWhere
}

input ArrayTypeFieldRefsDisconnectFieldInput {
  disconnect: FieldDisconnectInput
  where: ArrayTypeFieldRefsConnectionWhere
}

input ArrayTypeFieldRefsFieldInput {
  connect: [ArrayTypeFieldRefsConnectFieldInput!]
  create: [ArrayTypeFieldRefsCreateFieldInput!]
}

input ArrayTypeFieldRefsNodeAggregationWhereInput {
  AND: [ArrayTypeFieldRefsNodeAggregationWhereInput!]
  NOT: ArrayTypeFieldRefsNodeAggregationWhereInput
  OR: [ArrayTypeFieldRefsNodeAggregationWhereInput!]
  defaultValues_AVERAGE_LENGTH_EQUAL: Float
  defaultValues_AVERAGE_LENGTH_GT: Float
  defaultValues_AVERAGE_LENGTH_GTE: Float
  defaultValues_AVERAGE_LENGTH_LT: Float
  defaultValues_AVERAGE_LENGTH_LTE: Float
  defaultValues_LONGEST_LENGTH_EQUAL: Int
  defaultValues_LONGEST_LENGTH_GT: Int
  defaultValues_LONGEST_LENGTH_GTE: Int
  defaultValues_LONGEST_LENGTH_LT: Int
  defaultValues_LONGEST_LENGTH_LTE: Int
  defaultValues_SHORTEST_LENGTH_EQUAL: Int
  defaultValues_SHORTEST_LENGTH_GT: Int
  defaultValues_SHORTEST_LENGTH_GTE: Int
  defaultValues_SHORTEST_LENGTH_LT: Int
  defaultValues_SHORTEST_LENGTH_LTE: Int
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  key_AVERAGE_LENGTH_EQUAL: Float
  key_AVERAGE_LENGTH_GT: Float
  key_AVERAGE_LENGTH_GTE: Float
  key_AVERAGE_LENGTH_LT: Float
  key_AVERAGE_LENGTH_LTE: Float
  key_LONGEST_LENGTH_EQUAL: Int
  key_LONGEST_LENGTH_GT: Int
  key_LONGEST_LENGTH_GTE: Int
  key_LONGEST_LENGTH_LT: Int
  key_LONGEST_LENGTH_LTE: Int
  key_SHORTEST_LENGTH_EQUAL: Int
  key_SHORTEST_LENGTH_GT: Int
  key_SHORTEST_LENGTH_GTE: Int
  key_SHORTEST_LENGTH_LT: Int
  key_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  validationRules_AVERAGE_LENGTH_EQUAL: Float
  validationRules_AVERAGE_LENGTH_GT: Float
  validationRules_AVERAGE_LENGTH_GTE: Float
  validationRules_AVERAGE_LENGTH_LT: Float
  validationRules_AVERAGE_LENGTH_LTE: Float
  validationRules_LONGEST_LENGTH_EQUAL: Int
  validationRules_LONGEST_LENGTH_GT: Int
  validationRules_LONGEST_LENGTH_GTE: Int
  validationRules_LONGEST_LENGTH_LT: Int
  validationRules_LONGEST_LENGTH_LTE: Int
  validationRules_SHORTEST_LENGTH_EQUAL: Int
  validationRules_SHORTEST_LENGTH_GT: Int
  validationRules_SHORTEST_LENGTH_GTE: Int
  validationRules_SHORTEST_LENGTH_LT: Int
  validationRules_SHORTEST_LENGTH_LTE: Int
}

type ArrayTypeFieldRefsRelationship {
  cursor: String!
  node: Field!
}

input ArrayTypeFieldRefsUpdateConnectionInput {
  node: FieldUpdateInput
}

input ArrayTypeFieldRefsUpdateFieldInput {
  connect: [ArrayTypeFieldRefsConnectFieldInput!]
  create: [ArrayTypeFieldRefsCreateFieldInput!]
  delete: [ArrayTypeFieldRefsDeleteFieldInput!]
  disconnect: [ArrayTypeFieldRefsDisconnectFieldInput!]
  update: ArrayTypeFieldRefsUpdateConnectionInput
  where: ArrayTypeFieldRefsConnectionWhere
}

input ArrayTypeItemTypeConnectFieldInput {
  connect: IBaseTypeConnectInput
  where: IBaseTypeConnectWhere
}

type ArrayTypeItemTypeConnection {
  edges: [ArrayTypeItemTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ArrayTypeItemTypeConnectionSort {
  node: IBaseTypeSort
}

input ArrayTypeItemTypeConnectionWhere {
  AND: [ArrayTypeItemTypeConnectionWhere!]
  NOT: ArrayTypeItemTypeConnectionWhere
  OR: [ArrayTypeItemTypeConnectionWhere!]
  node: IBaseTypeWhere
}

input ArrayTypeItemTypeCreateFieldInput {
  node: IBaseTypeCreateInput!
}

input ArrayTypeItemTypeDeleteFieldInput {
  delete: IBaseTypeDeleteInput
  where: ArrayTypeItemTypeConnectionWhere
}

input ArrayTypeItemTypeDisconnectFieldInput {
  disconnect: IBaseTypeDisconnectInput
  where: ArrayTypeItemTypeConnectionWhere
}

input ArrayTypeItemTypeFieldInput {
  connect: ArrayTypeItemTypeConnectFieldInput
  create: ArrayTypeItemTypeCreateFieldInput
}

type ArrayTypeItemTypeRelationship {
  cursor: String!
  node: IBaseType!
}

input ArrayTypeItemTypeUpdateConnectionInput {
  node: IBaseTypeUpdateInput
}

input ArrayTypeItemTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeConnectFieldInput
  create: ArrayTypeItemTypeCreateFieldInput
  delete: ArrayTypeItemTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeDisconnectFieldInput
  update: ArrayTypeItemTypeUpdateConnectionInput
  where: ArrayTypeItemTypeConnectionWhere
}

input ArrayTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = ArrayType
  name: String!
}

input ArrayTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ArrayTypeSort objects to sort ArrayTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ArrayTypeSort!]
}

input ArrayTypeOwnerAggregateInput {
  AND: [ArrayTypeOwnerAggregateInput!]
  NOT: ArrayTypeOwnerAggregateInput
  OR: [ArrayTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ArrayTypeOwnerNodeAggregationWhereInput
}

input ArrayTypeOwnerNodeAggregationWhereInput {
  AND: [ArrayTypeOwnerNodeAggregationWhereInput!]
  NOT: ArrayTypeOwnerNodeAggregationWhereInput
  OR: [ArrayTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input ArrayTypeRelationInput {
  fieldRefs: [ArrayTypeFieldRefsCreateFieldInput!]
  itemType: ArrayTypeItemTypeCreateFieldInput
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort ArrayTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ArrayTypeSort object.
"""
input ArrayTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ArrayTypeUniqueWhere {
  id: ID
}

input ArrayTypeUpdateInput {
  fieldRefs: [ArrayTypeFieldRefsUpdateFieldInput!]
  id: ID
  itemType: ArrayTypeItemTypeUpdateFieldInput
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type ArrayTypeUserOwnerAggregationSelection {
  count: Int!
  node: ArrayTypeUserOwnerNodeAggregateSelection
}

type ArrayTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ArrayTypeWhere {
  AND: [ArrayTypeWhere!]
  NOT: ArrayTypeWhere
  OR: [ArrayTypeWhere!]
  fieldRefsAggregate: ArrayTypeFieldRefsAggregateInput

  """
  Return ArrayTypes where all of the related ArrayTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_ALL: ArrayTypeFieldRefsConnectionWhere

  """
  Return ArrayTypes where none of the related ArrayTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_NONE: ArrayTypeFieldRefsConnectionWhere

  """
  Return ArrayTypes where one of the related ArrayTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_SINGLE: ArrayTypeFieldRefsConnectionWhere

  """
  Return ArrayTypes where some of the related ArrayTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_SOME: ArrayTypeFieldRefsConnectionWhere

  """
  Return ArrayTypes where all of the related Fields match this filter
  """
  fieldRefs_ALL: FieldWhere

  """
  Return ArrayTypes where none of the related Fields match this filter
  """
  fieldRefs_NONE: FieldWhere

  """
  Return ArrayTypes where one of the related Fields match this filter
  """
  fieldRefs_SINGLE: FieldWhere

  """
  Return ArrayTypes where some of the related Fields match this filter
  """
  fieldRefs_SOME: FieldWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  itemTypeConnection: ArrayTypeItemTypeConnectionWhere
  itemTypeConnection_NOT: ArrayTypeItemTypeConnectionWhere
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ArrayTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ArrayTypesConnection {
  edges: [ArrayTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Atom implements WithOwner {
  api(
    directed: Boolean = true
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): InterfaceType!
  apiAggregate(
    directed: Boolean = true
    where: InterfaceTypeWhere
  ): AtomInterfaceTypeApiAggregationSelection
  apiConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AtomApiConnectionSort!]
    where: AtomApiConnectionWhere
  ): AtomApiConnection!
  externalCssSource: String
  externalJsSource: String
  externalSourceType: String
  icon: String
  id: ID!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): AtomUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [WithOwnerOwnerConnectionSort!]
    where: WithOwnerOwnerConnectionWhere
  ): WithOwnerOwnerConnection!
  requiredParents(
    directed: Boolean = true
    options: AtomOptions
    where: AtomWhere
  ): [Atom!]!
  requiredParentsAggregate(
    directed: Boolean = true
    where: AtomWhere
  ): AtomAtomRequiredParentsAggregationSelection
  requiredParentsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AtomRequiredParentsConnectionSort!]
    where: AtomRequiredParentsConnectionWhere
  ): AtomRequiredParentsConnection!
  suggestedChildren(
    directed: Boolean = true
    options: AtomOptions
    where: AtomWhere
  ): [Atom!]!
  suggestedChildrenAggregate(
    directed: Boolean = true
    where: AtomWhere
  ): AtomAtomSuggestedChildrenAggregationSelection
  suggestedChildrenConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AtomSuggestedChildrenConnectionSort!]
    where: AtomSuggestedChildrenConnectionWhere
  ): AtomSuggestedChildrenConnection!
  tags(directed: Boolean = true, options: TagOptions, where: TagWhere): [Tag!]!
  tagsAggregate(
    directed: Boolean = true
    where: TagWhere
  ): AtomTagTagsAggregationSelection
  tagsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AtomTagsConnectionSort!]
    where: AtomTagsConnectionWhere
  ): AtomTagsConnection!
  type: AtomType!
}

type AtomAggregateSelection {
  count: Int!
  externalCssSource: StringAggregateSelectionNullable!
  externalJsSource: StringAggregateSelectionNullable!
  externalSourceType: StringAggregateSelectionNullable!
  icon: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AtomApiAggregateInput {
  AND: [AtomApiAggregateInput!]
  NOT: AtomApiAggregateInput
  OR: [AtomApiAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AtomApiNodeAggregationWhereInput
}

input AtomApiConnectFieldInput {
  connect: InterfaceTypeConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: InterfaceTypeConnectWhere
}

input AtomApiConnectOrCreateFieldInput {
  onCreate: AtomApiConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input AtomApiConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

type AtomApiConnection {
  edges: [AtomApiRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AtomApiConnectionSort {
  node: InterfaceTypeSort
}

input AtomApiConnectionWhere {
  AND: [AtomApiConnectionWhere!]
  NOT: AtomApiConnectionWhere
  OR: [AtomApiConnectionWhere!]
  node: InterfaceTypeWhere
}

input AtomApiCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input AtomApiDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: AtomApiConnectionWhere
}

input AtomApiDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: AtomApiConnectionWhere
}

input AtomApiFieldInput {
  connect: AtomApiConnectFieldInput
  connectOrCreate: AtomApiConnectOrCreateFieldInput
  create: AtomApiCreateFieldInput
}

input AtomApiNodeAggregationWhereInput {
  AND: [AtomApiNodeAggregationWhereInput!]
  NOT: AtomApiNodeAggregationWhereInput
  OR: [AtomApiNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type AtomApiRelationship {
  cursor: String!
  node: InterfaceType!
}

input AtomApiUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input AtomApiUpdateFieldInput {
  connect: AtomApiConnectFieldInput
  connectOrCreate: AtomApiConnectOrCreateFieldInput
  create: AtomApiCreateFieldInput
  delete: AtomApiDeleteFieldInput
  disconnect: AtomApiDisconnectFieldInput
  update: AtomApiUpdateConnectionInput
  where: AtomApiConnectionWhere
}

type AtomAtomRequiredParentsAggregationSelection {
  count: Int!
  node: AtomAtomRequiredParentsNodeAggregateSelection
}

type AtomAtomRequiredParentsNodeAggregateSelection {
  externalCssSource: StringAggregateSelectionNullable!
  externalJsSource: StringAggregateSelectionNullable!
  externalSourceType: StringAggregateSelectionNullable!
  icon: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

type AtomAtomSuggestedChildrenAggregationSelection {
  count: Int!
  node: AtomAtomSuggestedChildrenNodeAggregateSelection
}

type AtomAtomSuggestedChildrenNodeAggregateSelection {
  externalCssSource: StringAggregateSelectionNullable!
  externalJsSource: StringAggregateSelectionNullable!
  externalSourceType: StringAggregateSelectionNullable!
  icon: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AtomConnectInput {
  api: AtomApiConnectFieldInput
  owner: WithOwnerOwnerConnectFieldInput
  requiredParents: [AtomRequiredParentsConnectFieldInput!]
  suggestedChildren: [AtomSuggestedChildrenConnectFieldInput!]
  tags: [AtomTagsConnectFieldInput!]
}

input AtomConnectOrCreateInput {
  api: AtomApiConnectOrCreateFieldInput
  owner: WithOwnerOwnerConnectOrCreateFieldInput
  requiredParents: [AtomRequiredParentsConnectOrCreateFieldInput!]
  suggestedChildren: [AtomSuggestedChildrenConnectOrCreateFieldInput!]
  tags: [AtomTagsConnectOrCreateFieldInput!]
}

input AtomConnectOrCreateWhere {
  node: AtomUniqueWhere!
}

input AtomConnectWhere {
  node: AtomWhere!
}

input AtomCreateInput {
  api: AtomApiFieldInput
  externalCssSource: String
  externalJsSource: String
  externalSourceType: String
  icon: String
  id: ID!
  name: String!
  owner: WithOwnerOwnerFieldInput
  requiredParents: AtomRequiredParentsFieldInput
  suggestedChildren: AtomSuggestedChildrenFieldInput
  tags: AtomTagsFieldInput
  type: AtomType!
}

input AtomDeleteInput {
  api: AtomApiDeleteFieldInput
  owner: WithOwnerOwnerDeleteFieldInput
  requiredParents: [AtomRequiredParentsDeleteFieldInput!]
  suggestedChildren: [AtomSuggestedChildrenDeleteFieldInput!]
  tags: [AtomTagsDeleteFieldInput!]
}

input AtomDisconnectInput {
  api: AtomApiDisconnectFieldInput
  owner: WithOwnerOwnerDisconnectFieldInput
  requiredParents: [AtomRequiredParentsDisconnectFieldInput!]
  suggestedChildren: [AtomSuggestedChildrenDisconnectFieldInput!]
  tags: [AtomTagsDisconnectFieldInput!]
}

type AtomEdge {
  cursor: String!
  node: Atom!
}

type AtomInterfaceTypeApiAggregationSelection {
  count: Int!
  node: AtomInterfaceTypeApiNodeAggregateSelection
}

type AtomInterfaceTypeApiNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AtomOnCreateInput {
  externalCssSource: String
  externalJsSource: String
  externalSourceType: String
  icon: String
  id: ID!
  name: String!
  type: AtomType!
}

input AtomOptions {
  limit: Int
  offset: Int

  """
  Specify one or more AtomSort objects to sort Atoms by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [AtomSort!]
}

input AtomOwnerAggregateInput {
  AND: [AtomOwnerAggregateInput!]
  NOT: AtomOwnerAggregateInput
  OR: [AtomOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AtomOwnerNodeAggregationWhereInput
}

input AtomOwnerNodeAggregationWhereInput {
  AND: [AtomOwnerNodeAggregationWhereInput!]
  NOT: AtomOwnerNodeAggregationWhereInput
  OR: [AtomOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input AtomRelationInput {
  api: AtomApiCreateFieldInput
  owner: WithOwnerOwnerCreateFieldInput
  requiredParents: [AtomRequiredParentsCreateFieldInput!]
  suggestedChildren: [AtomSuggestedChildrenCreateFieldInput!]
  tags: [AtomTagsCreateFieldInput!]
}

input AtomRequiredParentsAggregateInput {
  AND: [AtomRequiredParentsAggregateInput!]
  NOT: AtomRequiredParentsAggregateInput
  OR: [AtomRequiredParentsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AtomRequiredParentsNodeAggregationWhereInput
}

input AtomRequiredParentsConnectFieldInput {
  connect: [AtomConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: AtomConnectWhere
}

input AtomRequiredParentsConnectOrCreateFieldInput {
  onCreate: AtomRequiredParentsConnectOrCreateFieldInputOnCreate!
  where: AtomConnectOrCreateWhere!
}

input AtomRequiredParentsConnectOrCreateFieldInputOnCreate {
  node: AtomOnCreateInput!
}

type AtomRequiredParentsConnection {
  edges: [AtomRequiredParentsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AtomRequiredParentsConnectionSort {
  node: AtomSort
}

input AtomRequiredParentsConnectionWhere {
  AND: [AtomRequiredParentsConnectionWhere!]
  NOT: AtomRequiredParentsConnectionWhere
  OR: [AtomRequiredParentsConnectionWhere!]
  node: AtomWhere
}

input AtomRequiredParentsCreateFieldInput {
  node: AtomCreateInput!
}

input AtomRequiredParentsDeleteFieldInput {
  delete: AtomDeleteInput
  where: AtomRequiredParentsConnectionWhere
}

input AtomRequiredParentsDisconnectFieldInput {
  disconnect: AtomDisconnectInput
  where: AtomRequiredParentsConnectionWhere
}

input AtomRequiredParentsFieldInput {
  connect: [AtomRequiredParentsConnectFieldInput!]
  connectOrCreate: [AtomRequiredParentsConnectOrCreateFieldInput!]
  create: [AtomRequiredParentsCreateFieldInput!]
}

input AtomRequiredParentsNodeAggregationWhereInput {
  AND: [AtomRequiredParentsNodeAggregationWhereInput!]
  NOT: AtomRequiredParentsNodeAggregationWhereInput
  OR: [AtomRequiredParentsNodeAggregationWhereInput!]
  externalCssSource_AVERAGE_LENGTH_EQUAL: Float
  externalCssSource_AVERAGE_LENGTH_GT: Float
  externalCssSource_AVERAGE_LENGTH_GTE: Float
  externalCssSource_AVERAGE_LENGTH_LT: Float
  externalCssSource_AVERAGE_LENGTH_LTE: Float
  externalCssSource_LONGEST_LENGTH_EQUAL: Int
  externalCssSource_LONGEST_LENGTH_GT: Int
  externalCssSource_LONGEST_LENGTH_GTE: Int
  externalCssSource_LONGEST_LENGTH_LT: Int
  externalCssSource_LONGEST_LENGTH_LTE: Int
  externalCssSource_SHORTEST_LENGTH_EQUAL: Int
  externalCssSource_SHORTEST_LENGTH_GT: Int
  externalCssSource_SHORTEST_LENGTH_GTE: Int
  externalCssSource_SHORTEST_LENGTH_LT: Int
  externalCssSource_SHORTEST_LENGTH_LTE: Int
  externalJsSource_AVERAGE_LENGTH_EQUAL: Float
  externalJsSource_AVERAGE_LENGTH_GT: Float
  externalJsSource_AVERAGE_LENGTH_GTE: Float
  externalJsSource_AVERAGE_LENGTH_LT: Float
  externalJsSource_AVERAGE_LENGTH_LTE: Float
  externalJsSource_LONGEST_LENGTH_EQUAL: Int
  externalJsSource_LONGEST_LENGTH_GT: Int
  externalJsSource_LONGEST_LENGTH_GTE: Int
  externalJsSource_LONGEST_LENGTH_LT: Int
  externalJsSource_LONGEST_LENGTH_LTE: Int
  externalJsSource_SHORTEST_LENGTH_EQUAL: Int
  externalJsSource_SHORTEST_LENGTH_GT: Int
  externalJsSource_SHORTEST_LENGTH_GTE: Int
  externalJsSource_SHORTEST_LENGTH_LT: Int
  externalJsSource_SHORTEST_LENGTH_LTE: Int
  externalSourceType_AVERAGE_LENGTH_EQUAL: Float
  externalSourceType_AVERAGE_LENGTH_GT: Float
  externalSourceType_AVERAGE_LENGTH_GTE: Float
  externalSourceType_AVERAGE_LENGTH_LT: Float
  externalSourceType_AVERAGE_LENGTH_LTE: Float
  externalSourceType_LONGEST_LENGTH_EQUAL: Int
  externalSourceType_LONGEST_LENGTH_GT: Int
  externalSourceType_LONGEST_LENGTH_GTE: Int
  externalSourceType_LONGEST_LENGTH_LT: Int
  externalSourceType_LONGEST_LENGTH_LTE: Int
  externalSourceType_SHORTEST_LENGTH_EQUAL: Int
  externalSourceType_SHORTEST_LENGTH_GT: Int
  externalSourceType_SHORTEST_LENGTH_GTE: Int
  externalSourceType_SHORTEST_LENGTH_LT: Int
  externalSourceType_SHORTEST_LENGTH_LTE: Int
  icon_AVERAGE_LENGTH_EQUAL: Float
  icon_AVERAGE_LENGTH_GT: Float
  icon_AVERAGE_LENGTH_GTE: Float
  icon_AVERAGE_LENGTH_LT: Float
  icon_AVERAGE_LENGTH_LTE: Float
  icon_LONGEST_LENGTH_EQUAL: Int
  icon_LONGEST_LENGTH_GT: Int
  icon_LONGEST_LENGTH_GTE: Int
  icon_LONGEST_LENGTH_LT: Int
  icon_LONGEST_LENGTH_LTE: Int
  icon_SHORTEST_LENGTH_EQUAL: Int
  icon_SHORTEST_LENGTH_GT: Int
  icon_SHORTEST_LENGTH_GTE: Int
  icon_SHORTEST_LENGTH_LT: Int
  icon_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type AtomRequiredParentsRelationship {
  cursor: String!
  node: Atom!
}

input AtomRequiredParentsUpdateConnectionInput {
  node: AtomUpdateInput
}

input AtomRequiredParentsUpdateFieldInput {
  connect: [AtomRequiredParentsConnectFieldInput!]
  connectOrCreate: [AtomRequiredParentsConnectOrCreateFieldInput!]
  create: [AtomRequiredParentsCreateFieldInput!]
  delete: [AtomRequiredParentsDeleteFieldInput!]
  disconnect: [AtomRequiredParentsDisconnectFieldInput!]
  update: AtomRequiredParentsUpdateConnectionInput
  where: AtomRequiredParentsConnectionWhere
}

"""
Fields to sort Atoms by. The order in which sorts are applied is not guaranteed when specifying many fields in one AtomSort object.
"""
input AtomSort {
  externalCssSource: SortDirection
  externalJsSource: SortDirection
  externalSourceType: SortDirection
  icon: SortDirection
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

input AtomSuggestedChildrenAggregateInput {
  AND: [AtomSuggestedChildrenAggregateInput!]
  NOT: AtomSuggestedChildrenAggregateInput
  OR: [AtomSuggestedChildrenAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AtomSuggestedChildrenNodeAggregationWhereInput
}

input AtomSuggestedChildrenConnectFieldInput {
  connect: [AtomConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: AtomConnectWhere
}

input AtomSuggestedChildrenConnectOrCreateFieldInput {
  onCreate: AtomSuggestedChildrenConnectOrCreateFieldInputOnCreate!
  where: AtomConnectOrCreateWhere!
}

input AtomSuggestedChildrenConnectOrCreateFieldInputOnCreate {
  node: AtomOnCreateInput!
}

type AtomSuggestedChildrenConnection {
  edges: [AtomSuggestedChildrenRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AtomSuggestedChildrenConnectionSort {
  node: AtomSort
}

input AtomSuggestedChildrenConnectionWhere {
  AND: [AtomSuggestedChildrenConnectionWhere!]
  NOT: AtomSuggestedChildrenConnectionWhere
  OR: [AtomSuggestedChildrenConnectionWhere!]
  node: AtomWhere
}

input AtomSuggestedChildrenCreateFieldInput {
  node: AtomCreateInput!
}

input AtomSuggestedChildrenDeleteFieldInput {
  delete: AtomDeleteInput
  where: AtomSuggestedChildrenConnectionWhere
}

input AtomSuggestedChildrenDisconnectFieldInput {
  disconnect: AtomDisconnectInput
  where: AtomSuggestedChildrenConnectionWhere
}

input AtomSuggestedChildrenFieldInput {
  connect: [AtomSuggestedChildrenConnectFieldInput!]
  connectOrCreate: [AtomSuggestedChildrenConnectOrCreateFieldInput!]
  create: [AtomSuggestedChildrenCreateFieldInput!]
}

input AtomSuggestedChildrenNodeAggregationWhereInput {
  AND: [AtomSuggestedChildrenNodeAggregationWhereInput!]
  NOT: AtomSuggestedChildrenNodeAggregationWhereInput
  OR: [AtomSuggestedChildrenNodeAggregationWhereInput!]
  externalCssSource_AVERAGE_LENGTH_EQUAL: Float
  externalCssSource_AVERAGE_LENGTH_GT: Float
  externalCssSource_AVERAGE_LENGTH_GTE: Float
  externalCssSource_AVERAGE_LENGTH_LT: Float
  externalCssSource_AVERAGE_LENGTH_LTE: Float
  externalCssSource_LONGEST_LENGTH_EQUAL: Int
  externalCssSource_LONGEST_LENGTH_GT: Int
  externalCssSource_LONGEST_LENGTH_GTE: Int
  externalCssSource_LONGEST_LENGTH_LT: Int
  externalCssSource_LONGEST_LENGTH_LTE: Int
  externalCssSource_SHORTEST_LENGTH_EQUAL: Int
  externalCssSource_SHORTEST_LENGTH_GT: Int
  externalCssSource_SHORTEST_LENGTH_GTE: Int
  externalCssSource_SHORTEST_LENGTH_LT: Int
  externalCssSource_SHORTEST_LENGTH_LTE: Int
  externalJsSource_AVERAGE_LENGTH_EQUAL: Float
  externalJsSource_AVERAGE_LENGTH_GT: Float
  externalJsSource_AVERAGE_LENGTH_GTE: Float
  externalJsSource_AVERAGE_LENGTH_LT: Float
  externalJsSource_AVERAGE_LENGTH_LTE: Float
  externalJsSource_LONGEST_LENGTH_EQUAL: Int
  externalJsSource_LONGEST_LENGTH_GT: Int
  externalJsSource_LONGEST_LENGTH_GTE: Int
  externalJsSource_LONGEST_LENGTH_LT: Int
  externalJsSource_LONGEST_LENGTH_LTE: Int
  externalJsSource_SHORTEST_LENGTH_EQUAL: Int
  externalJsSource_SHORTEST_LENGTH_GT: Int
  externalJsSource_SHORTEST_LENGTH_GTE: Int
  externalJsSource_SHORTEST_LENGTH_LT: Int
  externalJsSource_SHORTEST_LENGTH_LTE: Int
  externalSourceType_AVERAGE_LENGTH_EQUAL: Float
  externalSourceType_AVERAGE_LENGTH_GT: Float
  externalSourceType_AVERAGE_LENGTH_GTE: Float
  externalSourceType_AVERAGE_LENGTH_LT: Float
  externalSourceType_AVERAGE_LENGTH_LTE: Float
  externalSourceType_LONGEST_LENGTH_EQUAL: Int
  externalSourceType_LONGEST_LENGTH_GT: Int
  externalSourceType_LONGEST_LENGTH_GTE: Int
  externalSourceType_LONGEST_LENGTH_LT: Int
  externalSourceType_LONGEST_LENGTH_LTE: Int
  externalSourceType_SHORTEST_LENGTH_EQUAL: Int
  externalSourceType_SHORTEST_LENGTH_GT: Int
  externalSourceType_SHORTEST_LENGTH_GTE: Int
  externalSourceType_SHORTEST_LENGTH_LT: Int
  externalSourceType_SHORTEST_LENGTH_LTE: Int
  icon_AVERAGE_LENGTH_EQUAL: Float
  icon_AVERAGE_LENGTH_GT: Float
  icon_AVERAGE_LENGTH_GTE: Float
  icon_AVERAGE_LENGTH_LT: Float
  icon_AVERAGE_LENGTH_LTE: Float
  icon_LONGEST_LENGTH_EQUAL: Int
  icon_LONGEST_LENGTH_GT: Int
  icon_LONGEST_LENGTH_GTE: Int
  icon_LONGEST_LENGTH_LT: Int
  icon_LONGEST_LENGTH_LTE: Int
  icon_SHORTEST_LENGTH_EQUAL: Int
  icon_SHORTEST_LENGTH_GT: Int
  icon_SHORTEST_LENGTH_GTE: Int
  icon_SHORTEST_LENGTH_LT: Int
  icon_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type AtomSuggestedChildrenRelationship {
  cursor: String!
  node: Atom!
}

input AtomSuggestedChildrenUpdateConnectionInput {
  node: AtomUpdateInput
}

input AtomSuggestedChildrenUpdateFieldInput {
  connect: [AtomSuggestedChildrenConnectFieldInput!]
  connectOrCreate: [AtomSuggestedChildrenConnectOrCreateFieldInput!]
  create: [AtomSuggestedChildrenCreateFieldInput!]
  delete: [AtomSuggestedChildrenDeleteFieldInput!]
  disconnect: [AtomSuggestedChildrenDisconnectFieldInput!]
  update: AtomSuggestedChildrenUpdateConnectionInput
  where: AtomSuggestedChildrenConnectionWhere
}

type AtomTagTagsAggregationSelection {
  count: Int!
  node: AtomTagTagsNodeAggregateSelection
}

type AtomTagTagsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AtomTagsAggregateInput {
  AND: [AtomTagsAggregateInput!]
  NOT: AtomTagsAggregateInput
  OR: [AtomTagsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AtomTagsNodeAggregationWhereInput
}

input AtomTagsConnectFieldInput {
  connect: [TagConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: TagConnectWhere
}

input AtomTagsConnectOrCreateFieldInput {
  onCreate: AtomTagsConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input AtomTagsConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type AtomTagsConnection {
  edges: [AtomTagsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AtomTagsConnectionSort {
  node: TagSort
}

input AtomTagsConnectionWhere {
  AND: [AtomTagsConnectionWhere!]
  NOT: AtomTagsConnectionWhere
  OR: [AtomTagsConnectionWhere!]
  node: TagWhere
}

input AtomTagsCreateFieldInput {
  node: TagCreateInput!
}

input AtomTagsDeleteFieldInput {
  delete: TagDeleteInput
  where: AtomTagsConnectionWhere
}

input AtomTagsDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: AtomTagsConnectionWhere
}

input AtomTagsFieldInput {
  connect: [AtomTagsConnectFieldInput!]
  connectOrCreate: [AtomTagsConnectOrCreateFieldInput!]
  create: [AtomTagsCreateFieldInput!]
}

input AtomTagsNodeAggregationWhereInput {
  AND: [AtomTagsNodeAggregationWhereInput!]
  NOT: AtomTagsNodeAggregationWhereInput
  OR: [AtomTagsNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type AtomTagsRelationship {
  cursor: String!
  node: Tag!
}

input AtomTagsUpdateConnectionInput {
  node: TagUpdateInput
}

input AtomTagsUpdateFieldInput {
  connect: [AtomTagsConnectFieldInput!]
  connectOrCreate: [AtomTagsConnectOrCreateFieldInput!]
  create: [AtomTagsCreateFieldInput!]
  delete: [AtomTagsDeleteFieldInput!]
  disconnect: [AtomTagsDisconnectFieldInput!]
  update: AtomTagsUpdateConnectionInput
  where: AtomTagsConnectionWhere
}

enum AtomType {
  AntDesignAffix
  AntDesignAlert
  AntDesignAnchor
  AntDesignAnchorLink
  AntDesignAutoComplete
  AntDesignAvatar
  AntDesignBackTop
  AntDesignBadge
  AntDesignBreadcrumb
  AntDesignBreadcrumbItem
  AntDesignBreadcrumbSeparator
  AntDesignButton
  AntDesignCalendar
  AntDesignCard
  AntDesignCardGrid
  AntDesignCardMeta
  AntDesignCarousel
  AntDesignCascader
  AntDesignCheckbox
  AntDesignCheckboxGroup
  AntDesignCollapse
  AntDesignCollapsePanel
  AntDesignComment
  AntDesignConfigProvider
  AntDesignDatePicker
  AntDesignDescriptions
  AntDesignDescriptionsItem
  AntDesignDivider
  AntDesignDrawer
  AntDesignDropdown
  AntDesignDropdownButton
  AntDesignEmpty
  AntDesignForm
  AntDesignFormErrorList
  AntDesignFormItem
  AntDesignFormList
  AntDesignFormProvider
  AntDesignGridCol
  AntDesignGridRow
  AntDesignIcon
  AntDesignImage
  AntDesignInput
  AntDesignInputNumber
  AntDesignLayout
  AntDesignLayoutContent
  AntDesignLayoutFooter
  AntDesignLayoutHeader
  AntDesignLayoutSider
  AntDesignList
  AntDesignListItem
  AntDesignListItemMeta
  AntDesignMentions
  AntDesignMentionsOption
  AntDesignMenu
  AntDesignMessage
  AntDesignModal
  AntDesignNotification
  AntDesignPagination
  AntDesignPopconfirm
  AntDesignPopover
  AntDesignProgress
  AntDesignRadio
  AntDesignRadioGroup
  AntDesignRate
  AntDesignResult
  AntDesignSegmented
  AntDesignSelect
  AntDesignSelectOption
  AntDesignSkeleton
  AntDesignSlider
  AntDesignSpace
  AntDesignSpin
  AntDesignStatistic
  AntDesignSteps
  AntDesignStepsStep
  AntDesignSwitch
  AntDesignTable
  AntDesignTabs
  AntDesignTabsTabPane
  AntDesignTag
  AntDesignTimePicker
  AntDesignTimeline
  AntDesignTimelineItem
  AntDesignTooltip
  AntDesignTransfer
  AntDesignTree
  AntDesignTreeSelect
  AntDesignTypographyParagraph
  AntDesignTypographyText
  AntDesignTypographyTitle
  AntDesignUpload
  ExternalComponent
  GridLayout
  HookGraphqlMutation
  HookGraphqlQuery
  HookQueryConfig
  HookQueryLambda
  HookQueryPage
  HookQueryPages
  HookRecoilState
  HookRouter
  HtmlA
  HtmlAbbr
  HtmlArea
  HtmlArticle
  HtmlAside
  HtmlAudio
  HtmlB
  HtmlBase
  HtmlBdo
  HtmlBlockquote
  HtmlBr
  HtmlButton
  HtmlCanvas
  HtmlCaption
  HtmlCite
  HtmlCode
  HtmlCol
  HtmlData
  HtmlDatalist
  HtmlDetails
  HtmlDfn
  HtmlDialog
  HtmlDiv
  HtmlDl
  HtmlEm
  HtmlEmbed
  HtmlFieldset
  HtmlFooter
  HtmlForm
  HtmlH1
  HtmlH2
  HtmlH3
  HtmlH4
  HtmlH5
  HtmlH6
  HtmlHead
  HtmlHeader
  HtmlHr
  HtmlI
  HtmlIframe
  HtmlImg
  HtmlInput
  HtmlKbd
  HtmlLabel
  HtmlLegend
  HtmlLi
  HtmlLink
  HtmlMain
  HtmlMap
  HtmlMark
  HtmlMath
  HtmlMeta
  HtmlMeter
  HtmlNav
  HtmlNoscript
  HtmlObject
  HtmlOl
  HtmlOptgroup
  HtmlOption
  HtmlOutput
  HtmlP
  HtmlParam
  HtmlPicture
  HtmlPre
  HtmlProgress
  HtmlQ
  HtmlRuby
  HtmlS
  HtmlSamp
  HtmlScript
  HtmlSection
  HtmlSelect
  HtmlSmall
  HtmlSource
  HtmlSpan
  HtmlStrong
  HtmlStyle
  HtmlSub
  HtmlSup
  HtmlSvg
  HtmlTable
  HtmlTd
  HtmlTemplate
  HtmlTextarea
  HtmlTh
  HtmlTime
  HtmlTitle
  HtmlTr
  HtmlTrack
  HtmlU
  HtmlUl
  HtmlVar
  HtmlVideo
  HtmlWbr
  MuiAccordion
  MuiAccordionActions
  MuiAccordionDetails
  MuiAccordionSummary
  MuiAlert
  MuiAlertTitle
  MuiAppBar
  MuiAutocomplete
  MuiAvatar
  MuiAvatarGroup
  MuiBackdrop
  MuiBadge
  MuiBadgeUnstyled
  MuiBottomNavigation
  MuiBottomNavigationAction
  MuiBox
  MuiBreadcrumbs
  MuiButton
  MuiButtonBase
  MuiButtonGroup
  MuiButtonUnstyled
  MuiCalendarPicker
  MuiCalendarPickerSkeleton
  MuiCard
  MuiCardActionArea
  MuiCardActions
  MuiCardContent
  MuiCardHeader
  MuiCardMedia
  MuiCheckbox
  MuiChip
  MuiCircularProgress
  MuiClickAwayListener
  MuiClockPicker
  MuiCollapse
  MuiContainer
  MuiCssBaseline
  MuiDataGrid
  MuiDatePicker
  MuiDateRangePicker
  MuiDateRangePickerDay
  MuiDateTimePicker
  MuiDesktopDatePicker
  MuiDesktopDateRangePicker
  MuiDesktopDateTimePicker
  MuiDesktopTimePicker
  MuiDialog
  MuiDialogActions
  MuiDialogContent
  MuiDialogContentText
  MuiDialogTitle
  MuiDivider
  MuiDrawer
  MuiFab
  MuiFade
  MuiFilledInput
  MuiFormControl
  MuiFormControlLabel
  MuiFormControlUnstyled
  MuiFormGroup
  MuiFormHelperText
  MuiFormLabel
  MuiGlobalStyles
  MuiGrid
  MuiGridColDef
  MuiGrow
  MuiHidden
  MuiIcon
  MuiIconButton
  MuiImageList
  MuiImageListItem
  MuiImageListItemBar
  MuiInput
  MuiInputAdornment
  MuiInputBase
  MuiInputLabel
  MuiLinearProgress
  MuiLink
  MuiList
  MuiListItem
  MuiListItemAvatar
  MuiListItemButton
  MuiListItemIcon
  MuiListItemSecondaryAction
  MuiListItemText
  MuiListSubheader
  MuiLoadingButton
  MuiMasonry
  MuiMasonryItem
  MuiMenu
  MuiMenuItem
  MuiMenuList
  MuiMobileDatePicker
  MuiMobileDateRangePicker
  MuiMobileDateTimePicker
  MuiMobileStepper
  MuiMobileTimePicker
  MuiModal
  MuiModalUnstyled
  MuiMonthPicker
  MuiNativeSelect
  MuiNoSsr
  MuiOutlinedInput
  MuiPagination
  MuiPaginationItem
  MuiPaper
  MuiPickersDay
  MuiPopover
  MuiPopper
  MuiPortal
  MuiRadio
  MuiRadioGroup
  MuiRating
  MuiScopedCssBaseline
  MuiSelect
  MuiSkeleton
  MuiSlide
  MuiSlider
  MuiSliderUnstyled
  MuiSnackbar
  MuiSnackbarContent
  MuiSpeedDial
  MuiSpeedDialAction
  MuiSpeedDialIcon
  MuiStack
  MuiStaticDatePicker
  MuiStaticDateRangePicker
  MuiStaticDateTimePicker
  MuiStaticTimePicker
  MuiStep
  MuiStepButton
  MuiStepConnector
  MuiStepContent
  MuiStepIcon
  MuiStepLabel
  MuiStepper
  MuiSvgIcon
  MuiSwipeableDrawer
  MuiSwitch
  MuiSwitchUnstyled
  MuiTab
  MuiTabContext
  MuiTabList
  MuiTabPanel
  MuiTabScrollButton
  MuiTable
  MuiTableBody
  MuiTableCell
  MuiTableContainer
  MuiTableFooter
  MuiTableHead
  MuiTablePagination
  MuiTableRow
  MuiTableSortLabel
  MuiTabs
  MuiTextField
  MuiTextareaAutosize
  MuiTimePicker
  MuiTimeline
  MuiTimelineConnector
  MuiTimelineContent
  MuiTimelineDot
  MuiTimelineItem
  MuiTimelineOppositeContent
  MuiTimelineSeparator
  MuiToggleButton
  MuiToggleButtonGroup
  MuiToolbar
  MuiTooltip
  MuiTreeItem
  MuiTreeView
  MuiTypography
  MuiUnstableTrapFocus
  MuiYearPicker
  MuiZoom
  Query
  ReactFragment
  Script
  State
  Text
  TextList
}

input AtomUniqueWhere {
  externalSourceType: String
  id: ID
  name: String
}

input AtomUpdateInput {
  api: AtomApiUpdateFieldInput
  externalCssSource: String
  externalJsSource: String
  externalSourceType: String
  icon: String
  id: ID
  name: String
  owner: WithOwnerOwnerUpdateFieldInput
  requiredParents: [AtomRequiredParentsUpdateFieldInput!]
  suggestedChildren: [AtomSuggestedChildrenUpdateFieldInput!]
  tags: [AtomTagsUpdateFieldInput!]
  type: AtomType
}

type AtomUserOwnerAggregationSelection {
  count: Int!
  node: AtomUserOwnerNodeAggregateSelection
}

type AtomUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input AtomWhere {
  AND: [AtomWhere!]
  NOT: AtomWhere
  OR: [AtomWhere!]
  api: InterfaceTypeWhere
  apiAggregate: AtomApiAggregateInput
  apiConnection: AtomApiConnectionWhere
  apiConnection_NOT: AtomApiConnectionWhere
  api_NOT: InterfaceTypeWhere
  externalCssSource: String
  externalCssSource_CONTAINS: String
  externalCssSource_ENDS_WITH: String
  externalCssSource_IN: [String]
  externalCssSource_MATCHES: String
  externalCssSource_STARTS_WITH: String
  externalJsSource: String
  externalJsSource_CONTAINS: String
  externalJsSource_ENDS_WITH: String
  externalJsSource_IN: [String]
  externalJsSource_MATCHES: String
  externalJsSource_STARTS_WITH: String
  externalSourceType: String
  externalSourceType_CONTAINS: String
  externalSourceType_ENDS_WITH: String
  externalSourceType_IN: [String]
  externalSourceType_MATCHES: String
  externalSourceType_STARTS_WITH: String
  icon: String
  icon_CONTAINS: String
  icon_ENDS_WITH: String
  icon_IN: [String]
  icon_MATCHES: String
  icon_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: AtomOwnerAggregateInput
  ownerConnection: WithOwnerOwnerConnectionWhere
  ownerConnection_NOT: WithOwnerOwnerConnectionWhere
  owner_NOT: UserWhere
  requiredParentsAggregate: AtomRequiredParentsAggregateInput

  """
  Return Atoms where all of the related AtomRequiredParentsConnections match this filter
  """
  requiredParentsConnection_ALL: AtomRequiredParentsConnectionWhere

  """
  Return Atoms where none of the related AtomRequiredParentsConnections match this filter
  """
  requiredParentsConnection_NONE: AtomRequiredParentsConnectionWhere

  """
  Return Atoms where one of the related AtomRequiredParentsConnections match this filter
  """
  requiredParentsConnection_SINGLE: AtomRequiredParentsConnectionWhere

  """
  Return Atoms where some of the related AtomRequiredParentsConnections match this filter
  """
  requiredParentsConnection_SOME: AtomRequiredParentsConnectionWhere

  """
  Return Atoms where all of the related Atoms match this filter
  """
  requiredParents_ALL: AtomWhere

  """
  Return Atoms where none of the related Atoms match this filter
  """
  requiredParents_NONE: AtomWhere

  """
  Return Atoms where one of the related Atoms match this filter
  """
  requiredParents_SINGLE: AtomWhere

  """
  Return Atoms where some of the related Atoms match this filter
  """
  requiredParents_SOME: AtomWhere
  suggestedChildrenAggregate: AtomSuggestedChildrenAggregateInput

  """
  Return Atoms where all of the related AtomSuggestedChildrenConnections match this filter
  """
  suggestedChildrenConnection_ALL: AtomSuggestedChildrenConnectionWhere

  """
  Return Atoms where none of the related AtomSuggestedChildrenConnections match this filter
  """
  suggestedChildrenConnection_NONE: AtomSuggestedChildrenConnectionWhere

  """
  Return Atoms where one of the related AtomSuggestedChildrenConnections match this filter
  """
  suggestedChildrenConnection_SINGLE: AtomSuggestedChildrenConnectionWhere

  """
  Return Atoms where some of the related AtomSuggestedChildrenConnections match this filter
  """
  suggestedChildrenConnection_SOME: AtomSuggestedChildrenConnectionWhere

  """
  Return Atoms where all of the related Atoms match this filter
  """
  suggestedChildren_ALL: AtomWhere

  """
  Return Atoms where none of the related Atoms match this filter
  """
  suggestedChildren_NONE: AtomWhere

  """
  Return Atoms where one of the related Atoms match this filter
  """
  suggestedChildren_SINGLE: AtomWhere

  """
  Return Atoms where some of the related Atoms match this filter
  """
  suggestedChildren_SOME: AtomWhere
  tagsAggregate: AtomTagsAggregateInput

  """
  Return Atoms where all of the related AtomTagsConnections match this filter
  """
  tagsConnection_ALL: AtomTagsConnectionWhere

  """
  Return Atoms where none of the related AtomTagsConnections match this filter
  """
  tagsConnection_NONE: AtomTagsConnectionWhere

  """
  Return Atoms where one of the related AtomTagsConnections match this filter
  """
  tagsConnection_SINGLE: AtomTagsConnectionWhere

  """
  Return Atoms where some of the related AtomTagsConnections match this filter
  """
  tagsConnection_SOME: AtomTagsConnectionWhere

  """
  Return Atoms where all of the related Tags match this filter
  """
  tags_ALL: TagWhere

  """
  Return Atoms where none of the related Tags match this filter
  """
  tags_NONE: TagWhere

  """
  Return Atoms where one of the related Tags match this filter
  """
  tags_SINGLE: TagWhere

  """
  Return Atoms where some of the related Tags match this filter
  """
  tags_SOME: TagWhere
  type: AtomType
  type_IN: [AtomType!]
}

type AtomsConnection {
  edges: [AtomEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface BaseAction {
  element(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  elementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [BaseActionElementConnectionSort!]
    where: BaseActionElementConnectionWhere
  ): BaseActionElementConnection!
  id: ID!
  name: String!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [BaseActionStoreConnectionSort!]
    where: BaseActionStoreConnectionWhere
  ): BaseActionStoreConnection!
  type: ActionKind!
}

input BaseActionConnectInput {
  _on: BaseActionImplementationsConnectInput
  element: BaseActionElementConnectFieldInput
  store: BaseActionStoreConnectFieldInput
}

input BaseActionConnectWhere {
  node: BaseActionWhere!
}

input BaseActionCreateInput {
  ApiAction: ApiActionCreateInput
  CodeAction: CodeActionCreateInput
}

input BaseActionDeleteInput {
  _on: BaseActionImplementationsDeleteInput
  element: BaseActionElementDeleteFieldInput
  store: BaseActionStoreDeleteFieldInput
}

input BaseActionDisconnectInput {
  _on: BaseActionImplementationsDisconnectInput
  element: BaseActionElementDisconnectFieldInput
  store: BaseActionStoreDisconnectFieldInput
}

input BaseActionElementAggregateInput {
  AND: [BaseActionElementAggregateInput!]
  NOT: BaseActionElementAggregateInput
  OR: [BaseActionElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: BaseActionElementNodeAggregationWhereInput
}

input BaseActionElementConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input BaseActionElementConnectOrCreateFieldInput {
  onCreate: BaseActionElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input BaseActionElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type BaseActionElementConnection {
  edges: [BaseActionElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input BaseActionElementConnectionSort {
  node: ElementSort
}

input BaseActionElementConnectionWhere {
  AND: [BaseActionElementConnectionWhere!]
  NOT: BaseActionElementConnectionWhere
  OR: [BaseActionElementConnectionWhere!]
  node: ElementWhere
}

input BaseActionElementCreateFieldInput {
  node: ElementCreateInput!
}

input BaseActionElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: BaseActionElementConnectionWhere
}

input BaseActionElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: BaseActionElementConnectionWhere
}

input BaseActionElementFieldInput {
  connect: BaseActionElementConnectFieldInput
  connectOrCreate: BaseActionElementConnectOrCreateFieldInput
  create: BaseActionElementCreateFieldInput
}

input BaseActionElementNodeAggregationWhereInput {
  AND: [BaseActionElementNodeAggregationWhereInput!]
  NOT: BaseActionElementNodeAggregationWhereInput
  OR: [BaseActionElementNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type BaseActionElementRelationship {
  cursor: String!
  node: Element!
}

input BaseActionElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input BaseActionElementUpdateFieldInput {
  connect: BaseActionElementConnectFieldInput
  connectOrCreate: BaseActionElementConnectOrCreateFieldInput
  create: BaseActionElementCreateFieldInput
  delete: BaseActionElementDeleteFieldInput
  disconnect: BaseActionElementDisconnectFieldInput
  update: BaseActionElementUpdateConnectionInput
  where: BaseActionElementConnectionWhere
}

input BaseActionImplementationsConnectInput {
  ApiAction: [ApiActionConnectInput!]
  CodeAction: [CodeActionConnectInput!]
}

input BaseActionImplementationsDeleteInput {
  ApiAction: [ApiActionDeleteInput!]
  CodeAction: [CodeActionDeleteInput!]
}

input BaseActionImplementationsDisconnectInput {
  ApiAction: [ApiActionDisconnectInput!]
  CodeAction: [CodeActionDisconnectInput!]
}

input BaseActionImplementationsUpdateInput {
  ApiAction: ApiActionUpdateInput
  CodeAction: CodeActionUpdateInput
}

input BaseActionImplementationsWhere {
  ApiAction: ApiActionWhere
  CodeAction: CodeActionWhere
}

input BaseActionOptions {
  limit: Int
  offset: Int

  """
  Specify one or more BaseActionSort objects to sort BaseActions by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [BaseActionSort]
}

"""
Fields to sort BaseActions by. The order in which sorts are applied is not guaranteed when specifying many fields in one BaseActionSort object.
"""
input BaseActionSort {
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

input BaseActionStoreAggregateInput {
  AND: [BaseActionStoreAggregateInput!]
  NOT: BaseActionStoreAggregateInput
  OR: [BaseActionStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: BaseActionStoreNodeAggregationWhereInput
}

input BaseActionStoreConnectFieldInput {
  connect: StoreConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: StoreConnectWhere
}

input BaseActionStoreConnectOrCreateFieldInput {
  onCreate: BaseActionStoreConnectOrCreateFieldInputOnCreate!
  where: StoreConnectOrCreateWhere!
}

input BaseActionStoreConnectOrCreateFieldInputOnCreate {
  node: StoreOnCreateInput!
}

type BaseActionStoreConnection {
  edges: [BaseActionStoreRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input BaseActionStoreConnectionSort {
  node: StoreSort
}

input BaseActionStoreConnectionWhere {
  AND: [BaseActionStoreConnectionWhere!]
  NOT: BaseActionStoreConnectionWhere
  OR: [BaseActionStoreConnectionWhere!]
  node: StoreWhere
}

input BaseActionStoreCreateFieldInput {
  node: StoreCreateInput!
}

input BaseActionStoreDeleteFieldInput {
  delete: StoreDeleteInput
  where: BaseActionStoreConnectionWhere
}

input BaseActionStoreDisconnectFieldInput {
  disconnect: StoreDisconnectInput
  where: BaseActionStoreConnectionWhere
}

input BaseActionStoreFieldInput {
  connect: BaseActionStoreConnectFieldInput
  connectOrCreate: BaseActionStoreConnectOrCreateFieldInput
  create: BaseActionStoreCreateFieldInput
}

input BaseActionStoreNodeAggregationWhereInput {
  AND: [BaseActionStoreNodeAggregationWhereInput!]
  NOT: BaseActionStoreNodeAggregationWhereInput
  OR: [BaseActionStoreNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type BaseActionStoreRelationship {
  cursor: String!
  node: Store!
}

input BaseActionStoreUpdateConnectionInput {
  node: StoreUpdateInput
}

input BaseActionStoreUpdateFieldInput {
  connect: BaseActionStoreConnectFieldInput
  connectOrCreate: BaseActionStoreConnectOrCreateFieldInput
  create: BaseActionStoreCreateFieldInput
  delete: BaseActionStoreDeleteFieldInput
  disconnect: BaseActionStoreDisconnectFieldInput
  update: BaseActionStoreUpdateConnectionInput
  where: BaseActionStoreConnectionWhere
}

input BaseActionUpdateInput {
  _on: BaseActionImplementationsUpdateInput
  element: BaseActionElementUpdateFieldInput
  id: ID
  name: String
  store: BaseActionStoreUpdateFieldInput
}

input BaseActionWhere {
  _on: BaseActionImplementationsWhere
  element: ElementWhere
  elementAggregate: BaseActionElementAggregateInput
  elementConnection: BaseActionElementConnectionWhere
  elementConnection_NOT: BaseActionElementConnectionWhere
  element_NOT: ElementWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  store: StoreWhere
  storeAggregate: BaseActionStoreAggregateInput
  storeConnection: BaseActionStoreConnectionWhere
  storeConnection_NOT: BaseActionStoreConnectionWhere
  store_NOT: StoreWhere
  type: ActionKind
  type_IN: [ActionKind!]
}

type BaseType implements IBaseType {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): BaseTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

input BaseTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
}

input BaseTypeConnectOrCreateWhere {
  node: BaseTypeUniqueWhere!
}

input BaseTypeConnectWhere {
  node: BaseTypeWhere!
}

input BaseTypeCreateInput {
  id: ID!
  kind: TypeKind!
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input BaseTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
}

input BaseTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
}

input BaseTypeOnCreateInput {
  id: ID!
  kind: TypeKind!
  name: String!
}

input BaseTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more BaseTypeSort objects to sort BaseTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [BaseTypeSort!]
}

input BaseTypeOwnerAggregateInput {
  AND: [BaseTypeOwnerAggregateInput!]
  NOT: BaseTypeOwnerAggregateInput
  OR: [BaseTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: BaseTypeOwnerNodeAggregationWhereInput
}

input BaseTypeOwnerNodeAggregationWhereInput {
  AND: [BaseTypeOwnerNodeAggregationWhereInput!]
  NOT: BaseTypeOwnerNodeAggregationWhereInput
  OR: [BaseTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

"""
Fields to sort BaseTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one BaseTypeSort object.
"""
input BaseTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input BaseTypeUniqueWhere {
  id: ID
  name: String
}

input BaseTypeUpdateInput {
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type BaseTypeUserOwnerAggregationSelection {
  count: Int!
  node: BaseTypeUserOwnerNodeAggregateSelection
}

type BaseTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input BaseTypeWhere {
  AND: [BaseTypeWhere!]
  NOT: BaseTypeWhere
  OR: [BaseTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: BaseTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

input BaseTypesWhere {
  name: String
}

type CodeAction implements BaseAction {
  """
  Code to run when action is triggered
  """
  code: String!
  element(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  elementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): CodeActionElementElementAggregationSelection
  elementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [BaseActionElementConnectionSort!]
    where: BaseActionElementConnectionWhere
  ): BaseActionElementConnection!
  id: ID!
  name: String!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): CodeActionStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [BaseActionStoreConnectionSort!]
    where: BaseActionStoreConnectionWhere
  ): BaseActionStoreConnection!
  type: ActionKind!
}

type CodeActionAggregateSelection {
  code: StringAggregateSelectionNonNullable!
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input CodeActionConnectInput {
  element: BaseActionElementConnectFieldInput
  store: BaseActionStoreConnectFieldInput
}

input CodeActionConnectOrCreateInput {
  element: BaseActionElementConnectOrCreateFieldInput
  store: BaseActionStoreConnectOrCreateFieldInput
}

input CodeActionConnectOrCreateWhere {
  node: CodeActionUniqueWhere!
}

input CodeActionConnectWhere {
  node: CodeActionWhere!
}

input CodeActionCreateInput {
  code: String!
  element: BaseActionElementFieldInput
  id: ID!
  name: String!
  store: BaseActionStoreFieldInput
  type: ActionKind! = CodeAction
}

input CodeActionDeleteInput {
  element: BaseActionElementDeleteFieldInput
  store: BaseActionStoreDeleteFieldInput
}

input CodeActionDisconnectInput {
  element: BaseActionElementDisconnectFieldInput
  store: BaseActionStoreDisconnectFieldInput
}

type CodeActionEdge {
  cursor: String!
  node: CodeAction!
}

input CodeActionElementAggregateInput {
  AND: [CodeActionElementAggregateInput!]
  NOT: CodeActionElementAggregateInput
  OR: [CodeActionElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CodeActionElementNodeAggregationWhereInput
}

type CodeActionElementElementAggregationSelection {
  count: Int!
  node: CodeActionElementElementNodeAggregateSelection
}

type CodeActionElementElementNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

input CodeActionElementNodeAggregationWhereInput {
  AND: [CodeActionElementNodeAggregationWhereInput!]
  NOT: CodeActionElementNodeAggregationWhereInput
  OR: [CodeActionElementNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

input CodeActionOnCreateInput {
  code: String!
  id: ID!
  name: String!
  type: ActionKind! = CodeAction
}

input CodeActionOptions {
  limit: Int
  offset: Int

  """
  Specify one or more CodeActionSort objects to sort CodeActions by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [CodeActionSort!]
}

input CodeActionRelationInput {
  element: BaseActionElementCreateFieldInput
  store: BaseActionStoreCreateFieldInput
}

"""
Fields to sort CodeActions by. The order in which sorts are applied is not guaranteed when specifying many fields in one CodeActionSort object.
"""
input CodeActionSort {
  code: SortDirection
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

input CodeActionStoreAggregateInput {
  AND: [CodeActionStoreAggregateInput!]
  NOT: CodeActionStoreAggregateInput
  OR: [CodeActionStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CodeActionStoreNodeAggregationWhereInput
}

input CodeActionStoreNodeAggregationWhereInput {
  AND: [CodeActionStoreNodeAggregationWhereInput!]
  NOT: CodeActionStoreNodeAggregationWhereInput
  OR: [CodeActionStoreNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type CodeActionStoreStoreAggregationSelection {
  count: Int!
  node: CodeActionStoreStoreNodeAggregateSelection
}

type CodeActionStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input CodeActionUniqueWhere {
  id: ID
}

input CodeActionUpdateInput {
  code: String
  element: BaseActionElementUpdateFieldInput
  id: ID
  name: String
  store: BaseActionStoreUpdateFieldInput
}

input CodeActionWhere {
  AND: [CodeActionWhere!]
  NOT: CodeActionWhere
  OR: [CodeActionWhere!]
  code: String
  code_CONTAINS: String
  code_ENDS_WITH: String
  code_IN: [String!]
  code_MATCHES: String
  code_STARTS_WITH: String
  element: ElementWhere
  elementAggregate: CodeActionElementAggregateInput
  elementConnection: BaseActionElementConnectionWhere
  elementConnection_NOT: BaseActionElementConnectionWhere
  element_NOT: ElementWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  store: StoreWhere
  storeAggregate: CodeActionStoreAggregateInput
  storeConnection: BaseActionStoreConnectionWhere
  storeConnection_NOT: BaseActionStoreConnectionWhere
  store_NOT: StoreWhere
  type: ActionKind
  type_IN: [ActionKind!]
}

type CodeActionsConnection {
  edges: [CodeActionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum CodeMirrorLanguage {
  Css
  CssInJs
  Graphql
  Javascript
  Json
  Typescript
}

"""
Allows editing the value using a code mirror editor
"""
type CodeMirrorType implements IBaseType {
  id: ID!
  kind: TypeKind!
  language: CodeMirrorLanguage!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): CodeMirrorTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type CodeMirrorTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input CodeMirrorTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
}

input CodeMirrorTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input CodeMirrorTypeConnectOrCreateWhere {
  node: CodeMirrorTypeUniqueWhere!
}

input CodeMirrorTypeConnectWhere {
  node: CodeMirrorTypeWhere!
}

input CodeMirrorTypeCreateInput {
  id: ID!
  kind: TypeKind! = CodeMirrorType
  language: CodeMirrorLanguage!
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input CodeMirrorTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
}

input CodeMirrorTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type CodeMirrorTypeEdge {
  cursor: String!
  node: CodeMirrorType!
}

input CodeMirrorTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = CodeMirrorType
  language: CodeMirrorLanguage!
  name: String!
}

input CodeMirrorTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more CodeMirrorTypeSort objects to sort CodeMirrorTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [CodeMirrorTypeSort!]
}

input CodeMirrorTypeOwnerAggregateInput {
  AND: [CodeMirrorTypeOwnerAggregateInput!]
  NOT: CodeMirrorTypeOwnerAggregateInput
  OR: [CodeMirrorTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CodeMirrorTypeOwnerNodeAggregationWhereInput
}

input CodeMirrorTypeOwnerNodeAggregationWhereInput {
  AND: [CodeMirrorTypeOwnerNodeAggregationWhereInput!]
  NOT: CodeMirrorTypeOwnerNodeAggregationWhereInput
  OR: [CodeMirrorTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input CodeMirrorTypeRelationInput {
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort CodeMirrorTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one CodeMirrorTypeSort object.
"""
input CodeMirrorTypeSort {
  id: SortDirection
  kind: SortDirection
  language: SortDirection
  name: SortDirection
}

input CodeMirrorTypeUniqueWhere {
  id: ID
}

input CodeMirrorTypeUpdateInput {
  id: ID
  language: CodeMirrorLanguage
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type CodeMirrorTypeUserOwnerAggregationSelection {
  count: Int!
  node: CodeMirrorTypeUserOwnerNodeAggregateSelection
}

type CodeMirrorTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input CodeMirrorTypeWhere {
  AND: [CodeMirrorTypeWhere!]
  NOT: CodeMirrorTypeWhere
  OR: [CodeMirrorTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  language: CodeMirrorLanguage
  language_IN: [CodeMirrorLanguage!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: CodeMirrorTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type CodeMirrorTypesConnection {
  edges: [CodeMirrorTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Component implements WithOwner {
  api(
    directed: Boolean = true
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): InterfaceType!
  apiAggregate(
    directed: Boolean = true
    where: InterfaceTypeWhere
  ): ComponentInterfaceTypeApiAggregationSelection
  apiConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ComponentApiConnectionSort!]
    where: ComponentApiConnectionWhere
  ): ComponentApiConnection!
  childrenContainerElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  childrenContainerElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ComponentElementChildrenContainerElementAggregationSelection
  childrenContainerElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ComponentChildrenContainerElementConnectionSort!]
    where: ComponentChildrenContainerElementConnectionWhere
  ): ComponentChildrenContainerElementConnection!
  id: ID!
  keyGenerator: String
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ComponentUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [WithOwnerOwnerConnectionSort!]
    where: WithOwnerOwnerConnectionWhere
  ): WithOwnerOwnerConnection!
  props(directed: Boolean = true, options: PropOptions, where: PropWhere): Prop!
  propsAggregate(
    directed: Boolean = true
    where: PropWhere
  ): ComponentPropPropsAggregationSelection
  propsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ComponentPropsConnectionSort!]
    where: ComponentPropsConnectionWhere
  ): ComponentPropsConnection!
  rootElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  rootElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ComponentElementRootElementAggregationSelection
  rootElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ComponentRootElementConnectionSort!]
    where: ComponentRootElementConnectionWhere
  ): ComponentRootElementConnection!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): ComponentStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ComponentStoreConnectionSort!]
    where: ComponentStoreConnectionWhere
  ): ComponentStoreConnection!
}

type ComponentAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  keyGenerator: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
}

input ComponentApiAggregateInput {
  AND: [ComponentApiAggregateInput!]
  NOT: ComponentApiAggregateInput
  OR: [ComponentApiAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentApiNodeAggregationWhereInput
}

input ComponentApiConnectFieldInput {
  connect: InterfaceTypeConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: InterfaceTypeConnectWhere
}

input ComponentApiConnectOrCreateFieldInput {
  onCreate: ComponentApiConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input ComponentApiConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

type ComponentApiConnection {
  edges: [ComponentApiRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ComponentApiConnectionSort {
  node: InterfaceTypeSort
}

input ComponentApiConnectionWhere {
  AND: [ComponentApiConnectionWhere!]
  NOT: ComponentApiConnectionWhere
  OR: [ComponentApiConnectionWhere!]
  node: InterfaceTypeWhere
}

input ComponentApiCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input ComponentApiDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: ComponentApiConnectionWhere
}

input ComponentApiDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: ComponentApiConnectionWhere
}

input ComponentApiFieldInput {
  connect: ComponentApiConnectFieldInput
  connectOrCreate: ComponentApiConnectOrCreateFieldInput
  create: ComponentApiCreateFieldInput
}

input ComponentApiNodeAggregationWhereInput {
  AND: [ComponentApiNodeAggregationWhereInput!]
  NOT: ComponentApiNodeAggregationWhereInput
  OR: [ComponentApiNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type ComponentApiRelationship {
  cursor: String!
  node: InterfaceType!
}

input ComponentApiUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input ComponentApiUpdateFieldInput {
  connect: ComponentApiConnectFieldInput
  connectOrCreate: ComponentApiConnectOrCreateFieldInput
  create: ComponentApiCreateFieldInput
  delete: ComponentApiDeleteFieldInput
  disconnect: ComponentApiDisconnectFieldInput
  update: ComponentApiUpdateConnectionInput
  where: ComponentApiConnectionWhere
}

input ComponentChildrenContainerElementAggregateInput {
  AND: [ComponentChildrenContainerElementAggregateInput!]
  NOT: ComponentChildrenContainerElementAggregateInput
  OR: [ComponentChildrenContainerElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentChildrenContainerElementNodeAggregationWhereInput
}

input ComponentChildrenContainerElementConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input ComponentChildrenContainerElementConnectOrCreateFieldInput {
  onCreate: ComponentChildrenContainerElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ComponentChildrenContainerElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ComponentChildrenContainerElementConnection {
  edges: [ComponentChildrenContainerElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ComponentChildrenContainerElementConnectionSort {
  node: ElementSort
}

input ComponentChildrenContainerElementConnectionWhere {
  AND: [ComponentChildrenContainerElementConnectionWhere!]
  NOT: ComponentChildrenContainerElementConnectionWhere
  OR: [ComponentChildrenContainerElementConnectionWhere!]
  node: ElementWhere
}

input ComponentChildrenContainerElementCreateFieldInput {
  node: ElementCreateInput!
}

input ComponentChildrenContainerElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: ComponentChildrenContainerElementConnectionWhere
}

input ComponentChildrenContainerElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ComponentChildrenContainerElementConnectionWhere
}

input ComponentChildrenContainerElementFieldInput {
  connect: ComponentChildrenContainerElementConnectFieldInput
  connectOrCreate: ComponentChildrenContainerElementConnectOrCreateFieldInput
  create: ComponentChildrenContainerElementCreateFieldInput
}

input ComponentChildrenContainerElementNodeAggregationWhereInput {
  AND: [ComponentChildrenContainerElementNodeAggregationWhereInput!]
  NOT: ComponentChildrenContainerElementNodeAggregationWhereInput
  OR: [ComponentChildrenContainerElementNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type ComponentChildrenContainerElementRelationship {
  cursor: String!
  node: Element!
}

input ComponentChildrenContainerElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input ComponentChildrenContainerElementUpdateFieldInput {
  connect: ComponentChildrenContainerElementConnectFieldInput
  connectOrCreate: ComponentChildrenContainerElementConnectOrCreateFieldInput
  create: ComponentChildrenContainerElementCreateFieldInput
  delete: ComponentChildrenContainerElementDeleteFieldInput
  disconnect: ComponentChildrenContainerElementDisconnectFieldInput
  update: ComponentChildrenContainerElementUpdateConnectionInput
  where: ComponentChildrenContainerElementConnectionWhere
}

input ComponentConnectInput {
  api: ComponentApiConnectFieldInput
  childrenContainerElement: ComponentChildrenContainerElementConnectFieldInput
  owner: WithOwnerOwnerConnectFieldInput
  props: ComponentPropsConnectFieldInput
  rootElement: ComponentRootElementConnectFieldInput
  store: ComponentStoreConnectFieldInput
}

input ComponentConnectOrCreateInput {
  api: ComponentApiConnectOrCreateFieldInput
  childrenContainerElement: ComponentChildrenContainerElementConnectOrCreateFieldInput
  owner: WithOwnerOwnerConnectOrCreateFieldInput
  props: ComponentPropsConnectOrCreateFieldInput
  rootElement: ComponentRootElementConnectOrCreateFieldInput
  store: ComponentStoreConnectOrCreateFieldInput
}

input ComponentConnectOrCreateWhere {
  node: ComponentUniqueWhere!
}

input ComponentConnectWhere {
  node: ComponentWhere!
}

input ComponentCreateInput {
  api: ComponentApiFieldInput
  childrenContainerElement: ComponentChildrenContainerElementFieldInput
  id: ID!
  keyGenerator: String
  name: String!
  owner: WithOwnerOwnerFieldInput
  props: ComponentPropsFieldInput
  rootElement: ComponentRootElementFieldInput
  store: ComponentStoreFieldInput
}

input ComponentDeleteInput {
  api: ComponentApiDeleteFieldInput
  childrenContainerElement: ComponentChildrenContainerElementDeleteFieldInput
  owner: WithOwnerOwnerDeleteFieldInput
  props: ComponentPropsDeleteFieldInput
  rootElement: ComponentRootElementDeleteFieldInput
  store: ComponentStoreDeleteFieldInput
}

input ComponentDisconnectInput {
  api: ComponentApiDisconnectFieldInput
  childrenContainerElement: ComponentChildrenContainerElementDisconnectFieldInput
  owner: WithOwnerOwnerDisconnectFieldInput
  props: ComponentPropsDisconnectFieldInput
  rootElement: ComponentRootElementDisconnectFieldInput
  store: ComponentStoreDisconnectFieldInput
}

type ComponentEdge {
  cursor: String!
  node: Component!
}

type ComponentElementChildrenContainerElementAggregationSelection {
  count: Int!
  node: ComponentElementChildrenContainerElementNodeAggregateSelection
}

type ComponentElementChildrenContainerElementNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

type ComponentElementRootElementAggregationSelection {
  count: Int!
  node: ComponentElementRootElementNodeAggregateSelection
}

type ComponentElementRootElementNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

type ComponentInterfaceTypeApiAggregationSelection {
  count: Int!
  node: ComponentInterfaceTypeApiNodeAggregateSelection
}

type ComponentInterfaceTypeApiNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ComponentOnCreateInput {
  id: ID!
  keyGenerator: String
  name: String!
}

input ComponentOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ComponentSort objects to sort Components by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ComponentSort!]
}

input ComponentOwnerAggregateInput {
  AND: [ComponentOwnerAggregateInput!]
  NOT: ComponentOwnerAggregateInput
  OR: [ComponentOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentOwnerNodeAggregationWhereInput
}

input ComponentOwnerNodeAggregationWhereInput {
  AND: [ComponentOwnerNodeAggregationWhereInput!]
  NOT: ComponentOwnerNodeAggregationWhereInput
  OR: [ComponentOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

type ComponentPropPropsAggregationSelection {
  count: Int!
  node: ComponentPropPropsNodeAggregateSelection
}

type ComponentPropPropsNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ComponentPropsAggregateInput {
  AND: [ComponentPropsAggregateInput!]
  NOT: ComponentPropsAggregateInput
  OR: [ComponentPropsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentPropsNodeAggregationWhereInput
}

input ComponentPropsConnectFieldInput {
  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: PropConnectWhere
}

input ComponentPropsConnectOrCreateFieldInput {
  onCreate: ComponentPropsConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input ComponentPropsConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type ComponentPropsConnection {
  edges: [ComponentPropsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ComponentPropsConnectionSort {
  node: PropSort
}

input ComponentPropsConnectionWhere {
  AND: [ComponentPropsConnectionWhere!]
  NOT: ComponentPropsConnectionWhere
  OR: [ComponentPropsConnectionWhere!]
  node: PropWhere
}

input ComponentPropsCreateFieldInput {
  node: PropCreateInput!
}

input ComponentPropsDeleteFieldInput {
  where: ComponentPropsConnectionWhere
}

input ComponentPropsDisconnectFieldInput {
  where: ComponentPropsConnectionWhere
}

input ComponentPropsFieldInput {
  connect: ComponentPropsConnectFieldInput
  connectOrCreate: ComponentPropsConnectOrCreateFieldInput
  create: ComponentPropsCreateFieldInput
}

input ComponentPropsNodeAggregationWhereInput {
  AND: [ComponentPropsNodeAggregationWhereInput!]
  NOT: ComponentPropsNodeAggregationWhereInput
  OR: [ComponentPropsNodeAggregationWhereInput!]
  data_AVERAGE_LENGTH_EQUAL: Float
  data_AVERAGE_LENGTH_GT: Float
  data_AVERAGE_LENGTH_GTE: Float
  data_AVERAGE_LENGTH_LT: Float
  data_AVERAGE_LENGTH_LTE: Float
  data_LONGEST_LENGTH_EQUAL: Int
  data_LONGEST_LENGTH_GT: Int
  data_LONGEST_LENGTH_GTE: Int
  data_LONGEST_LENGTH_LT: Int
  data_LONGEST_LENGTH_LTE: Int
  data_SHORTEST_LENGTH_EQUAL: Int
  data_SHORTEST_LENGTH_GT: Int
  data_SHORTEST_LENGTH_GTE: Int
  data_SHORTEST_LENGTH_LT: Int
  data_SHORTEST_LENGTH_LTE: Int
}

type ComponentPropsRelationship {
  cursor: String!
  node: Prop!
}

input ComponentPropsUpdateConnectionInput {
  node: PropUpdateInput
}

input ComponentPropsUpdateFieldInput {
  connect: ComponentPropsConnectFieldInput
  connectOrCreate: ComponentPropsConnectOrCreateFieldInput
  create: ComponentPropsCreateFieldInput
  delete: ComponentPropsDeleteFieldInput
  disconnect: ComponentPropsDisconnectFieldInput
  update: ComponentPropsUpdateConnectionInput
  where: ComponentPropsConnectionWhere
}

input ComponentRelationInput {
  api: ComponentApiCreateFieldInput
  childrenContainerElement: ComponentChildrenContainerElementCreateFieldInput
  owner: WithOwnerOwnerCreateFieldInput
  props: ComponentPropsCreateFieldInput
  rootElement: ComponentRootElementCreateFieldInput
  store: ComponentStoreCreateFieldInput
}

input ComponentRootElementAggregateInput {
  AND: [ComponentRootElementAggregateInput!]
  NOT: ComponentRootElementAggregateInput
  OR: [ComponentRootElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentRootElementNodeAggregationWhereInput
}

input ComponentRootElementConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input ComponentRootElementConnectOrCreateFieldInput {
  onCreate: ComponentRootElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ComponentRootElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ComponentRootElementConnection {
  edges: [ComponentRootElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ComponentRootElementConnectionSort {
  node: ElementSort
}

input ComponentRootElementConnectionWhere {
  AND: [ComponentRootElementConnectionWhere!]
  NOT: ComponentRootElementConnectionWhere
  OR: [ComponentRootElementConnectionWhere!]
  node: ElementWhere
}

input ComponentRootElementCreateFieldInput {
  node: ElementCreateInput!
}

input ComponentRootElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: ComponentRootElementConnectionWhere
}

input ComponentRootElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ComponentRootElementConnectionWhere
}

input ComponentRootElementFieldInput {
  connect: ComponentRootElementConnectFieldInput
  connectOrCreate: ComponentRootElementConnectOrCreateFieldInput
  create: ComponentRootElementCreateFieldInput
}

input ComponentRootElementNodeAggregationWhereInput {
  AND: [ComponentRootElementNodeAggregationWhereInput!]
  NOT: ComponentRootElementNodeAggregationWhereInput
  OR: [ComponentRootElementNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type ComponentRootElementRelationship {
  cursor: String!
  node: Element!
}

input ComponentRootElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input ComponentRootElementUpdateFieldInput {
  connect: ComponentRootElementConnectFieldInput
  connectOrCreate: ComponentRootElementConnectOrCreateFieldInput
  create: ComponentRootElementCreateFieldInput
  delete: ComponentRootElementDeleteFieldInput
  disconnect: ComponentRootElementDisconnectFieldInput
  update: ComponentRootElementUpdateConnectionInput
  where: ComponentRootElementConnectionWhere
}

"""
Fields to sort Components by. The order in which sorts are applied is not guaranteed when specifying many fields in one ComponentSort object.
"""
input ComponentSort {
  id: SortDirection
  keyGenerator: SortDirection
  name: SortDirection
}

input ComponentStoreAggregateInput {
  AND: [ComponentStoreAggregateInput!]
  NOT: ComponentStoreAggregateInput
  OR: [ComponentStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentStoreNodeAggregationWhereInput
}

input ComponentStoreConnectFieldInput {
  connect: StoreConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: StoreConnectWhere
}

input ComponentStoreConnectOrCreateFieldInput {
  onCreate: ComponentStoreConnectOrCreateFieldInputOnCreate!
  where: StoreConnectOrCreateWhere!
}

input ComponentStoreConnectOrCreateFieldInputOnCreate {
  node: StoreOnCreateInput!
}

type ComponentStoreConnection {
  edges: [ComponentStoreRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ComponentStoreConnectionSort {
  node: StoreSort
}

input ComponentStoreConnectionWhere {
  AND: [ComponentStoreConnectionWhere!]
  NOT: ComponentStoreConnectionWhere
  OR: [ComponentStoreConnectionWhere!]
  node: StoreWhere
}

input ComponentStoreCreateFieldInput {
  node: StoreCreateInput!
}

input ComponentStoreDeleteFieldInput {
  delete: StoreDeleteInput
  where: ComponentStoreConnectionWhere
}

input ComponentStoreDisconnectFieldInput {
  disconnect: StoreDisconnectInput
  where: ComponentStoreConnectionWhere
}

input ComponentStoreFieldInput {
  connect: ComponentStoreConnectFieldInput
  connectOrCreate: ComponentStoreConnectOrCreateFieldInput
  create: ComponentStoreCreateFieldInput
}

input ComponentStoreNodeAggregationWhereInput {
  AND: [ComponentStoreNodeAggregationWhereInput!]
  NOT: ComponentStoreNodeAggregationWhereInput
  OR: [ComponentStoreNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type ComponentStoreRelationship {
  cursor: String!
  node: Store!
}

type ComponentStoreStoreAggregationSelection {
  count: Int!
  node: ComponentStoreStoreNodeAggregateSelection
}

type ComponentStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ComponentStoreUpdateConnectionInput {
  node: StoreUpdateInput
}

input ComponentStoreUpdateFieldInput {
  connect: ComponentStoreConnectFieldInput
  connectOrCreate: ComponentStoreConnectOrCreateFieldInput
  create: ComponentStoreCreateFieldInput
  delete: ComponentStoreDeleteFieldInput
  disconnect: ComponentStoreDisconnectFieldInput
  update: ComponentStoreUpdateConnectionInput
  where: ComponentStoreConnectionWhere
}

input ComponentUniqueWhere {
  id: ID
}

input ComponentUpdateInput {
  api: ComponentApiUpdateFieldInput
  childrenContainerElement: ComponentChildrenContainerElementUpdateFieldInput
  id: ID
  keyGenerator: String
  name: String
  owner: WithOwnerOwnerUpdateFieldInput
  props: ComponentPropsUpdateFieldInput
  rootElement: ComponentRootElementUpdateFieldInput
  store: ComponentStoreUpdateFieldInput
}

type ComponentUserOwnerAggregationSelection {
  count: Int!
  node: ComponentUserOwnerNodeAggregateSelection
}

type ComponentUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ComponentWhere {
  AND: [ComponentWhere!]
  NOT: ComponentWhere
  OR: [ComponentWhere!]
  api: InterfaceTypeWhere
  apiAggregate: ComponentApiAggregateInput
  apiConnection: ComponentApiConnectionWhere
  apiConnection_NOT: ComponentApiConnectionWhere
  api_NOT: InterfaceTypeWhere
  childrenContainerElement: ElementWhere
  childrenContainerElementAggregate: ComponentChildrenContainerElementAggregateInput
  childrenContainerElementConnection: ComponentChildrenContainerElementConnectionWhere
  childrenContainerElementConnection_NOT: ComponentChildrenContainerElementConnectionWhere
  childrenContainerElement_NOT: ElementWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  keyGenerator: String
  keyGenerator_CONTAINS: String
  keyGenerator_ENDS_WITH: String
  keyGenerator_IN: [String]
  keyGenerator_MATCHES: String
  keyGenerator_STARTS_WITH: String
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ComponentOwnerAggregateInput
  ownerConnection: WithOwnerOwnerConnectionWhere
  ownerConnection_NOT: WithOwnerOwnerConnectionWhere
  owner_NOT: UserWhere
  props: PropWhere
  propsAggregate: ComponentPropsAggregateInput
  propsConnection: ComponentPropsConnectionWhere
  propsConnection_NOT: ComponentPropsConnectionWhere
  props_NOT: PropWhere
  rootElement: ElementWhere
  rootElementAggregate: ComponentRootElementAggregateInput
  rootElementConnection: ComponentRootElementConnectionWhere
  rootElementConnection_NOT: ComponentRootElementConnectionWhere
  rootElement_NOT: ElementWhere
  store: StoreWhere
  storeAggregate: ComponentStoreAggregateInput
  storeConnection: ComponentStoreConnectionWhere
  storeConnection_NOT: ComponentStoreConnectionWhere
  store_NOT: StoreWhere
}

type ComponentsConnection {
  edges: [ComponentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CreateActionTypesMutationResponse {
  actionTypes: [ActionType!]!
  info: CreateInfo!
}

type CreateApiActionsMutationResponse {
  apiActions: [ApiAction!]!
  info: CreateInfo!
}

type CreateAppTypesMutationResponse {
  appTypes: [AppType!]!
  info: CreateInfo!
}

type CreateAppsMutationResponse {
  apps: [App!]!
  info: CreateInfo!
}

type CreateArrayTypesMutationResponse {
  arrayTypes: [ArrayType!]!
  info: CreateInfo!
}

type CreateAtomsMutationResponse {
  atoms: [Atom!]!
  info: CreateInfo!
}

type CreateCodeActionsMutationResponse {
  codeActions: [CodeAction!]!
  info: CreateInfo!
}

type CreateCodeMirrorTypesMutationResponse {
  codeMirrorTypes: [CodeMirrorType!]!
  info: CreateInfo!
}

type CreateComponentsMutationResponse {
  components: [Component!]!
  info: CreateInfo!
}

type CreateDomainsMutationResponse {
  domains: [Domain!]!
  info: CreateInfo!
}

type CreateElementTypesMutationResponse {
  elementTypes: [ElementType!]!
  info: CreateInfo!
}

type CreateElementsMutationResponse {
  elements: [Element!]!
  info: CreateInfo!
}

type CreateEnumTypeValuesMutationResponse {
  enumTypeValues: [EnumTypeValue!]!
  info: CreateInfo!
}

type CreateEnumTypesMutationResponse {
  enumTypes: [EnumType!]!
  info: CreateInfo!
}

type CreateFieldsMutationResponse {
  fields: [Field!]!
  info: CreateInfo!
}

type CreateGetBaseTypesReturnsMutationResponse {
  getBaseTypesReturns: [GetBaseTypesReturn!]!
  info: CreateInfo!
}

type CreateHooksMutationResponse {
  hooks: [Hook!]!
  info: CreateInfo!
}

type CreateInfo {
  bookmark: String
  nodesCreated: Int!
  relationshipsCreated: Int!
}

type CreateInterfaceTypesMutationResponse {
  info: CreateInfo!
  interfaceTypes: [InterfaceType!]!
}

type CreateLambdaTypesMutationResponse {
  info: CreateInfo!
  lambdaTypes: [LambdaType!]!
}

type CreatePageTypesMutationResponse {
  info: CreateInfo!
  pageTypes: [PageType!]!
}

type CreatePagesMutationResponse {
  info: CreateInfo!
  pages: [Page!]!
}

type CreatePrimitiveTypesMutationResponse {
  info: CreateInfo!
  primitiveTypes: [PrimitiveType!]!
}

type CreatePropsMutationResponse {
  info: CreateInfo!
  props: [Prop!]!
}

type CreateReactNodeTypesMutationResponse {
  info: CreateInfo!
  reactNodeTypes: [ReactNodeType!]!
}

type CreateRenderPropTypesMutationResponse {
  info: CreateInfo!
  renderPropTypes: [RenderPropType!]!
}

type CreateResourcesMutationResponse {
  info: CreateInfo!
  resources: [Resource!]!
}

type CreateStoresMutationResponse {
  info: CreateInfo!
  stores: [Store!]!
}

type CreateTagsMutationResponse {
  info: CreateInfo!
  tags: [Tag!]!
}

type CreateTypeReferencesMutationResponse {
  info: CreateInfo!
  typeReferences: [TypeReference!]!
}

type CreateUnionTypesMutationResponse {
  info: CreateInfo!
  unionTypes: [UnionType!]!
}

type CreateUsersMutationResponse {
  info: CreateInfo!
  users: [User!]!
}

type DeleteInfo {
  bookmark: String
  nodesDeleted: Int!
  relationshipsDeleted: Int!
}

type Domain {
  app(directed: Boolean = true, options: AppOptions, where: AppWhere): App!
  appAggregate(
    directed: Boolean = true
    where: AppWhere
  ): DomainAppAppAggregationSelection
  appConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [DomainAppConnectionSort!]
    where: DomainAppConnectionWhere
  ): DomainAppConnection!
  domainConfig: VercelDomainConfig!
  id: ID!
  name: String!
  projectDomain: VercelProjectDomain!
}

type DomainAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input DomainAppAggregateInput {
  AND: [DomainAppAggregateInput!]
  NOT: DomainAppAggregateInput
  OR: [DomainAppAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: DomainAppNodeAggregationWhereInput
}

type DomainAppAppAggregationSelection {
  count: Int!
  node: DomainAppAppNodeAggregateSelection
}

type DomainAppAppNodeAggregateSelection {
  _compoundName: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input DomainAppConnectFieldInput {
  connect: AppConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: AppConnectWhere
}

input DomainAppConnectOrCreateFieldInput {
  onCreate: DomainAppConnectOrCreateFieldInputOnCreate!
  where: AppConnectOrCreateWhere!
}

input DomainAppConnectOrCreateFieldInputOnCreate {
  node: AppOnCreateInput!
}

type DomainAppConnection {
  edges: [DomainAppRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input DomainAppConnectionSort {
  node: AppSort
}

input DomainAppConnectionWhere {
  AND: [DomainAppConnectionWhere!]
  NOT: DomainAppConnectionWhere
  OR: [DomainAppConnectionWhere!]
  node: AppWhere
}

input DomainAppCreateFieldInput {
  node: AppCreateInput!
}

input DomainAppDeleteFieldInput {
  delete: AppDeleteInput
  where: DomainAppConnectionWhere
}

input DomainAppDisconnectFieldInput {
  disconnect: AppDisconnectInput
  where: DomainAppConnectionWhere
}

input DomainAppFieldInput {
  connect: DomainAppConnectFieldInput
  connectOrCreate: DomainAppConnectOrCreateFieldInput
  create: DomainAppCreateFieldInput
}

input DomainAppNodeAggregationWhereInput {
  AND: [DomainAppNodeAggregationWhereInput!]
  NOT: DomainAppNodeAggregationWhereInput
  OR: [DomainAppNodeAggregationWhereInput!]
  _compoundName_AVERAGE_LENGTH_EQUAL: Float
  _compoundName_AVERAGE_LENGTH_GT: Float
  _compoundName_AVERAGE_LENGTH_GTE: Float
  _compoundName_AVERAGE_LENGTH_LT: Float
  _compoundName_AVERAGE_LENGTH_LTE: Float
  _compoundName_LONGEST_LENGTH_EQUAL: Int
  _compoundName_LONGEST_LENGTH_GT: Int
  _compoundName_LONGEST_LENGTH_GTE: Int
  _compoundName_LONGEST_LENGTH_LT: Int
  _compoundName_LONGEST_LENGTH_LTE: Int
  _compoundName_SHORTEST_LENGTH_EQUAL: Int
  _compoundName_SHORTEST_LENGTH_GT: Int
  _compoundName_SHORTEST_LENGTH_GTE: Int
  _compoundName_SHORTEST_LENGTH_LT: Int
  _compoundName_SHORTEST_LENGTH_LTE: Int
}

type DomainAppRelationship {
  cursor: String!
  node: App!
}

input DomainAppUpdateConnectionInput {
  node: AppUpdateInput
}

input DomainAppUpdateFieldInput {
  connect: DomainAppConnectFieldInput
  connectOrCreate: DomainAppConnectOrCreateFieldInput
  create: DomainAppCreateFieldInput
  delete: DomainAppDeleteFieldInput
  disconnect: DomainAppDisconnectFieldInput
  update: DomainAppUpdateConnectionInput
  where: DomainAppConnectionWhere
}

input DomainConnectInput {
  app: DomainAppConnectFieldInput
}

input DomainConnectOrCreateInput {
  app: DomainAppConnectOrCreateFieldInput
}

input DomainConnectOrCreateWhere {
  node: DomainUniqueWhere!
}

input DomainConnectWhere {
  node: DomainWhere!
}

input DomainCreateInput {
  app: DomainAppFieldInput
  id: ID!
  name: String!
}

input DomainDeleteInput {
  app: DomainAppDeleteFieldInput
}

input DomainDisconnectInput {
  app: DomainAppDisconnectFieldInput
}

type DomainEdge {
  cursor: String!
  node: Domain!
}

input DomainOnCreateInput {
  id: ID!
  name: String!
}

input DomainOptions {
  limit: Int
  offset: Int

  """
  Specify one or more DomainSort objects to sort Domains by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [DomainSort!]
}

input DomainRelationInput {
  app: DomainAppCreateFieldInput
}

"""
Fields to sort Domains by. The order in which sorts are applied is not guaranteed when specifying many fields in one DomainSort object.
"""
input DomainSort {
  id: SortDirection
  name: SortDirection
}

input DomainUniqueWhere {
  id: ID
}

input DomainUpdateInput {
  app: DomainAppUpdateFieldInput
  id: ID
  name: String
}

input DomainWhere {
  AND: [DomainWhere!]
  NOT: DomainWhere
  OR: [DomainWhere!]
  app: AppWhere
  appAggregate: DomainAppAggregateInput
  appConnection: DomainAppConnectionWhere
  appConnection_NOT: DomainAppConnectionWhere
  app_NOT: AppWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
}

type DomainsConnection {
  edges: [DomainEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Element {
  childMapperComponent(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): Component
  childMapperComponentAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): ElementComponentChildMapperComponentAggregationSelection
  childMapperComponentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementChildMapperComponentConnectionSort!]
    where: ElementChildMapperComponentConnectionWhere
  ): ElementChildMapperComponentConnection!
  childMapperPreviousSibling(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  childMapperPreviousSiblingAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementChildMapperPreviousSiblingAggregationSelection
  childMapperPreviousSiblingConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementChildMapperPreviousSiblingConnectionSort!]
    where: ElementChildMapperPreviousSiblingConnectionWhere
  ): ElementChildMapperPreviousSiblingConnection!
  childMapperPropKey: String
  customCss: String
  descendantElements: [Element!]!
  firstChild(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  firstChildAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementFirstChildAggregationSelection
  firstChildConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementFirstChildConnectionSort!]
    where: ElementFirstChildConnectionWhere
  ): ElementFirstChildConnection!
  guiCss: String
  id: ID!
  name: String!
  nextSibling(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  nextSiblingAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementNextSiblingAggregationSelection
  nextSiblingConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementNextSiblingConnectionSort!]
    where: ElementNextSiblingConnectionWhere
  ): ElementNextSiblingConnection!
  page(directed: Boolean = true, options: PageOptions, where: PageWhere): Page
  pageAggregate(
    directed: Boolean = true
    where: PageWhere
  ): ElementPagePageAggregationSelection
  pageConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPageConnectionSort!]
    where: ElementPageConnectionWhere
  ): ElementPageConnection!
  parent(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  parentAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementParentAggregationSelection
  parentComponent(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): Component
  parentComponentAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): ElementComponentParentComponentAggregationSelection
  parentComponentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementParentComponentConnectionSort!]
    where: ElementParentComponentConnectionWhere
  ): ElementParentComponentConnection!
  parentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementParentConnectionSort!]
    where: ElementParentConnectionWhere
  ): ElementParentConnection!
  postRenderAction(
    directed: Boolean = true
    options: BaseActionOptions
    where: BaseActionWhere
  ): BaseAction
  postRenderActionConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPostRenderActionConnectionSort!]
    where: ElementPostRenderActionConnectionWhere
  ): ElementPostRenderActionConnection!
  preRenderAction(
    directed: Boolean = true
    options: BaseActionOptions
    where: BaseActionWhere
  ): BaseAction
  preRenderActionConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPreRenderActionConnectionSort!]
    where: ElementPreRenderActionConnectionWhere
  ): ElementPreRenderActionConnection!
  prevSibling(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  prevSiblingAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementPrevSiblingAggregationSelection
  prevSiblingConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPrevSiblingConnectionSort!]
    where: ElementPrevSiblingConnectionWhere
  ): ElementPrevSiblingConnection!
  propTransformationJs: String
  props(directed: Boolean = true, options: PropOptions, where: PropWhere): Prop!
  propsAggregate(
    directed: Boolean = true
    where: PropWhere
  ): ElementPropPropsAggregationSelection
  propsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPropsConnectionSort!]
    where: ElementPropsConnectionWhere
  ): ElementPropsConnection!
  renderAtomType(
    directed: Boolean = true
    options: AtomOptions
    where: AtomWhere
  ): Atom
  renderAtomTypeAggregate(
    directed: Boolean = true
    where: AtomWhere
  ): ElementAtomRenderAtomTypeAggregationSelection
  renderAtomTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementRenderAtomTypeConnectionSort!]
    where: ElementRenderAtomTypeConnectionWhere
  ): ElementRenderAtomTypeConnection!
  renderComponentType(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): Component
  renderComponentTypeAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): ElementComponentRenderComponentTypeAggregationSelection
  renderComponentTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementRenderComponentTypeConnectionSort!]
    where: ElementRenderComponentTypeConnectionWhere
  ): ElementRenderComponentTypeConnection!
  renderForEachPropKey: String
  renderIfExpression: String
  renderType: RenderType
}

type ElementAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  count: Int!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

type ElementAtomRenderAtomTypeAggregationSelection {
  count: Int!
  node: ElementAtomRenderAtomTypeNodeAggregateSelection
}

type ElementAtomRenderAtomTypeNodeAggregateSelection {
  externalCssSource: StringAggregateSelectionNullable!
  externalJsSource: StringAggregateSelectionNullable!
  externalSourceType: StringAggregateSelectionNullable!
  icon: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ElementChildMapperComponentAggregateInput {
  AND: [ElementChildMapperComponentAggregateInput!]
  NOT: ElementChildMapperComponentAggregateInput
  OR: [ElementChildMapperComponentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementChildMapperComponentNodeAggregationWhereInput
}

input ElementChildMapperComponentConnectFieldInput {
  connect: ComponentConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ComponentConnectWhere
}

input ElementChildMapperComponentConnectOrCreateFieldInput {
  onCreate: ElementChildMapperComponentConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input ElementChildMapperComponentConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type ElementChildMapperComponentConnection {
  edges: [ElementChildMapperComponentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementChildMapperComponentConnectionSort {
  node: ComponentSort
}

input ElementChildMapperComponentConnectionWhere {
  AND: [ElementChildMapperComponentConnectionWhere!]
  NOT: ElementChildMapperComponentConnectionWhere
  OR: [ElementChildMapperComponentConnectionWhere!]
  node: ComponentWhere
}

input ElementChildMapperComponentCreateFieldInput {
  node: ComponentCreateInput!
}

input ElementChildMapperComponentDeleteFieldInput {
  delete: ComponentDeleteInput
  where: ElementChildMapperComponentConnectionWhere
}

input ElementChildMapperComponentDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: ElementChildMapperComponentConnectionWhere
}

input ElementChildMapperComponentFieldInput {
  connect: ElementChildMapperComponentConnectFieldInput
  connectOrCreate: ElementChildMapperComponentConnectOrCreateFieldInput
  create: ElementChildMapperComponentCreateFieldInput
}

input ElementChildMapperComponentNodeAggregationWhereInput {
  AND: [ElementChildMapperComponentNodeAggregationWhereInput!]
  NOT: ElementChildMapperComponentNodeAggregationWhereInput
  OR: [ElementChildMapperComponentNodeAggregationWhereInput!]
  keyGenerator_AVERAGE_LENGTH_EQUAL: Float
  keyGenerator_AVERAGE_LENGTH_GT: Float
  keyGenerator_AVERAGE_LENGTH_GTE: Float
  keyGenerator_AVERAGE_LENGTH_LT: Float
  keyGenerator_AVERAGE_LENGTH_LTE: Float
  keyGenerator_LONGEST_LENGTH_EQUAL: Int
  keyGenerator_LONGEST_LENGTH_GT: Int
  keyGenerator_LONGEST_LENGTH_GTE: Int
  keyGenerator_LONGEST_LENGTH_LT: Int
  keyGenerator_LONGEST_LENGTH_LTE: Int
  keyGenerator_SHORTEST_LENGTH_EQUAL: Int
  keyGenerator_SHORTEST_LENGTH_GT: Int
  keyGenerator_SHORTEST_LENGTH_GTE: Int
  keyGenerator_SHORTEST_LENGTH_LT: Int
  keyGenerator_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type ElementChildMapperComponentRelationship {
  cursor: String!
  node: Component!
}

input ElementChildMapperComponentUpdateConnectionInput {
  node: ComponentUpdateInput
}

input ElementChildMapperComponentUpdateFieldInput {
  connect: ElementChildMapperComponentConnectFieldInput
  connectOrCreate: ElementChildMapperComponentConnectOrCreateFieldInput
  create: ElementChildMapperComponentCreateFieldInput
  delete: ElementChildMapperComponentDeleteFieldInput
  disconnect: ElementChildMapperComponentDisconnectFieldInput
  update: ElementChildMapperComponentUpdateConnectionInput
  where: ElementChildMapperComponentConnectionWhere
}

input ElementChildMapperPreviousSiblingAggregateInput {
  AND: [ElementChildMapperPreviousSiblingAggregateInput!]
  NOT: ElementChildMapperPreviousSiblingAggregateInput
  OR: [ElementChildMapperPreviousSiblingAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementChildMapperPreviousSiblingNodeAggregationWhereInput
}

input ElementChildMapperPreviousSiblingConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input ElementChildMapperPreviousSiblingConnectOrCreateFieldInput {
  onCreate: ElementChildMapperPreviousSiblingConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementChildMapperPreviousSiblingConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ElementChildMapperPreviousSiblingConnection {
  edges: [ElementChildMapperPreviousSiblingRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementChildMapperPreviousSiblingConnectionSort {
  node: ElementSort
}

input ElementChildMapperPreviousSiblingConnectionWhere {
  AND: [ElementChildMapperPreviousSiblingConnectionWhere!]
  NOT: ElementChildMapperPreviousSiblingConnectionWhere
  OR: [ElementChildMapperPreviousSiblingConnectionWhere!]
  node: ElementWhere
}

input ElementChildMapperPreviousSiblingCreateFieldInput {
  node: ElementCreateInput!
}

input ElementChildMapperPreviousSiblingDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementChildMapperPreviousSiblingConnectionWhere
}

input ElementChildMapperPreviousSiblingDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementChildMapperPreviousSiblingConnectionWhere
}

input ElementChildMapperPreviousSiblingFieldInput {
  connect: ElementChildMapperPreviousSiblingConnectFieldInput
  connectOrCreate: ElementChildMapperPreviousSiblingConnectOrCreateFieldInput
  create: ElementChildMapperPreviousSiblingCreateFieldInput
}

input ElementChildMapperPreviousSiblingNodeAggregationWhereInput {
  AND: [ElementChildMapperPreviousSiblingNodeAggregationWhereInput!]
  NOT: ElementChildMapperPreviousSiblingNodeAggregationWhereInput
  OR: [ElementChildMapperPreviousSiblingNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type ElementChildMapperPreviousSiblingRelationship {
  cursor: String!
  node: Element!
}

input ElementChildMapperPreviousSiblingUpdateConnectionInput {
  node: ElementUpdateInput
}

input ElementChildMapperPreviousSiblingUpdateFieldInput {
  connect: ElementChildMapperPreviousSiblingConnectFieldInput
  connectOrCreate: ElementChildMapperPreviousSiblingConnectOrCreateFieldInput
  create: ElementChildMapperPreviousSiblingCreateFieldInput
  delete: ElementChildMapperPreviousSiblingDeleteFieldInput
  disconnect: ElementChildMapperPreviousSiblingDisconnectFieldInput
  update: ElementChildMapperPreviousSiblingUpdateConnectionInput
  where: ElementChildMapperPreviousSiblingConnectionWhere
}

type ElementComponentChildMapperComponentAggregationSelection {
  count: Int!
  node: ElementComponentChildMapperComponentNodeAggregateSelection
}

type ElementComponentChildMapperComponentNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  keyGenerator: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
}

type ElementComponentParentComponentAggregationSelection {
  count: Int!
  node: ElementComponentParentComponentNodeAggregateSelection
}

type ElementComponentParentComponentNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  keyGenerator: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
}

type ElementComponentRenderComponentTypeAggregationSelection {
  count: Int!
  node: ElementComponentRenderComponentTypeNodeAggregateSelection
}

type ElementComponentRenderComponentTypeNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  keyGenerator: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
}

input ElementConnectInput {
  childMapperComponent: ElementChildMapperComponentConnectFieldInput
  childMapperPreviousSibling: ElementChildMapperPreviousSiblingConnectFieldInput
  firstChild: ElementFirstChildConnectFieldInput
  nextSibling: ElementNextSiblingConnectFieldInput
  page: ElementPageConnectFieldInput
  parent: ElementParentConnectFieldInput
  parentComponent: ElementParentComponentConnectFieldInput
  postRenderAction: ElementPostRenderActionConnectFieldInput
  preRenderAction: ElementPreRenderActionConnectFieldInput
  prevSibling: ElementPrevSiblingConnectFieldInput
  props: ElementPropsConnectFieldInput
  renderAtomType: ElementRenderAtomTypeConnectFieldInput
  renderComponentType: ElementRenderComponentTypeConnectFieldInput
}

input ElementConnectOrCreateInput {
  childMapperComponent: ElementChildMapperComponentConnectOrCreateFieldInput
  childMapperPreviousSibling: ElementChildMapperPreviousSiblingConnectOrCreateFieldInput
  firstChild: ElementFirstChildConnectOrCreateFieldInput
  nextSibling: ElementNextSiblingConnectOrCreateFieldInput
  page: ElementPageConnectOrCreateFieldInput
  parent: ElementParentConnectOrCreateFieldInput
  parentComponent: ElementParentComponentConnectOrCreateFieldInput
  prevSibling: ElementPrevSiblingConnectOrCreateFieldInput
  props: ElementPropsConnectOrCreateFieldInput
  renderAtomType: ElementRenderAtomTypeConnectOrCreateFieldInput
  renderComponentType: ElementRenderComponentTypeConnectOrCreateFieldInput
}

input ElementConnectOrCreateWhere {
  node: ElementUniqueWhere!
}

input ElementConnectWhere {
  node: ElementWhere!
}

input ElementCreateInput {
  childMapperComponent: ElementChildMapperComponentFieldInput
  childMapperPreviousSibling: ElementChildMapperPreviousSiblingFieldInput
  childMapperPropKey: String
  customCss: String
  firstChild: ElementFirstChildFieldInput
  guiCss: String
  id: ID!
  name: String!
  nextSibling: ElementNextSiblingFieldInput
  page: ElementPageFieldInput
  parent: ElementParentFieldInput
  parentComponent: ElementParentComponentFieldInput
  postRenderAction: ElementPostRenderActionFieldInput
  preRenderAction: ElementPreRenderActionFieldInput
  prevSibling: ElementPrevSiblingFieldInput
  propTransformationJs: String
  props: ElementPropsFieldInput
  renderAtomType: ElementRenderAtomTypeFieldInput
  renderComponentType: ElementRenderComponentTypeFieldInput
  renderForEachPropKey: String
  renderIfExpression: String
}

input ElementDeleteInput {
  childMapperComponent: ElementChildMapperComponentDeleteFieldInput
  childMapperPreviousSibling: ElementChildMapperPreviousSiblingDeleteFieldInput
  firstChild: ElementFirstChildDeleteFieldInput
  nextSibling: ElementNextSiblingDeleteFieldInput
  page: ElementPageDeleteFieldInput
  parent: ElementParentDeleteFieldInput
  parentComponent: ElementParentComponentDeleteFieldInput
  postRenderAction: ElementPostRenderActionDeleteFieldInput
  preRenderAction: ElementPreRenderActionDeleteFieldInput
  prevSibling: ElementPrevSiblingDeleteFieldInput
  props: ElementPropsDeleteFieldInput
  renderAtomType: ElementRenderAtomTypeDeleteFieldInput
  renderComponentType: ElementRenderComponentTypeDeleteFieldInput
}

input ElementDisconnectInput {
  childMapperComponent: ElementChildMapperComponentDisconnectFieldInput
  childMapperPreviousSibling: ElementChildMapperPreviousSiblingDisconnectFieldInput
  firstChild: ElementFirstChildDisconnectFieldInput
  nextSibling: ElementNextSiblingDisconnectFieldInput
  page: ElementPageDisconnectFieldInput
  parent: ElementParentDisconnectFieldInput
  parentComponent: ElementParentComponentDisconnectFieldInput
  postRenderAction: ElementPostRenderActionDisconnectFieldInput
  preRenderAction: ElementPreRenderActionDisconnectFieldInput
  prevSibling: ElementPrevSiblingDisconnectFieldInput
  props: ElementPropsDisconnectFieldInput
  renderAtomType: ElementRenderAtomTypeDisconnectFieldInput
  renderComponentType: ElementRenderComponentTypeDisconnectFieldInput
}

type ElementEdge {
  cursor: String!
  node: Element!
}

type ElementElementChildMapperPreviousSiblingAggregationSelection {
  count: Int!
  node: ElementElementChildMapperPreviousSiblingNodeAggregateSelection
}

type ElementElementChildMapperPreviousSiblingNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

type ElementElementFirstChildAggregationSelection {
  count: Int!
  node: ElementElementFirstChildNodeAggregateSelection
}

type ElementElementFirstChildNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

type ElementElementNextSiblingAggregationSelection {
  count: Int!
  node: ElementElementNextSiblingNodeAggregateSelection
}

type ElementElementNextSiblingNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

type ElementElementParentAggregationSelection {
  count: Int!
  node: ElementElementParentNodeAggregateSelection
}

type ElementElementParentNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

type ElementElementPrevSiblingAggregationSelection {
  count: Int!
  node: ElementElementPrevSiblingNodeAggregateSelection
}

type ElementElementPrevSiblingNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

input ElementFirstChildAggregateInput {
  AND: [ElementFirstChildAggregateInput!]
  NOT: ElementFirstChildAggregateInput
  OR: [ElementFirstChildAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementFirstChildNodeAggregationWhereInput
}

input ElementFirstChildConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input ElementFirstChildConnectOrCreateFieldInput {
  onCreate: ElementFirstChildConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementFirstChildConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ElementFirstChildConnection {
  edges: [ElementFirstChildRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementFirstChildConnectionSort {
  node: ElementSort
}

input ElementFirstChildConnectionWhere {
  AND: [ElementFirstChildConnectionWhere!]
  NOT: ElementFirstChildConnectionWhere
  OR: [ElementFirstChildConnectionWhere!]
  node: ElementWhere
}

input ElementFirstChildCreateFieldInput {
  node: ElementCreateInput!
}

input ElementFirstChildDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementFirstChildConnectionWhere
}

input ElementFirstChildDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementFirstChildConnectionWhere
}

input ElementFirstChildFieldInput {
  connect: ElementFirstChildConnectFieldInput
  connectOrCreate: ElementFirstChildConnectOrCreateFieldInput
  create: ElementFirstChildCreateFieldInput
}

input ElementFirstChildNodeAggregationWhereInput {
  AND: [ElementFirstChildNodeAggregationWhereInput!]
  NOT: ElementFirstChildNodeAggregationWhereInput
  OR: [ElementFirstChildNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type ElementFirstChildRelationship {
  cursor: String!
  node: Element!
}

input ElementFirstChildUpdateConnectionInput {
  node: ElementUpdateInput
}

input ElementFirstChildUpdateFieldInput {
  connect: ElementFirstChildConnectFieldInput
  connectOrCreate: ElementFirstChildConnectOrCreateFieldInput
  create: ElementFirstChildCreateFieldInput
  delete: ElementFirstChildDeleteFieldInput
  disconnect: ElementFirstChildDisconnectFieldInput
  update: ElementFirstChildUpdateConnectionInput
  where: ElementFirstChildConnectionWhere
}

input ElementNextSiblingAggregateInput {
  AND: [ElementNextSiblingAggregateInput!]
  NOT: ElementNextSiblingAggregateInput
  OR: [ElementNextSiblingAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementNextSiblingNodeAggregationWhereInput
}

input ElementNextSiblingConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input ElementNextSiblingConnectOrCreateFieldInput {
  onCreate: ElementNextSiblingConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementNextSiblingConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ElementNextSiblingConnection {
  edges: [ElementNextSiblingRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementNextSiblingConnectionSort {
  node: ElementSort
}

input ElementNextSiblingConnectionWhere {
  AND: [ElementNextSiblingConnectionWhere!]
  NOT: ElementNextSiblingConnectionWhere
  OR: [ElementNextSiblingConnectionWhere!]
  node: ElementWhere
}

input ElementNextSiblingCreateFieldInput {
  node: ElementCreateInput!
}

input ElementNextSiblingDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementNextSiblingConnectionWhere
}

input ElementNextSiblingDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementNextSiblingConnectionWhere
}

input ElementNextSiblingFieldInput {
  connect: ElementNextSiblingConnectFieldInput
  connectOrCreate: ElementNextSiblingConnectOrCreateFieldInput
  create: ElementNextSiblingCreateFieldInput
}

input ElementNextSiblingNodeAggregationWhereInput {
  AND: [ElementNextSiblingNodeAggregationWhereInput!]
  NOT: ElementNextSiblingNodeAggregationWhereInput
  OR: [ElementNextSiblingNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type ElementNextSiblingRelationship {
  cursor: String!
  node: Element!
}

input ElementNextSiblingUpdateConnectionInput {
  node: ElementUpdateInput
}

input ElementNextSiblingUpdateFieldInput {
  connect: ElementNextSiblingConnectFieldInput
  connectOrCreate: ElementNextSiblingConnectOrCreateFieldInput
  create: ElementNextSiblingCreateFieldInput
  delete: ElementNextSiblingDeleteFieldInput
  disconnect: ElementNextSiblingDisconnectFieldInput
  update: ElementNextSiblingUpdateConnectionInput
  where: ElementNextSiblingConnectionWhere
}

input ElementOnCreateInput {
  childMapperPropKey: String
  customCss: String
  guiCss: String
  id: ID!
  name: String!
  propTransformationJs: String
  renderForEachPropKey: String
  renderIfExpression: String
}

input ElementOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ElementSort objects to sort Elements by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ElementSort!]
}

input ElementPageAggregateInput {
  AND: [ElementPageAggregateInput!]
  NOT: ElementPageAggregateInput
  OR: [ElementPageAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementPageNodeAggregationWhereInput
}

input ElementPageConnectFieldInput {
  connect: PageConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: PageConnectWhere
}

input ElementPageConnectOrCreateFieldInput {
  onCreate: ElementPageConnectOrCreateFieldInputOnCreate!
  where: PageConnectOrCreateWhere!
}

input ElementPageConnectOrCreateFieldInputOnCreate {
  node: PageOnCreateInput!
}

type ElementPageConnection {
  edges: [ElementPageRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPageConnectionSort {
  node: PageSort
}

input ElementPageConnectionWhere {
  AND: [ElementPageConnectionWhere!]
  NOT: ElementPageConnectionWhere
  OR: [ElementPageConnectionWhere!]
  node: PageWhere
}

input ElementPageCreateFieldInput {
  node: PageCreateInput!
}

input ElementPageDeleteFieldInput {
  delete: PageDeleteInput
  where: ElementPageConnectionWhere
}

input ElementPageDisconnectFieldInput {
  disconnect: PageDisconnectInput
  where: ElementPageConnectionWhere
}

input ElementPageFieldInput {
  connect: ElementPageConnectFieldInput
  connectOrCreate: ElementPageConnectOrCreateFieldInput
  create: ElementPageCreateFieldInput
}

input ElementPageNodeAggregationWhereInput {
  AND: [ElementPageNodeAggregationWhereInput!]
  NOT: ElementPageNodeAggregationWhereInput
  OR: [ElementPageNodeAggregationWhereInput!]
  _compoundName_AVERAGE_LENGTH_EQUAL: Float
  _compoundName_AVERAGE_LENGTH_GT: Float
  _compoundName_AVERAGE_LENGTH_GTE: Float
  _compoundName_AVERAGE_LENGTH_LT: Float
  _compoundName_AVERAGE_LENGTH_LTE: Float
  _compoundName_LONGEST_LENGTH_EQUAL: Int
  _compoundName_LONGEST_LENGTH_GT: Int
  _compoundName_LONGEST_LENGTH_GTE: Int
  _compoundName_LONGEST_LENGTH_LT: Int
  _compoundName_LONGEST_LENGTH_LTE: Int
  _compoundName_SHORTEST_LENGTH_EQUAL: Int
  _compoundName_SHORTEST_LENGTH_GT: Int
  _compoundName_SHORTEST_LENGTH_GTE: Int
  _compoundName_SHORTEST_LENGTH_LT: Int
  _compoundName_SHORTEST_LENGTH_LTE: Int
  url_AVERAGE_LENGTH_EQUAL: Float
  url_AVERAGE_LENGTH_GT: Float
  url_AVERAGE_LENGTH_GTE: Float
  url_AVERAGE_LENGTH_LT: Float
  url_AVERAGE_LENGTH_LTE: Float
  url_LONGEST_LENGTH_EQUAL: Int
  url_LONGEST_LENGTH_GT: Int
  url_LONGEST_LENGTH_GTE: Int
  url_LONGEST_LENGTH_LT: Int
  url_LONGEST_LENGTH_LTE: Int
  url_SHORTEST_LENGTH_EQUAL: Int
  url_SHORTEST_LENGTH_GT: Int
  url_SHORTEST_LENGTH_GTE: Int
  url_SHORTEST_LENGTH_LT: Int
  url_SHORTEST_LENGTH_LTE: Int
}

type ElementPagePageAggregationSelection {
  count: Int!
  node: ElementPagePageNodeAggregateSelection
}

type ElementPagePageNodeAggregateSelection {
  _compoundName: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  url: StringAggregateSelectionNonNullable!
}

type ElementPageRelationship {
  cursor: String!
  node: Page!
}

input ElementPageUpdateConnectionInput {
  node: PageUpdateInput
}

input ElementPageUpdateFieldInput {
  connect: ElementPageConnectFieldInput
  connectOrCreate: ElementPageConnectOrCreateFieldInput
  create: ElementPageCreateFieldInput
  delete: ElementPageDeleteFieldInput
  disconnect: ElementPageDisconnectFieldInput
  update: ElementPageUpdateConnectionInput
  where: ElementPageConnectionWhere
}

input ElementParentAggregateInput {
  AND: [ElementParentAggregateInput!]
  NOT: ElementParentAggregateInput
  OR: [ElementParentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementParentNodeAggregationWhereInput
}

input ElementParentComponentAggregateInput {
  AND: [ElementParentComponentAggregateInput!]
  NOT: ElementParentComponentAggregateInput
  OR: [ElementParentComponentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementParentComponentNodeAggregationWhereInput
}

input ElementParentComponentConnectFieldInput {
  connect: ComponentConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ComponentConnectWhere
}

input ElementParentComponentConnectOrCreateFieldInput {
  onCreate: ElementParentComponentConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input ElementParentComponentConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type ElementParentComponentConnection {
  edges: [ElementParentComponentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementParentComponentConnectionSort {
  node: ComponentSort
}

input ElementParentComponentConnectionWhere {
  AND: [ElementParentComponentConnectionWhere!]
  NOT: ElementParentComponentConnectionWhere
  OR: [ElementParentComponentConnectionWhere!]
  node: ComponentWhere
}

input ElementParentComponentCreateFieldInput {
  node: ComponentCreateInput!
}

input ElementParentComponentDeleteFieldInput {
  delete: ComponentDeleteInput
  where: ElementParentComponentConnectionWhere
}

input ElementParentComponentDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: ElementParentComponentConnectionWhere
}

input ElementParentComponentFieldInput {
  connect: ElementParentComponentConnectFieldInput
  connectOrCreate: ElementParentComponentConnectOrCreateFieldInput
  create: ElementParentComponentCreateFieldInput
}

input ElementParentComponentNodeAggregationWhereInput {
  AND: [ElementParentComponentNodeAggregationWhereInput!]
  NOT: ElementParentComponentNodeAggregationWhereInput
  OR: [ElementParentComponentNodeAggregationWhereInput!]
  keyGenerator_AVERAGE_LENGTH_EQUAL: Float
  keyGenerator_AVERAGE_LENGTH_GT: Float
  keyGenerator_AVERAGE_LENGTH_GTE: Float
  keyGenerator_AVERAGE_LENGTH_LT: Float
  keyGenerator_AVERAGE_LENGTH_LTE: Float
  keyGenerator_LONGEST_LENGTH_EQUAL: Int
  keyGenerator_LONGEST_LENGTH_GT: Int
  keyGenerator_LONGEST_LENGTH_GTE: Int
  keyGenerator_LONGEST_LENGTH_LT: Int
  keyGenerator_LONGEST_LENGTH_LTE: Int
  keyGenerator_SHORTEST_LENGTH_EQUAL: Int
  keyGenerator_SHORTEST_LENGTH_GT: Int
  keyGenerator_SHORTEST_LENGTH_GTE: Int
  keyGenerator_SHORTEST_LENGTH_LT: Int
  keyGenerator_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type ElementParentComponentRelationship {
  cursor: String!
  node: Component!
}

input ElementParentComponentUpdateConnectionInput {
  node: ComponentUpdateInput
}

input ElementParentComponentUpdateFieldInput {
  connect: ElementParentComponentConnectFieldInput
  connectOrCreate: ElementParentComponentConnectOrCreateFieldInput
  create: ElementParentComponentCreateFieldInput
  delete: ElementParentComponentDeleteFieldInput
  disconnect: ElementParentComponentDisconnectFieldInput
  update: ElementParentComponentUpdateConnectionInput
  where: ElementParentComponentConnectionWhere
}

input ElementParentConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input ElementParentConnectOrCreateFieldInput {
  onCreate: ElementParentConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementParentConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ElementParentConnection {
  edges: [ElementParentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementParentConnectionSort {
  node: ElementSort
}

input ElementParentConnectionWhere {
  AND: [ElementParentConnectionWhere!]
  NOT: ElementParentConnectionWhere
  OR: [ElementParentConnectionWhere!]
  node: ElementWhere
}

input ElementParentCreateFieldInput {
  node: ElementCreateInput!
}

input ElementParentDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementParentConnectionWhere
}

input ElementParentDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementParentConnectionWhere
}

input ElementParentFieldInput {
  connect: ElementParentConnectFieldInput
  connectOrCreate: ElementParentConnectOrCreateFieldInput
  create: ElementParentCreateFieldInput
}

input ElementParentNodeAggregationWhereInput {
  AND: [ElementParentNodeAggregationWhereInput!]
  NOT: ElementParentNodeAggregationWhereInput
  OR: [ElementParentNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type ElementParentRelationship {
  cursor: String!
  node: Element!
}

input ElementParentUpdateConnectionInput {
  node: ElementUpdateInput
}

input ElementParentUpdateFieldInput {
  connect: ElementParentConnectFieldInput
  connectOrCreate: ElementParentConnectOrCreateFieldInput
  create: ElementParentCreateFieldInput
  delete: ElementParentDeleteFieldInput
  disconnect: ElementParentDisconnectFieldInput
  update: ElementParentUpdateConnectionInput
  where: ElementParentConnectionWhere
}

input ElementPostRenderActionConnectFieldInput {
  connect: BaseActionConnectInput
  where: BaseActionConnectWhere
}

type ElementPostRenderActionConnection {
  edges: [ElementPostRenderActionRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPostRenderActionConnectionSort {
  node: BaseActionSort
}

input ElementPostRenderActionConnectionWhere {
  AND: [ElementPostRenderActionConnectionWhere!]
  NOT: ElementPostRenderActionConnectionWhere
  OR: [ElementPostRenderActionConnectionWhere!]
  node: BaseActionWhere
}

input ElementPostRenderActionCreateFieldInput {
  node: BaseActionCreateInput!
}

input ElementPostRenderActionDeleteFieldInput {
  delete: BaseActionDeleteInput
  where: ElementPostRenderActionConnectionWhere
}

input ElementPostRenderActionDisconnectFieldInput {
  disconnect: BaseActionDisconnectInput
  where: ElementPostRenderActionConnectionWhere
}

input ElementPostRenderActionFieldInput {
  connect: ElementPostRenderActionConnectFieldInput
  create: ElementPostRenderActionCreateFieldInput
}

type ElementPostRenderActionRelationship {
  cursor: String!
  node: BaseAction!
}

input ElementPostRenderActionUpdateConnectionInput {
  node: BaseActionUpdateInput
}

input ElementPostRenderActionUpdateFieldInput {
  connect: ElementPostRenderActionConnectFieldInput
  create: ElementPostRenderActionCreateFieldInput
  delete: ElementPostRenderActionDeleteFieldInput
  disconnect: ElementPostRenderActionDisconnectFieldInput
  update: ElementPostRenderActionUpdateConnectionInput
  where: ElementPostRenderActionConnectionWhere
}

input ElementPreRenderActionConnectFieldInput {
  connect: BaseActionConnectInput
  where: BaseActionConnectWhere
}

type ElementPreRenderActionConnection {
  edges: [ElementPreRenderActionRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPreRenderActionConnectionSort {
  node: BaseActionSort
}

input ElementPreRenderActionConnectionWhere {
  AND: [ElementPreRenderActionConnectionWhere!]
  NOT: ElementPreRenderActionConnectionWhere
  OR: [ElementPreRenderActionConnectionWhere!]
  node: BaseActionWhere
}

input ElementPreRenderActionCreateFieldInput {
  node: BaseActionCreateInput!
}

input ElementPreRenderActionDeleteFieldInput {
  delete: BaseActionDeleteInput
  where: ElementPreRenderActionConnectionWhere
}

input ElementPreRenderActionDisconnectFieldInput {
  disconnect: BaseActionDisconnectInput
  where: ElementPreRenderActionConnectionWhere
}

input ElementPreRenderActionFieldInput {
  connect: ElementPreRenderActionConnectFieldInput
  create: ElementPreRenderActionCreateFieldInput
}

type ElementPreRenderActionRelationship {
  cursor: String!
  node: BaseAction!
}

input ElementPreRenderActionUpdateConnectionInput {
  node: BaseActionUpdateInput
}

input ElementPreRenderActionUpdateFieldInput {
  connect: ElementPreRenderActionConnectFieldInput
  create: ElementPreRenderActionCreateFieldInput
  delete: ElementPreRenderActionDeleteFieldInput
  disconnect: ElementPreRenderActionDisconnectFieldInput
  update: ElementPreRenderActionUpdateConnectionInput
  where: ElementPreRenderActionConnectionWhere
}

input ElementPrevSiblingAggregateInput {
  AND: [ElementPrevSiblingAggregateInput!]
  NOT: ElementPrevSiblingAggregateInput
  OR: [ElementPrevSiblingAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementPrevSiblingNodeAggregationWhereInput
}

input ElementPrevSiblingConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input ElementPrevSiblingConnectOrCreateFieldInput {
  onCreate: ElementPrevSiblingConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementPrevSiblingConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ElementPrevSiblingConnection {
  edges: [ElementPrevSiblingRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPrevSiblingConnectionSort {
  node: ElementSort
}

input ElementPrevSiblingConnectionWhere {
  AND: [ElementPrevSiblingConnectionWhere!]
  NOT: ElementPrevSiblingConnectionWhere
  OR: [ElementPrevSiblingConnectionWhere!]
  node: ElementWhere
}

input ElementPrevSiblingCreateFieldInput {
  node: ElementCreateInput!
}

input ElementPrevSiblingDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementPrevSiblingConnectionWhere
}

input ElementPrevSiblingDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementPrevSiblingConnectionWhere
}

input ElementPrevSiblingFieldInput {
  connect: ElementPrevSiblingConnectFieldInput
  connectOrCreate: ElementPrevSiblingConnectOrCreateFieldInput
  create: ElementPrevSiblingCreateFieldInput
}

input ElementPrevSiblingNodeAggregationWhereInput {
  AND: [ElementPrevSiblingNodeAggregationWhereInput!]
  NOT: ElementPrevSiblingNodeAggregationWhereInput
  OR: [ElementPrevSiblingNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type ElementPrevSiblingRelationship {
  cursor: String!
  node: Element!
}

input ElementPrevSiblingUpdateConnectionInput {
  node: ElementUpdateInput
}

input ElementPrevSiblingUpdateFieldInput {
  connect: ElementPrevSiblingConnectFieldInput
  connectOrCreate: ElementPrevSiblingConnectOrCreateFieldInput
  create: ElementPrevSiblingCreateFieldInput
  delete: ElementPrevSiblingDeleteFieldInput
  disconnect: ElementPrevSiblingDisconnectFieldInput
  update: ElementPrevSiblingUpdateConnectionInput
  where: ElementPrevSiblingConnectionWhere
}

type ElementPropPropsAggregationSelection {
  count: Int!
  node: ElementPropPropsNodeAggregateSelection
}

type ElementPropPropsNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ElementPropsAggregateInput {
  AND: [ElementPropsAggregateInput!]
  NOT: ElementPropsAggregateInput
  OR: [ElementPropsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementPropsNodeAggregationWhereInput
}

input ElementPropsConnectFieldInput {
  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: PropConnectWhere
}

input ElementPropsConnectOrCreateFieldInput {
  onCreate: ElementPropsConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input ElementPropsConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type ElementPropsConnection {
  edges: [ElementPropsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPropsConnectionSort {
  node: PropSort
}

input ElementPropsConnectionWhere {
  AND: [ElementPropsConnectionWhere!]
  NOT: ElementPropsConnectionWhere
  OR: [ElementPropsConnectionWhere!]
  node: PropWhere
}

input ElementPropsCreateFieldInput {
  node: PropCreateInput!
}

input ElementPropsDeleteFieldInput {
  where: ElementPropsConnectionWhere
}

input ElementPropsDisconnectFieldInput {
  where: ElementPropsConnectionWhere
}

input ElementPropsFieldInput {
  connect: ElementPropsConnectFieldInput
  connectOrCreate: ElementPropsConnectOrCreateFieldInput
  create: ElementPropsCreateFieldInput
}

input ElementPropsNodeAggregationWhereInput {
  AND: [ElementPropsNodeAggregationWhereInput!]
  NOT: ElementPropsNodeAggregationWhereInput
  OR: [ElementPropsNodeAggregationWhereInput!]
  data_AVERAGE_LENGTH_EQUAL: Float
  data_AVERAGE_LENGTH_GT: Float
  data_AVERAGE_LENGTH_GTE: Float
  data_AVERAGE_LENGTH_LT: Float
  data_AVERAGE_LENGTH_LTE: Float
  data_LONGEST_LENGTH_EQUAL: Int
  data_LONGEST_LENGTH_GT: Int
  data_LONGEST_LENGTH_GTE: Int
  data_LONGEST_LENGTH_LT: Int
  data_LONGEST_LENGTH_LTE: Int
  data_SHORTEST_LENGTH_EQUAL: Int
  data_SHORTEST_LENGTH_GT: Int
  data_SHORTEST_LENGTH_GTE: Int
  data_SHORTEST_LENGTH_LT: Int
  data_SHORTEST_LENGTH_LTE: Int
}

type ElementPropsRelationship {
  cursor: String!
  node: Prop!
}

input ElementPropsUpdateConnectionInput {
  node: PropUpdateInput
}

input ElementPropsUpdateFieldInput {
  connect: ElementPropsConnectFieldInput
  connectOrCreate: ElementPropsConnectOrCreateFieldInput
  create: ElementPropsCreateFieldInput
  delete: ElementPropsDeleteFieldInput
  disconnect: ElementPropsDisconnectFieldInput
  update: ElementPropsUpdateConnectionInput
  where: ElementPropsConnectionWhere
}

input ElementRelationInput {
  childMapperComponent: ElementChildMapperComponentCreateFieldInput
  childMapperPreviousSibling: ElementChildMapperPreviousSiblingCreateFieldInput
  firstChild: ElementFirstChildCreateFieldInput
  nextSibling: ElementNextSiblingCreateFieldInput
  page: ElementPageCreateFieldInput
  parent: ElementParentCreateFieldInput
  parentComponent: ElementParentComponentCreateFieldInput
  postRenderAction: ElementPostRenderActionCreateFieldInput
  preRenderAction: ElementPreRenderActionCreateFieldInput
  prevSibling: ElementPrevSiblingCreateFieldInput
  props: ElementPropsCreateFieldInput
  renderAtomType: ElementRenderAtomTypeCreateFieldInput
  renderComponentType: ElementRenderComponentTypeCreateFieldInput
}

input ElementRenderAtomTypeAggregateInput {
  AND: [ElementRenderAtomTypeAggregateInput!]
  NOT: ElementRenderAtomTypeAggregateInput
  OR: [ElementRenderAtomTypeAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementRenderAtomTypeNodeAggregationWhereInput
}

input ElementRenderAtomTypeConnectFieldInput {
  connect: AtomConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: AtomConnectWhere
}

input ElementRenderAtomTypeConnectOrCreateFieldInput {
  onCreate: ElementRenderAtomTypeConnectOrCreateFieldInputOnCreate!
  where: AtomConnectOrCreateWhere!
}

input ElementRenderAtomTypeConnectOrCreateFieldInputOnCreate {
  node: AtomOnCreateInput!
}

type ElementRenderAtomTypeConnection {
  edges: [ElementRenderAtomTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementRenderAtomTypeConnectionSort {
  node: AtomSort
}

input ElementRenderAtomTypeConnectionWhere {
  AND: [ElementRenderAtomTypeConnectionWhere!]
  NOT: ElementRenderAtomTypeConnectionWhere
  OR: [ElementRenderAtomTypeConnectionWhere!]
  node: AtomWhere
}

input ElementRenderAtomTypeCreateFieldInput {
  node: AtomCreateInput!
}

input ElementRenderAtomTypeDeleteFieldInput {
  delete: AtomDeleteInput
  where: ElementRenderAtomTypeConnectionWhere
}

input ElementRenderAtomTypeDisconnectFieldInput {
  disconnect: AtomDisconnectInput
  where: ElementRenderAtomTypeConnectionWhere
}

input ElementRenderAtomTypeFieldInput {
  connect: ElementRenderAtomTypeConnectFieldInput
  connectOrCreate: ElementRenderAtomTypeConnectOrCreateFieldInput
  create: ElementRenderAtomTypeCreateFieldInput
}

input ElementRenderAtomTypeNodeAggregationWhereInput {
  AND: [ElementRenderAtomTypeNodeAggregationWhereInput!]
  NOT: ElementRenderAtomTypeNodeAggregationWhereInput
  OR: [ElementRenderAtomTypeNodeAggregationWhereInput!]
  externalCssSource_AVERAGE_LENGTH_EQUAL: Float
  externalCssSource_AVERAGE_LENGTH_GT: Float
  externalCssSource_AVERAGE_LENGTH_GTE: Float
  externalCssSource_AVERAGE_LENGTH_LT: Float
  externalCssSource_AVERAGE_LENGTH_LTE: Float
  externalCssSource_LONGEST_LENGTH_EQUAL: Int
  externalCssSource_LONGEST_LENGTH_GT: Int
  externalCssSource_LONGEST_LENGTH_GTE: Int
  externalCssSource_LONGEST_LENGTH_LT: Int
  externalCssSource_LONGEST_LENGTH_LTE: Int
  externalCssSource_SHORTEST_LENGTH_EQUAL: Int
  externalCssSource_SHORTEST_LENGTH_GT: Int
  externalCssSource_SHORTEST_LENGTH_GTE: Int
  externalCssSource_SHORTEST_LENGTH_LT: Int
  externalCssSource_SHORTEST_LENGTH_LTE: Int
  externalJsSource_AVERAGE_LENGTH_EQUAL: Float
  externalJsSource_AVERAGE_LENGTH_GT: Float
  externalJsSource_AVERAGE_LENGTH_GTE: Float
  externalJsSource_AVERAGE_LENGTH_LT: Float
  externalJsSource_AVERAGE_LENGTH_LTE: Float
  externalJsSource_LONGEST_LENGTH_EQUAL: Int
  externalJsSource_LONGEST_LENGTH_GT: Int
  externalJsSource_LONGEST_LENGTH_GTE: Int
  externalJsSource_LONGEST_LENGTH_LT: Int
  externalJsSource_LONGEST_LENGTH_LTE: Int
  externalJsSource_SHORTEST_LENGTH_EQUAL: Int
  externalJsSource_SHORTEST_LENGTH_GT: Int
  externalJsSource_SHORTEST_LENGTH_GTE: Int
  externalJsSource_SHORTEST_LENGTH_LT: Int
  externalJsSource_SHORTEST_LENGTH_LTE: Int
  externalSourceType_AVERAGE_LENGTH_EQUAL: Float
  externalSourceType_AVERAGE_LENGTH_GT: Float
  externalSourceType_AVERAGE_LENGTH_GTE: Float
  externalSourceType_AVERAGE_LENGTH_LT: Float
  externalSourceType_AVERAGE_LENGTH_LTE: Float
  externalSourceType_LONGEST_LENGTH_EQUAL: Int
  externalSourceType_LONGEST_LENGTH_GT: Int
  externalSourceType_LONGEST_LENGTH_GTE: Int
  externalSourceType_LONGEST_LENGTH_LT: Int
  externalSourceType_LONGEST_LENGTH_LTE: Int
  externalSourceType_SHORTEST_LENGTH_EQUAL: Int
  externalSourceType_SHORTEST_LENGTH_GT: Int
  externalSourceType_SHORTEST_LENGTH_GTE: Int
  externalSourceType_SHORTEST_LENGTH_LT: Int
  externalSourceType_SHORTEST_LENGTH_LTE: Int
  icon_AVERAGE_LENGTH_EQUAL: Float
  icon_AVERAGE_LENGTH_GT: Float
  icon_AVERAGE_LENGTH_GTE: Float
  icon_AVERAGE_LENGTH_LT: Float
  icon_AVERAGE_LENGTH_LTE: Float
  icon_LONGEST_LENGTH_EQUAL: Int
  icon_LONGEST_LENGTH_GT: Int
  icon_LONGEST_LENGTH_GTE: Int
  icon_LONGEST_LENGTH_LT: Int
  icon_LONGEST_LENGTH_LTE: Int
  icon_SHORTEST_LENGTH_EQUAL: Int
  icon_SHORTEST_LENGTH_GT: Int
  icon_SHORTEST_LENGTH_GTE: Int
  icon_SHORTEST_LENGTH_LT: Int
  icon_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type ElementRenderAtomTypeRelationship {
  cursor: String!
  node: Atom!
}

input ElementRenderAtomTypeUpdateConnectionInput {
  node: AtomUpdateInput
}

input ElementRenderAtomTypeUpdateFieldInput {
  connect: ElementRenderAtomTypeConnectFieldInput
  connectOrCreate: ElementRenderAtomTypeConnectOrCreateFieldInput
  create: ElementRenderAtomTypeCreateFieldInput
  delete: ElementRenderAtomTypeDeleteFieldInput
  disconnect: ElementRenderAtomTypeDisconnectFieldInput
  update: ElementRenderAtomTypeUpdateConnectionInput
  where: ElementRenderAtomTypeConnectionWhere
}

input ElementRenderComponentTypeAggregateInput {
  AND: [ElementRenderComponentTypeAggregateInput!]
  NOT: ElementRenderComponentTypeAggregateInput
  OR: [ElementRenderComponentTypeAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementRenderComponentTypeNodeAggregationWhereInput
}

input ElementRenderComponentTypeConnectFieldInput {
  connect: ComponentConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ComponentConnectWhere
}

input ElementRenderComponentTypeConnectOrCreateFieldInput {
  onCreate: ElementRenderComponentTypeConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input ElementRenderComponentTypeConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type ElementRenderComponentTypeConnection {
  edges: [ElementRenderComponentTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementRenderComponentTypeConnectionSort {
  node: ComponentSort
}

input ElementRenderComponentTypeConnectionWhere {
  AND: [ElementRenderComponentTypeConnectionWhere!]
  NOT: ElementRenderComponentTypeConnectionWhere
  OR: [ElementRenderComponentTypeConnectionWhere!]
  node: ComponentWhere
}

input ElementRenderComponentTypeCreateFieldInput {
  node: ComponentCreateInput!
}

input ElementRenderComponentTypeDeleteFieldInput {
  delete: ComponentDeleteInput
  where: ElementRenderComponentTypeConnectionWhere
}

input ElementRenderComponentTypeDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: ElementRenderComponentTypeConnectionWhere
}

input ElementRenderComponentTypeFieldInput {
  connect: ElementRenderComponentTypeConnectFieldInput
  connectOrCreate: ElementRenderComponentTypeConnectOrCreateFieldInput
  create: ElementRenderComponentTypeCreateFieldInput
}

input ElementRenderComponentTypeNodeAggregationWhereInput {
  AND: [ElementRenderComponentTypeNodeAggregationWhereInput!]
  NOT: ElementRenderComponentTypeNodeAggregationWhereInput
  OR: [ElementRenderComponentTypeNodeAggregationWhereInput!]
  keyGenerator_AVERAGE_LENGTH_EQUAL: Float
  keyGenerator_AVERAGE_LENGTH_GT: Float
  keyGenerator_AVERAGE_LENGTH_GTE: Float
  keyGenerator_AVERAGE_LENGTH_LT: Float
  keyGenerator_AVERAGE_LENGTH_LTE: Float
  keyGenerator_LONGEST_LENGTH_EQUAL: Int
  keyGenerator_LONGEST_LENGTH_GT: Int
  keyGenerator_LONGEST_LENGTH_GTE: Int
  keyGenerator_LONGEST_LENGTH_LT: Int
  keyGenerator_LONGEST_LENGTH_LTE: Int
  keyGenerator_SHORTEST_LENGTH_EQUAL: Int
  keyGenerator_SHORTEST_LENGTH_GT: Int
  keyGenerator_SHORTEST_LENGTH_GTE: Int
  keyGenerator_SHORTEST_LENGTH_LT: Int
  keyGenerator_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type ElementRenderComponentTypeRelationship {
  cursor: String!
  node: Component!
}

input ElementRenderComponentTypeUpdateConnectionInput {
  node: ComponentUpdateInput
}

input ElementRenderComponentTypeUpdateFieldInput {
  connect: ElementRenderComponentTypeConnectFieldInput
  connectOrCreate: ElementRenderComponentTypeConnectOrCreateFieldInput
  create: ElementRenderComponentTypeCreateFieldInput
  delete: ElementRenderComponentTypeDeleteFieldInput
  disconnect: ElementRenderComponentTypeDisconnectFieldInput
  update: ElementRenderComponentTypeUpdateConnectionInput
  where: ElementRenderComponentTypeConnectionWhere
}

"""
Fields to sort Elements by. The order in which sorts are applied is not guaranteed when specifying many fields in one ElementSort object.
"""
input ElementSort {
  childMapperPropKey: SortDirection
  customCss: SortDirection
  guiCss: SortDirection
  id: SortDirection
  name: SortDirection
  propTransformationJs: SortDirection
  renderForEachPropKey: SortDirection
  renderIfExpression: SortDirection
}

"""
Allows picking an element from the current tree
Is passed to the rendered element as a React node
Prop values for this type have the shape of TypedProp in order to
be distinguished from other element types.
Comparison between different element types:
- RenderPropType: Component select box, results it '(props) => ReactNode' value
- ReactNodeType: Component select box, results it 'ReactNode' value
- ElementType: Current tree element select box, results it 'ReactNode' value
"""
type ElementType implements IBaseType {
  """
  Allows scoping the type of element to only descendants, children or all elements
  """
  elementKind: ElementTypeKind!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ElementTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type ElementTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ElementTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
}

input ElementTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input ElementTypeConnectOrCreateWhere {
  node: ElementTypeUniqueWhere!
}

input ElementTypeConnectWhere {
  node: ElementTypeWhere!
}

input ElementTypeCreateInput {
  elementKind: ElementTypeKind!
  id: ID!
  kind: TypeKind! = ElementType
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input ElementTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
}

input ElementTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type ElementTypeEdge {
  cursor: String!
  node: ElementType!
}

enum ElementTypeKind {
  AllElements
  ChildrenOnly
  DescendantsOnly
  ExcludeDescendantsElements
}

input ElementTypeOnCreateInput {
  elementKind: ElementTypeKind!
  id: ID!
  kind: TypeKind! = ElementType
  name: String!
}

input ElementTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ElementTypeSort objects to sort ElementTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ElementTypeSort!]
}

input ElementTypeOwnerAggregateInput {
  AND: [ElementTypeOwnerAggregateInput!]
  NOT: ElementTypeOwnerAggregateInput
  OR: [ElementTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementTypeOwnerNodeAggregationWhereInput
}

input ElementTypeOwnerNodeAggregationWhereInput {
  AND: [ElementTypeOwnerNodeAggregationWhereInput!]
  NOT: ElementTypeOwnerNodeAggregationWhereInput
  OR: [ElementTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input ElementTypeRelationInput {
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort ElementTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ElementTypeSort object.
"""
input ElementTypeSort {
  elementKind: SortDirection
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ElementTypeUniqueWhere {
  id: ID
}

input ElementTypeUpdateInput {
  elementKind: ElementTypeKind
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type ElementTypeUserOwnerAggregationSelection {
  count: Int!
  node: ElementTypeUserOwnerNodeAggregateSelection
}

type ElementTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ElementTypeWhere {
  AND: [ElementTypeWhere!]
  NOT: ElementTypeWhere
  OR: [ElementTypeWhere!]
  elementKind: ElementTypeKind
  elementKind_IN: [ElementTypeKind!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ElementTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ElementTypesConnection {
  edges: [ElementTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementUniqueWhere {
  id: ID
}

input ElementUpdateInput {
  childMapperComponent: ElementChildMapperComponentUpdateFieldInput
  childMapperPreviousSibling: ElementChildMapperPreviousSiblingUpdateFieldInput
  childMapperPropKey: String
  customCss: String
  firstChild: ElementFirstChildUpdateFieldInput
  guiCss: String
  id: ID
  name: String
  nextSibling: ElementNextSiblingUpdateFieldInput
  page: ElementPageUpdateFieldInput
  parent: ElementParentUpdateFieldInput
  parentComponent: ElementParentComponentUpdateFieldInput
  postRenderAction: ElementPostRenderActionUpdateFieldInput
  preRenderAction: ElementPreRenderActionUpdateFieldInput
  prevSibling: ElementPrevSiblingUpdateFieldInput
  propTransformationJs: String
  props: ElementPropsUpdateFieldInput
  renderAtomType: ElementRenderAtomTypeUpdateFieldInput
  renderComponentType: ElementRenderComponentTypeUpdateFieldInput
  renderForEachPropKey: String
  renderIfExpression: String
}

input ElementWhere {
  AND: [ElementWhere!]
  NOT: ElementWhere
  OR: [ElementWhere!]
  childMapperComponent: ComponentWhere
  childMapperComponentAggregate: ElementChildMapperComponentAggregateInput
  childMapperComponentConnection: ElementChildMapperComponentConnectionWhere
  childMapperComponentConnection_NOT: ElementChildMapperComponentConnectionWhere
  childMapperComponent_NOT: ComponentWhere
  childMapperPreviousSibling: ElementWhere
  childMapperPreviousSiblingAggregate: ElementChildMapperPreviousSiblingAggregateInput
  childMapperPreviousSiblingConnection: ElementChildMapperPreviousSiblingConnectionWhere
  childMapperPreviousSiblingConnection_NOT: ElementChildMapperPreviousSiblingConnectionWhere
  childMapperPreviousSibling_NOT: ElementWhere
  childMapperPropKey: String
  childMapperPropKey_CONTAINS: String
  childMapperPropKey_ENDS_WITH: String
  childMapperPropKey_IN: [String]
  childMapperPropKey_MATCHES: String
  childMapperPropKey_STARTS_WITH: String
  customCss: String
  customCss_CONTAINS: String
  customCss_ENDS_WITH: String
  customCss_IN: [String]
  customCss_MATCHES: String
  customCss_STARTS_WITH: String
  firstChild: ElementWhere
  firstChildAggregate: ElementFirstChildAggregateInput
  firstChildConnection: ElementFirstChildConnectionWhere
  firstChildConnection_NOT: ElementFirstChildConnectionWhere
  firstChild_NOT: ElementWhere
  guiCss: String
  guiCss_CONTAINS: String
  guiCss_ENDS_WITH: String
  guiCss_IN: [String]
  guiCss_MATCHES: String
  guiCss_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  nextSibling: ElementWhere
  nextSiblingAggregate: ElementNextSiblingAggregateInput
  nextSiblingConnection: ElementNextSiblingConnectionWhere
  nextSiblingConnection_NOT: ElementNextSiblingConnectionWhere
  nextSibling_NOT: ElementWhere
  page: PageWhere
  pageAggregate: ElementPageAggregateInput
  pageConnection: ElementPageConnectionWhere
  pageConnection_NOT: ElementPageConnectionWhere
  page_NOT: PageWhere
  parent: ElementWhere
  parentAggregate: ElementParentAggregateInput
  parentComponent: ComponentWhere
  parentComponentAggregate: ElementParentComponentAggregateInput
  parentComponentConnection: ElementParentComponentConnectionWhere
  parentComponentConnection_NOT: ElementParentComponentConnectionWhere
  parentComponent_NOT: ComponentWhere
  parentConnection: ElementParentConnectionWhere
  parentConnection_NOT: ElementParentConnectionWhere
  parent_NOT: ElementWhere
  postRenderActionConnection: ElementPostRenderActionConnectionWhere
  postRenderActionConnection_NOT: ElementPostRenderActionConnectionWhere
  preRenderActionConnection: ElementPreRenderActionConnectionWhere
  preRenderActionConnection_NOT: ElementPreRenderActionConnectionWhere
  prevSibling: ElementWhere
  prevSiblingAggregate: ElementPrevSiblingAggregateInput
  prevSiblingConnection: ElementPrevSiblingConnectionWhere
  prevSiblingConnection_NOT: ElementPrevSiblingConnectionWhere
  prevSibling_NOT: ElementWhere
  propTransformationJs: String
  propTransformationJs_CONTAINS: String
  propTransformationJs_ENDS_WITH: String
  propTransformationJs_IN: [String]
  propTransformationJs_MATCHES: String
  propTransformationJs_STARTS_WITH: String
  props: PropWhere
  propsAggregate: ElementPropsAggregateInput
  propsConnection: ElementPropsConnectionWhere
  propsConnection_NOT: ElementPropsConnectionWhere
  props_NOT: PropWhere
  renderAtomType: AtomWhere
  renderAtomTypeAggregate: ElementRenderAtomTypeAggregateInput
  renderAtomTypeConnection: ElementRenderAtomTypeConnectionWhere
  renderAtomTypeConnection_NOT: ElementRenderAtomTypeConnectionWhere
  renderAtomType_NOT: AtomWhere
  renderComponentType: ComponentWhere
  renderComponentTypeAggregate: ElementRenderComponentTypeAggregateInput
  renderComponentTypeConnection: ElementRenderComponentTypeConnectionWhere
  renderComponentTypeConnection_NOT: ElementRenderComponentTypeConnectionWhere
  renderComponentType_NOT: ComponentWhere
  renderForEachPropKey: String
  renderForEachPropKey_CONTAINS: String
  renderForEachPropKey_ENDS_WITH: String
  renderForEachPropKey_IN: [String]
  renderForEachPropKey_MATCHES: String
  renderForEachPropKey_STARTS_WITH: String
  renderIfExpression: String
  renderIfExpression_CONTAINS: String
  renderIfExpression_ENDS_WITH: String
  renderIfExpression_IN: [String]
  renderIfExpression_MATCHES: String
  renderIfExpression_STARTS_WITH: String
}

type ElementsConnection {
  edges: [ElementEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows choosing one of a set of allowed values.
The value gets passed to the render pipe as a Enum Type Value id.
The actual value must be de-referenced by the id.
"""
type EnumType implements IBaseType {
  allowedValues(
    directed: Boolean = true
    options: EnumTypeValueOptions
    where: EnumTypeValueWhere
  ): [EnumTypeValue!]!
  allowedValuesAggregate(
    directed: Boolean = true
    where: EnumTypeValueWhere
  ): EnumTypeEnumTypeValueAllowedValuesAggregationSelection
  allowedValuesConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [EnumTypeAllowedValuesConnectionSort!]
    where: EnumTypeAllowedValuesConnectionWhere
  ): EnumTypeAllowedValuesConnection!
  fieldRefs(
    directed: Boolean = true
    options: FieldOptions
    where: FieldWhere
  ): [Field!]!
  fieldRefsAggregate(
    directed: Boolean = true
    where: FieldWhere
  ): EnumTypeFieldFieldRefsAggregationSelection
  fieldRefsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [EnumTypeFieldRefsConnectionSort!]
    where: EnumTypeFieldRefsConnectionWhere
  ): EnumTypeFieldRefsConnection!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): EnumTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type EnumTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input EnumTypeAllowedValuesAggregateInput {
  AND: [EnumTypeAllowedValuesAggregateInput!]
  NOT: EnumTypeAllowedValuesAggregateInput
  OR: [EnumTypeAllowedValuesAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EnumTypeAllowedValuesNodeAggregationWhereInput
}

input EnumTypeAllowedValuesConnectFieldInput {
  connect: [EnumTypeValueConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: EnumTypeValueConnectWhere
}

type EnumTypeAllowedValuesConnection {
  edges: [EnumTypeAllowedValuesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnumTypeAllowedValuesConnectionSort {
  node: EnumTypeValueSort
}

input EnumTypeAllowedValuesConnectionWhere {
  AND: [EnumTypeAllowedValuesConnectionWhere!]
  NOT: EnumTypeAllowedValuesConnectionWhere
  OR: [EnumTypeAllowedValuesConnectionWhere!]
  node: EnumTypeValueWhere
}

input EnumTypeAllowedValuesCreateFieldInput {
  node: EnumTypeValueCreateInput!
}

input EnumTypeAllowedValuesDeleteFieldInput {
  delete: EnumTypeValueDeleteInput
  where: EnumTypeAllowedValuesConnectionWhere
}

input EnumTypeAllowedValuesDisconnectFieldInput {
  disconnect: EnumTypeValueDisconnectInput
  where: EnumTypeAllowedValuesConnectionWhere
}

input EnumTypeAllowedValuesFieldInput {
  connect: [EnumTypeAllowedValuesConnectFieldInput!]
  create: [EnumTypeAllowedValuesCreateFieldInput!]
}

input EnumTypeAllowedValuesNodeAggregationWhereInput {
  AND: [EnumTypeAllowedValuesNodeAggregationWhereInput!]
  NOT: EnumTypeAllowedValuesNodeAggregationWhereInput
  OR: [EnumTypeAllowedValuesNodeAggregationWhereInput!]
  key_AVERAGE_LENGTH_EQUAL: Float
  key_AVERAGE_LENGTH_GT: Float
  key_AVERAGE_LENGTH_GTE: Float
  key_AVERAGE_LENGTH_LT: Float
  key_AVERAGE_LENGTH_LTE: Float
  key_LONGEST_LENGTH_EQUAL: Int
  key_LONGEST_LENGTH_GT: Int
  key_LONGEST_LENGTH_GTE: Int
  key_LONGEST_LENGTH_LT: Int
  key_LONGEST_LENGTH_LTE: Int
  key_SHORTEST_LENGTH_EQUAL: Int
  key_SHORTEST_LENGTH_GT: Int
  key_SHORTEST_LENGTH_GTE: Int
  key_SHORTEST_LENGTH_LT: Int
  key_SHORTEST_LENGTH_LTE: Int
  value_AVERAGE_LENGTH_EQUAL: Float
  value_AVERAGE_LENGTH_GT: Float
  value_AVERAGE_LENGTH_GTE: Float
  value_AVERAGE_LENGTH_LT: Float
  value_AVERAGE_LENGTH_LTE: Float
  value_LONGEST_LENGTH_EQUAL: Int
  value_LONGEST_LENGTH_GT: Int
  value_LONGEST_LENGTH_GTE: Int
  value_LONGEST_LENGTH_LT: Int
  value_LONGEST_LENGTH_LTE: Int
  value_SHORTEST_LENGTH_EQUAL: Int
  value_SHORTEST_LENGTH_GT: Int
  value_SHORTEST_LENGTH_GTE: Int
  value_SHORTEST_LENGTH_LT: Int
  value_SHORTEST_LENGTH_LTE: Int
}

type EnumTypeAllowedValuesRelationship {
  cursor: String!
  node: EnumTypeValue!
}

input EnumTypeAllowedValuesUpdateConnectionInput {
  node: EnumTypeValueUpdateInput
}

input EnumTypeAllowedValuesUpdateFieldInput {
  connect: [EnumTypeAllowedValuesConnectFieldInput!]
  create: [EnumTypeAllowedValuesCreateFieldInput!]
  delete: [EnumTypeAllowedValuesDeleteFieldInput!]
  disconnect: [EnumTypeAllowedValuesDisconnectFieldInput!]
  update: EnumTypeAllowedValuesUpdateConnectionInput
  where: EnumTypeAllowedValuesConnectionWhere
}

input EnumTypeConnectInput {
  allowedValues: [EnumTypeAllowedValuesConnectFieldInput!]
  fieldRefs: [EnumTypeFieldRefsConnectFieldInput!]
  owner: IBaseTypeOwnerConnectFieldInput
}

input EnumTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input EnumTypeConnectOrCreateWhere {
  node: EnumTypeUniqueWhere!
}

input EnumTypeConnectWhere {
  node: EnumTypeWhere!
}

input EnumTypeCreateInput {
  allowedValues: EnumTypeAllowedValuesFieldInput
  fieldRefs: EnumTypeFieldRefsFieldInput
  id: ID!
  kind: TypeKind! = EnumType
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input EnumTypeDeleteInput {
  allowedValues: [EnumTypeAllowedValuesDeleteFieldInput!]
  fieldRefs: [EnumTypeFieldRefsDeleteFieldInput!]
  owner: IBaseTypeOwnerDeleteFieldInput
}

input EnumTypeDisconnectInput {
  allowedValues: [EnumTypeAllowedValuesDisconnectFieldInput!]
  fieldRefs: [EnumTypeFieldRefsDisconnectFieldInput!]
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type EnumTypeEdge {
  cursor: String!
  node: EnumType!
}

type EnumTypeEnumTypeValueAllowedValuesAggregationSelection {
  count: Int!
  node: EnumTypeEnumTypeValueAllowedValuesNodeAggregateSelection
}

type EnumTypeEnumTypeValueAllowedValuesNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  key: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNonNullable!
}

type EnumTypeFieldFieldRefsAggregationSelection {
  count: Int!
  node: EnumTypeFieldFieldRefsNodeAggregateSelection
}

type EnumTypeFieldFieldRefsNodeAggregateSelection {
  defaultValues: StringAggregateSelectionNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  key: StringAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  validationRules: StringAggregateSelectionNullable!
}

input EnumTypeFieldRefsAggregateInput {
  AND: [EnumTypeFieldRefsAggregateInput!]
  NOT: EnumTypeFieldRefsAggregateInput
  OR: [EnumTypeFieldRefsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EnumTypeFieldRefsNodeAggregationWhereInput
}

input EnumTypeFieldRefsConnectFieldInput {
  connect: [FieldConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: FieldConnectWhere
}

type EnumTypeFieldRefsConnection {
  edges: [EnumTypeFieldRefsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnumTypeFieldRefsConnectionSort {
  node: FieldSort
}

input EnumTypeFieldRefsConnectionWhere {
  AND: [EnumTypeFieldRefsConnectionWhere!]
  NOT: EnumTypeFieldRefsConnectionWhere
  OR: [EnumTypeFieldRefsConnectionWhere!]
  node: FieldWhere
}

input EnumTypeFieldRefsCreateFieldInput {
  node: FieldCreateInput!
}

input EnumTypeFieldRefsDeleteFieldInput {
  delete: FieldDeleteInput
  where: EnumTypeFieldRefsConnectionWhere
}

input EnumTypeFieldRefsDisconnectFieldInput {
  disconnect: FieldDisconnectInput
  where: EnumTypeFieldRefsConnectionWhere
}

input EnumTypeFieldRefsFieldInput {
  connect: [EnumTypeFieldRefsConnectFieldInput!]
  create: [EnumTypeFieldRefsCreateFieldInput!]
}

input EnumTypeFieldRefsNodeAggregationWhereInput {
  AND: [EnumTypeFieldRefsNodeAggregationWhereInput!]
  NOT: EnumTypeFieldRefsNodeAggregationWhereInput
  OR: [EnumTypeFieldRefsNodeAggregationWhereInput!]
  defaultValues_AVERAGE_LENGTH_EQUAL: Float
  defaultValues_AVERAGE_LENGTH_GT: Float
  defaultValues_AVERAGE_LENGTH_GTE: Float
  defaultValues_AVERAGE_LENGTH_LT: Float
  defaultValues_AVERAGE_LENGTH_LTE: Float
  defaultValues_LONGEST_LENGTH_EQUAL: Int
  defaultValues_LONGEST_LENGTH_GT: Int
  defaultValues_LONGEST_LENGTH_GTE: Int
  defaultValues_LONGEST_LENGTH_LT: Int
  defaultValues_LONGEST_LENGTH_LTE: Int
  defaultValues_SHORTEST_LENGTH_EQUAL: Int
  defaultValues_SHORTEST_LENGTH_GT: Int
  defaultValues_SHORTEST_LENGTH_GTE: Int
  defaultValues_SHORTEST_LENGTH_LT: Int
  defaultValues_SHORTEST_LENGTH_LTE: Int
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  key_AVERAGE_LENGTH_EQUAL: Float
  key_AVERAGE_LENGTH_GT: Float
  key_AVERAGE_LENGTH_GTE: Float
  key_AVERAGE_LENGTH_LT: Float
  key_AVERAGE_LENGTH_LTE: Float
  key_LONGEST_LENGTH_EQUAL: Int
  key_LONGEST_LENGTH_GT: Int
  key_LONGEST_LENGTH_GTE: Int
  key_LONGEST_LENGTH_LT: Int
  key_LONGEST_LENGTH_LTE: Int
  key_SHORTEST_LENGTH_EQUAL: Int
  key_SHORTEST_LENGTH_GT: Int
  key_SHORTEST_LENGTH_GTE: Int
  key_SHORTEST_LENGTH_LT: Int
  key_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  validationRules_AVERAGE_LENGTH_EQUAL: Float
  validationRules_AVERAGE_LENGTH_GT: Float
  validationRules_AVERAGE_LENGTH_GTE: Float
  validationRules_AVERAGE_LENGTH_LT: Float
  validationRules_AVERAGE_LENGTH_LTE: Float
  validationRules_LONGEST_LENGTH_EQUAL: Int
  validationRules_LONGEST_LENGTH_GT: Int
  validationRules_LONGEST_LENGTH_GTE: Int
  validationRules_LONGEST_LENGTH_LT: Int
  validationRules_LONGEST_LENGTH_LTE: Int
  validationRules_SHORTEST_LENGTH_EQUAL: Int
  validationRules_SHORTEST_LENGTH_GT: Int
  validationRules_SHORTEST_LENGTH_GTE: Int
  validationRules_SHORTEST_LENGTH_LT: Int
  validationRules_SHORTEST_LENGTH_LTE: Int
}

type EnumTypeFieldRefsRelationship {
  cursor: String!
  node: Field!
}

input EnumTypeFieldRefsUpdateConnectionInput {
  node: FieldUpdateInput
}

input EnumTypeFieldRefsUpdateFieldInput {
  connect: [EnumTypeFieldRefsConnectFieldInput!]
  create: [EnumTypeFieldRefsCreateFieldInput!]
  delete: [EnumTypeFieldRefsDeleteFieldInput!]
  disconnect: [EnumTypeFieldRefsDisconnectFieldInput!]
  update: EnumTypeFieldRefsUpdateConnectionInput
  where: EnumTypeFieldRefsConnectionWhere
}

input EnumTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = EnumType
  name: String!
}

input EnumTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more EnumTypeSort objects to sort EnumTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [EnumTypeSort!]
}

input EnumTypeOwnerAggregateInput {
  AND: [EnumTypeOwnerAggregateInput!]
  NOT: EnumTypeOwnerAggregateInput
  OR: [EnumTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EnumTypeOwnerNodeAggregationWhereInput
}

input EnumTypeOwnerNodeAggregationWhereInput {
  AND: [EnumTypeOwnerNodeAggregationWhereInput!]
  NOT: EnumTypeOwnerNodeAggregationWhereInput
  OR: [EnumTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input EnumTypeRelationInput {
  allowedValues: [EnumTypeAllowedValuesCreateFieldInput!]
  fieldRefs: [EnumTypeFieldRefsCreateFieldInput!]
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort EnumTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one EnumTypeSort object.
"""
input EnumTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input EnumTypeUniqueWhere {
  id: ID
}

input EnumTypeUpdateInput {
  allowedValues: [EnumTypeAllowedValuesUpdateFieldInput!]
  fieldRefs: [EnumTypeFieldRefsUpdateFieldInput!]
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type EnumTypeUserOwnerAggregationSelection {
  count: Int!
  node: EnumTypeUserOwnerNodeAggregateSelection
}

type EnumTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

type EnumTypeValue {
  enumType(
    directed: Boolean = true
    options: EnumTypeOptions
    where: EnumTypeWhere
  ): EnumType
  enumTypeAggregate(
    directed: Boolean = true
    where: EnumTypeWhere
  ): EnumTypeValueEnumTypeEnumTypeAggregationSelection
  enumTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [EnumTypeValueEnumTypeConnectionSort!]
    where: EnumTypeValueEnumTypeConnectionWhere
  ): EnumTypeValueEnumTypeConnection!
  id: ID!
  key: String!
  value: String!
}

type EnumTypeValueAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  key: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNonNullable!
}

input EnumTypeValueConnectInput {
  enumType: EnumTypeValueEnumTypeConnectFieldInput
}

input EnumTypeValueConnectOrCreateInput {
  enumType: EnumTypeValueEnumTypeConnectOrCreateFieldInput
}

input EnumTypeValueConnectWhere {
  node: EnumTypeValueWhere!
}

input EnumTypeValueCreateInput {
  enumType: EnumTypeValueEnumTypeFieldInput
  id: ID!
  key: String!
  value: String!
}

input EnumTypeValueDeleteInput {
  enumType: EnumTypeValueEnumTypeDeleteFieldInput
}

input EnumTypeValueDisconnectInput {
  enumType: EnumTypeValueEnumTypeDisconnectFieldInput
}

type EnumTypeValueEdge {
  cursor: String!
  node: EnumTypeValue!
}

input EnumTypeValueEnumTypeAggregateInput {
  AND: [EnumTypeValueEnumTypeAggregateInput!]
  NOT: EnumTypeValueEnumTypeAggregateInput
  OR: [EnumTypeValueEnumTypeAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EnumTypeValueEnumTypeNodeAggregationWhereInput
}

input EnumTypeValueEnumTypeConnectFieldInput {
  connect: EnumTypeConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: EnumTypeConnectWhere
}

input EnumTypeValueEnumTypeConnectOrCreateFieldInput {
  onCreate: EnumTypeValueEnumTypeConnectOrCreateFieldInputOnCreate!
  where: EnumTypeConnectOrCreateWhere!
}

input EnumTypeValueEnumTypeConnectOrCreateFieldInputOnCreate {
  node: EnumTypeOnCreateInput!
}

type EnumTypeValueEnumTypeConnection {
  edges: [EnumTypeValueEnumTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnumTypeValueEnumTypeConnectionSort {
  node: EnumTypeSort
}

input EnumTypeValueEnumTypeConnectionWhere {
  AND: [EnumTypeValueEnumTypeConnectionWhere!]
  NOT: EnumTypeValueEnumTypeConnectionWhere
  OR: [EnumTypeValueEnumTypeConnectionWhere!]
  node: EnumTypeWhere
}

input EnumTypeValueEnumTypeCreateFieldInput {
  node: EnumTypeCreateInput!
}

input EnumTypeValueEnumTypeDeleteFieldInput {
  delete: EnumTypeDeleteInput
  where: EnumTypeValueEnumTypeConnectionWhere
}

input EnumTypeValueEnumTypeDisconnectFieldInput {
  disconnect: EnumTypeDisconnectInput
  where: EnumTypeValueEnumTypeConnectionWhere
}

type EnumTypeValueEnumTypeEnumTypeAggregationSelection {
  count: Int!
  node: EnumTypeValueEnumTypeEnumTypeNodeAggregateSelection
}

type EnumTypeValueEnumTypeEnumTypeNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input EnumTypeValueEnumTypeFieldInput {
  connect: EnumTypeValueEnumTypeConnectFieldInput
  connectOrCreate: EnumTypeValueEnumTypeConnectOrCreateFieldInput
  create: EnumTypeValueEnumTypeCreateFieldInput
}

input EnumTypeValueEnumTypeNodeAggregationWhereInput {
  AND: [EnumTypeValueEnumTypeNodeAggregationWhereInput!]
  NOT: EnumTypeValueEnumTypeNodeAggregationWhereInput
  OR: [EnumTypeValueEnumTypeNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type EnumTypeValueEnumTypeRelationship {
  cursor: String!
  node: EnumType!
}

input EnumTypeValueEnumTypeUpdateConnectionInput {
  node: EnumTypeUpdateInput
}

input EnumTypeValueEnumTypeUpdateFieldInput {
  connect: EnumTypeValueEnumTypeConnectFieldInput
  connectOrCreate: EnumTypeValueEnumTypeConnectOrCreateFieldInput
  create: EnumTypeValueEnumTypeCreateFieldInput
  delete: EnumTypeValueEnumTypeDeleteFieldInput
  disconnect: EnumTypeValueEnumTypeDisconnectFieldInput
  update: EnumTypeValueEnumTypeUpdateConnectionInput
  where: EnumTypeValueEnumTypeConnectionWhere
}

input EnumTypeValueOptions {
  limit: Int
  offset: Int

  """
  Specify one or more EnumTypeValueSort objects to sort EnumTypeValues by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [EnumTypeValueSort!]
}

input EnumTypeValueRelationInput {
  enumType: EnumTypeValueEnumTypeCreateFieldInput
}

"""
Fields to sort EnumTypeValues by. The order in which sorts are applied is not guaranteed when specifying many fields in one EnumTypeValueSort object.
"""
input EnumTypeValueSort {
  id: SortDirection
  key: SortDirection
  value: SortDirection
}

input EnumTypeValueUpdateInput {
  enumType: EnumTypeValueEnumTypeUpdateFieldInput
  id: ID
  key: String
  value: String
}

input EnumTypeValueWhere {
  AND: [EnumTypeValueWhere!]
  NOT: EnumTypeValueWhere
  OR: [EnumTypeValueWhere!]
  enumType: EnumTypeWhere
  enumTypeAggregate: EnumTypeValueEnumTypeAggregateInput
  enumTypeConnection: EnumTypeValueEnumTypeConnectionWhere
  enumTypeConnection_NOT: EnumTypeValueEnumTypeConnectionWhere
  enumType_NOT: EnumTypeWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  key: String
  key_CONTAINS: String
  key_ENDS_WITH: String
  key_IN: [String!]
  key_MATCHES: String
  key_STARTS_WITH: String
  value: String
  value_CONTAINS: String
  value_ENDS_WITH: String
  value_IN: [String!]
  value_MATCHES: String
  value_STARTS_WITH: String
}

type EnumTypeValuesConnection {
  edges: [EnumTypeValueEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnumTypeWhere {
  AND: [EnumTypeWhere!]
  NOT: EnumTypeWhere
  OR: [EnumTypeWhere!]
  allowedValuesAggregate: EnumTypeAllowedValuesAggregateInput

  """
  Return EnumTypes where all of the related EnumTypeAllowedValuesConnections match this filter
  """
  allowedValuesConnection_ALL: EnumTypeAllowedValuesConnectionWhere

  """
  Return EnumTypes where none of the related EnumTypeAllowedValuesConnections match this filter
  """
  allowedValuesConnection_NONE: EnumTypeAllowedValuesConnectionWhere

  """
  Return EnumTypes where one of the related EnumTypeAllowedValuesConnections match this filter
  """
  allowedValuesConnection_SINGLE: EnumTypeAllowedValuesConnectionWhere

  """
  Return EnumTypes where some of the related EnumTypeAllowedValuesConnections match this filter
  """
  allowedValuesConnection_SOME: EnumTypeAllowedValuesConnectionWhere

  """
  Return EnumTypes where all of the related EnumTypeValues match this filter
  """
  allowedValues_ALL: EnumTypeValueWhere

  """
  Return EnumTypes where none of the related EnumTypeValues match this filter
  """
  allowedValues_NONE: EnumTypeValueWhere

  """
  Return EnumTypes where one of the related EnumTypeValues match this filter
  """
  allowedValues_SINGLE: EnumTypeValueWhere

  """
  Return EnumTypes where some of the related EnumTypeValues match this filter
  """
  allowedValues_SOME: EnumTypeValueWhere
  fieldRefsAggregate: EnumTypeFieldRefsAggregateInput

  """
  Return EnumTypes where all of the related EnumTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_ALL: EnumTypeFieldRefsConnectionWhere

  """
  Return EnumTypes where none of the related EnumTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_NONE: EnumTypeFieldRefsConnectionWhere

  """
  Return EnumTypes where one of the related EnumTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_SINGLE: EnumTypeFieldRefsConnectionWhere

  """
  Return EnumTypes where some of the related EnumTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_SOME: EnumTypeFieldRefsConnectionWhere

  """
  Return EnumTypes where all of the related Fields match this filter
  """
  fieldRefs_ALL: FieldWhere

  """
  Return EnumTypes where none of the related Fields match this filter
  """
  fieldRefs_NONE: FieldWhere

  """
  Return EnumTypes where one of the related Fields match this filter
  """
  fieldRefs_SINGLE: FieldWhere

  """
  Return EnumTypes where some of the related Fields match this filter
  """
  fieldRefs_SOME: FieldWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: EnumTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type EnumTypesConnection {
  edges: [EnumTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Field {
  api(
    directed: Boolean = true
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): InterfaceType!
  apiAggregate(
    directed: Boolean = true
    where: InterfaceTypeWhere
  ): FieldInterfaceTypeApiAggregationSelection
  apiConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [FieldApiConnectionSort!]
    where: FieldApiConnectionWhere
  ): FieldApiConnection!
  defaultValues: String
  description: String
  fieldType(
    directed: Boolean = true
    options: IBaseTypeOptions
    where: IBaseTypeWhere
  ): IBaseType!
  fieldTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [FieldFieldTypeConnectionSort!]
    where: FieldFieldTypeConnectionWhere
  ): FieldFieldTypeConnection!
  id: ID!
  key: String!
  name: String
  nextSibling(
    directed: Boolean = true
    options: FieldOptions
    where: FieldWhere
  ): Field
  nextSiblingAggregate(
    directed: Boolean = true
    where: FieldWhere
  ): FieldFieldNextSiblingAggregationSelection
  nextSiblingConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [FieldNextSiblingConnectionSort!]
    where: FieldNextSiblingConnectionWhere
  ): FieldNextSiblingConnection!
  prevSibling(
    directed: Boolean = true
    options: FieldOptions
    where: FieldWhere
  ): Field
  prevSiblingAggregate(
    directed: Boolean = true
    where: FieldWhere
  ): FieldFieldPrevSiblingAggregationSelection
  prevSiblingConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [FieldPrevSiblingConnectionSort!]
    where: FieldPrevSiblingConnectionWhere
  ): FieldPrevSiblingConnection!
  validationRules: String
}

type FieldAggregateSelection {
  count: Int!
  defaultValues: StringAggregateSelectionNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  key: StringAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  validationRules: StringAggregateSelectionNullable!
}

input FieldApiAggregateInput {
  AND: [FieldApiAggregateInput!]
  NOT: FieldApiAggregateInput
  OR: [FieldApiAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: FieldApiNodeAggregationWhereInput
}

input FieldApiConnectFieldInput {
  connect: InterfaceTypeConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: InterfaceTypeConnectWhere
}

input FieldApiConnectOrCreateFieldInput {
  onCreate: FieldApiConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input FieldApiConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

type FieldApiConnection {
  edges: [FieldApiRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input FieldApiConnectionSort {
  node: InterfaceTypeSort
}

input FieldApiConnectionWhere {
  AND: [FieldApiConnectionWhere!]
  NOT: FieldApiConnectionWhere
  OR: [FieldApiConnectionWhere!]
  node: InterfaceTypeWhere
}

input FieldApiCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input FieldApiDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: FieldApiConnectionWhere
}

input FieldApiDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: FieldApiConnectionWhere
}

input FieldApiFieldInput {
  connect: FieldApiConnectFieldInput
  connectOrCreate: FieldApiConnectOrCreateFieldInput
  create: FieldApiCreateFieldInput
}

input FieldApiNodeAggregationWhereInput {
  AND: [FieldApiNodeAggregationWhereInput!]
  NOT: FieldApiNodeAggregationWhereInput
  OR: [FieldApiNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type FieldApiRelationship {
  cursor: String!
  node: InterfaceType!
}

input FieldApiUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input FieldApiUpdateFieldInput {
  connect: FieldApiConnectFieldInput
  connectOrCreate: FieldApiConnectOrCreateFieldInput
  create: FieldApiCreateFieldInput
  delete: FieldApiDeleteFieldInput
  disconnect: FieldApiDisconnectFieldInput
  update: FieldApiUpdateConnectionInput
  where: FieldApiConnectionWhere
}

input FieldConnectInput {
  api: FieldApiConnectFieldInput
  fieldType: FieldFieldTypeConnectFieldInput
  nextSibling: FieldNextSiblingConnectFieldInput
  prevSibling: FieldPrevSiblingConnectFieldInput
}

input FieldConnectOrCreateInput {
  api: FieldApiConnectOrCreateFieldInput
}

input FieldConnectWhere {
  node: FieldWhere!
}

input FieldCreateInput {
  api: FieldApiFieldInput
  defaultValues: String
  description: String
  fieldType: FieldFieldTypeFieldInput
  id: ID!
  key: String!
  name: String
  nextSibling: FieldNextSiblingFieldInput
  prevSibling: FieldPrevSiblingFieldInput
  validationRules: String
}

input FieldDeleteInput {
  api: FieldApiDeleteFieldInput
  fieldType: FieldFieldTypeDeleteFieldInput
  nextSibling: FieldNextSiblingDeleteFieldInput
  prevSibling: FieldPrevSiblingDeleteFieldInput
}

input FieldDisconnectInput {
  api: FieldApiDisconnectFieldInput
  fieldType: FieldFieldTypeDisconnectFieldInput
  nextSibling: FieldNextSiblingDisconnectFieldInput
  prevSibling: FieldPrevSiblingDisconnectFieldInput
}

type FieldEdge {
  cursor: String!
  node: Field!
}

type FieldFieldNextSiblingAggregationSelection {
  count: Int!
  node: FieldFieldNextSiblingNodeAggregateSelection
}

type FieldFieldNextSiblingNodeAggregateSelection {
  defaultValues: StringAggregateSelectionNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  key: StringAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  validationRules: StringAggregateSelectionNullable!
}

type FieldFieldPrevSiblingAggregationSelection {
  count: Int!
  node: FieldFieldPrevSiblingNodeAggregateSelection
}

type FieldFieldPrevSiblingNodeAggregateSelection {
  defaultValues: StringAggregateSelectionNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  key: StringAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  validationRules: StringAggregateSelectionNullable!
}

input FieldFieldTypeConnectFieldInput {
  connect: IBaseTypeConnectInput
  where: IBaseTypeConnectWhere
}

type FieldFieldTypeConnection {
  edges: [FieldFieldTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input FieldFieldTypeConnectionSort {
  node: IBaseTypeSort
}

input FieldFieldTypeConnectionWhere {
  AND: [FieldFieldTypeConnectionWhere!]
  NOT: FieldFieldTypeConnectionWhere
  OR: [FieldFieldTypeConnectionWhere!]
  node: IBaseTypeWhere
}

input FieldFieldTypeCreateFieldInput {
  node: IBaseTypeCreateInput!
}

input FieldFieldTypeDeleteFieldInput {
  delete: IBaseTypeDeleteInput
  where: FieldFieldTypeConnectionWhere
}

input FieldFieldTypeDisconnectFieldInput {
  disconnect: IBaseTypeDisconnectInput
  where: FieldFieldTypeConnectionWhere
}

input FieldFieldTypeFieldInput {
  connect: FieldFieldTypeConnectFieldInput
  create: FieldFieldTypeCreateFieldInput
}

type FieldFieldTypeRelationship {
  cursor: String!
  node: IBaseType!
}

input FieldFieldTypeUpdateConnectionInput {
  node: IBaseTypeUpdateInput
}

input FieldFieldTypeUpdateFieldInput {
  connect: FieldFieldTypeConnectFieldInput
  create: FieldFieldTypeCreateFieldInput
  delete: FieldFieldTypeDeleteFieldInput
  disconnect: FieldFieldTypeDisconnectFieldInput
  update: FieldFieldTypeUpdateConnectionInput
  where: FieldFieldTypeConnectionWhere
}

type FieldInterfaceTypeApiAggregationSelection {
  count: Int!
  node: FieldInterfaceTypeApiNodeAggregateSelection
}

type FieldInterfaceTypeApiNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input FieldNextSiblingAggregateInput {
  AND: [FieldNextSiblingAggregateInput!]
  NOT: FieldNextSiblingAggregateInput
  OR: [FieldNextSiblingAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: FieldNextSiblingNodeAggregationWhereInput
}

input FieldNextSiblingConnectFieldInput {
  connect: FieldConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: FieldConnectWhere
}

type FieldNextSiblingConnection {
  edges: [FieldNextSiblingRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input FieldNextSiblingConnectionSort {
  node: FieldSort
}

input FieldNextSiblingConnectionWhere {
  AND: [FieldNextSiblingConnectionWhere!]
  NOT: FieldNextSiblingConnectionWhere
  OR: [FieldNextSiblingConnectionWhere!]
  node: FieldWhere
}

input FieldNextSiblingCreateFieldInput {
  node: FieldCreateInput!
}

input FieldNextSiblingDeleteFieldInput {
  delete: FieldDeleteInput
  where: FieldNextSiblingConnectionWhere
}

input FieldNextSiblingDisconnectFieldInput {
  disconnect: FieldDisconnectInput
  where: FieldNextSiblingConnectionWhere
}

input FieldNextSiblingFieldInput {
  connect: FieldNextSiblingConnectFieldInput
  create: FieldNextSiblingCreateFieldInput
}

input FieldNextSiblingNodeAggregationWhereInput {
  AND: [FieldNextSiblingNodeAggregationWhereInput!]
  NOT: FieldNextSiblingNodeAggregationWhereInput
  OR: [FieldNextSiblingNodeAggregationWhereInput!]
  defaultValues_AVERAGE_LENGTH_EQUAL: Float
  defaultValues_AVERAGE_LENGTH_GT: Float
  defaultValues_AVERAGE_LENGTH_GTE: Float
  defaultValues_AVERAGE_LENGTH_LT: Float
  defaultValues_AVERAGE_LENGTH_LTE: Float
  defaultValues_LONGEST_LENGTH_EQUAL: Int
  defaultValues_LONGEST_LENGTH_GT: Int
  defaultValues_LONGEST_LENGTH_GTE: Int
  defaultValues_LONGEST_LENGTH_LT: Int
  defaultValues_LONGEST_LENGTH_LTE: Int
  defaultValues_SHORTEST_LENGTH_EQUAL: Int
  defaultValues_SHORTEST_LENGTH_GT: Int
  defaultValues_SHORTEST_LENGTH_GTE: Int
  defaultValues_SHORTEST_LENGTH_LT: Int
  defaultValues_SHORTEST_LENGTH_LTE: Int
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  key_AVERAGE_LENGTH_EQUAL: Float
  key_AVERAGE_LENGTH_GT: Float
  key_AVERAGE_LENGTH_GTE: Float
  key_AVERAGE_LENGTH_LT: Float
  key_AVERAGE_LENGTH_LTE: Float
  key_LONGEST_LENGTH_EQUAL: Int
  key_LONGEST_LENGTH_GT: Int
  key_LONGEST_LENGTH_GTE: Int
  key_LONGEST_LENGTH_LT: Int
  key_LONGEST_LENGTH_LTE: Int
  key_SHORTEST_LENGTH_EQUAL: Int
  key_SHORTEST_LENGTH_GT: Int
  key_SHORTEST_LENGTH_GTE: Int
  key_SHORTEST_LENGTH_LT: Int
  key_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  validationRules_AVERAGE_LENGTH_EQUAL: Float
  validationRules_AVERAGE_LENGTH_GT: Float
  validationRules_AVERAGE_LENGTH_GTE: Float
  validationRules_AVERAGE_LENGTH_LT: Float
  validationRules_AVERAGE_LENGTH_LTE: Float
  validationRules_LONGEST_LENGTH_EQUAL: Int
  validationRules_LONGEST_LENGTH_GT: Int
  validationRules_LONGEST_LENGTH_GTE: Int
  validationRules_LONGEST_LENGTH_LT: Int
  validationRules_LONGEST_LENGTH_LTE: Int
  validationRules_SHORTEST_LENGTH_EQUAL: Int
  validationRules_SHORTEST_LENGTH_GT: Int
  validationRules_SHORTEST_LENGTH_GTE: Int
  validationRules_SHORTEST_LENGTH_LT: Int
  validationRules_SHORTEST_LENGTH_LTE: Int
}

type FieldNextSiblingRelationship {
  cursor: String!
  node: Field!
}

input FieldNextSiblingUpdateConnectionInput {
  node: FieldUpdateInput
}

input FieldNextSiblingUpdateFieldInput {
  connect: FieldNextSiblingConnectFieldInput
  create: FieldNextSiblingCreateFieldInput
  delete: FieldNextSiblingDeleteFieldInput
  disconnect: FieldNextSiblingDisconnectFieldInput
  update: FieldNextSiblingUpdateConnectionInput
  where: FieldNextSiblingConnectionWhere
}

input FieldOptions {
  limit: Int
  offset: Int

  """
  Specify one or more FieldSort objects to sort Fields by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [FieldSort!]
}

input FieldPrevSiblingAggregateInput {
  AND: [FieldPrevSiblingAggregateInput!]
  NOT: FieldPrevSiblingAggregateInput
  OR: [FieldPrevSiblingAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: FieldPrevSiblingNodeAggregationWhereInput
}

input FieldPrevSiblingConnectFieldInput {
  connect: FieldConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: FieldConnectWhere
}

type FieldPrevSiblingConnection {
  edges: [FieldPrevSiblingRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input FieldPrevSiblingConnectionSort {
  node: FieldSort
}

input FieldPrevSiblingConnectionWhere {
  AND: [FieldPrevSiblingConnectionWhere!]
  NOT: FieldPrevSiblingConnectionWhere
  OR: [FieldPrevSiblingConnectionWhere!]
  node: FieldWhere
}

input FieldPrevSiblingCreateFieldInput {
  node: FieldCreateInput!
}

input FieldPrevSiblingDeleteFieldInput {
  delete: FieldDeleteInput
  where: FieldPrevSiblingConnectionWhere
}

input FieldPrevSiblingDisconnectFieldInput {
  disconnect: FieldDisconnectInput
  where: FieldPrevSiblingConnectionWhere
}

input FieldPrevSiblingFieldInput {
  connect: FieldPrevSiblingConnectFieldInput
  create: FieldPrevSiblingCreateFieldInput
}

input FieldPrevSiblingNodeAggregationWhereInput {
  AND: [FieldPrevSiblingNodeAggregationWhereInput!]
  NOT: FieldPrevSiblingNodeAggregationWhereInput
  OR: [FieldPrevSiblingNodeAggregationWhereInput!]
  defaultValues_AVERAGE_LENGTH_EQUAL: Float
  defaultValues_AVERAGE_LENGTH_GT: Float
  defaultValues_AVERAGE_LENGTH_GTE: Float
  defaultValues_AVERAGE_LENGTH_LT: Float
  defaultValues_AVERAGE_LENGTH_LTE: Float
  defaultValues_LONGEST_LENGTH_EQUAL: Int
  defaultValues_LONGEST_LENGTH_GT: Int
  defaultValues_LONGEST_LENGTH_GTE: Int
  defaultValues_LONGEST_LENGTH_LT: Int
  defaultValues_LONGEST_LENGTH_LTE: Int
  defaultValues_SHORTEST_LENGTH_EQUAL: Int
  defaultValues_SHORTEST_LENGTH_GT: Int
  defaultValues_SHORTEST_LENGTH_GTE: Int
  defaultValues_SHORTEST_LENGTH_LT: Int
  defaultValues_SHORTEST_LENGTH_LTE: Int
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  key_AVERAGE_LENGTH_EQUAL: Float
  key_AVERAGE_LENGTH_GT: Float
  key_AVERAGE_LENGTH_GTE: Float
  key_AVERAGE_LENGTH_LT: Float
  key_AVERAGE_LENGTH_LTE: Float
  key_LONGEST_LENGTH_EQUAL: Int
  key_LONGEST_LENGTH_GT: Int
  key_LONGEST_LENGTH_GTE: Int
  key_LONGEST_LENGTH_LT: Int
  key_LONGEST_LENGTH_LTE: Int
  key_SHORTEST_LENGTH_EQUAL: Int
  key_SHORTEST_LENGTH_GT: Int
  key_SHORTEST_LENGTH_GTE: Int
  key_SHORTEST_LENGTH_LT: Int
  key_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  validationRules_AVERAGE_LENGTH_EQUAL: Float
  validationRules_AVERAGE_LENGTH_GT: Float
  validationRules_AVERAGE_LENGTH_GTE: Float
  validationRules_AVERAGE_LENGTH_LT: Float
  validationRules_AVERAGE_LENGTH_LTE: Float
  validationRules_LONGEST_LENGTH_EQUAL: Int
  validationRules_LONGEST_LENGTH_GT: Int
  validationRules_LONGEST_LENGTH_GTE: Int
  validationRules_LONGEST_LENGTH_LT: Int
  validationRules_LONGEST_LENGTH_LTE: Int
  validationRules_SHORTEST_LENGTH_EQUAL: Int
  validationRules_SHORTEST_LENGTH_GT: Int
  validationRules_SHORTEST_LENGTH_GTE: Int
  validationRules_SHORTEST_LENGTH_LT: Int
  validationRules_SHORTEST_LENGTH_LTE: Int
}

type FieldPrevSiblingRelationship {
  cursor: String!
  node: Field!
}

input FieldPrevSiblingUpdateConnectionInput {
  node: FieldUpdateInput
}

input FieldPrevSiblingUpdateFieldInput {
  connect: FieldPrevSiblingConnectFieldInput
  create: FieldPrevSiblingCreateFieldInput
  delete: FieldPrevSiblingDeleteFieldInput
  disconnect: FieldPrevSiblingDisconnectFieldInput
  update: FieldPrevSiblingUpdateConnectionInput
  where: FieldPrevSiblingConnectionWhere
}

input FieldRelationInput {
  api: FieldApiCreateFieldInput
  fieldType: FieldFieldTypeCreateFieldInput
  nextSibling: FieldNextSiblingCreateFieldInput
  prevSibling: FieldPrevSiblingCreateFieldInput
}

"""
Fields to sort Fields by. The order in which sorts are applied is not guaranteed when specifying many fields in one FieldSort object.
"""
input FieldSort {
  defaultValues: SortDirection
  description: SortDirection
  id: SortDirection
  key: SortDirection
  name: SortDirection
  validationRules: SortDirection
}

input FieldUpdateInput {
  api: FieldApiUpdateFieldInput
  defaultValues: String
  description: String
  fieldType: FieldFieldTypeUpdateFieldInput
  id: ID
  key: String
  name: String
  nextSibling: FieldNextSiblingUpdateFieldInput
  prevSibling: FieldPrevSiblingUpdateFieldInput
  validationRules: String
}

input FieldWhere {
  AND: [FieldWhere!]
  NOT: FieldWhere
  OR: [FieldWhere!]
  api: InterfaceTypeWhere
  apiAggregate: FieldApiAggregateInput
  apiConnection: FieldApiConnectionWhere
  apiConnection_NOT: FieldApiConnectionWhere
  api_NOT: InterfaceTypeWhere
  defaultValues: String
  defaultValues_CONTAINS: String
  defaultValues_ENDS_WITH: String
  defaultValues_IN: [String]
  defaultValues_MATCHES: String
  defaultValues_STARTS_WITH: String
  description: String
  description_CONTAINS: String
  description_ENDS_WITH: String
  description_IN: [String]
  description_MATCHES: String
  description_STARTS_WITH: String
  fieldTypeConnection: FieldFieldTypeConnectionWhere
  fieldTypeConnection_NOT: FieldFieldTypeConnectionWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  key: String
  key_CONTAINS: String
  key_ENDS_WITH: String
  key_IN: [String!]
  key_MATCHES: String
  key_STARTS_WITH: String
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_MATCHES: String
  name_STARTS_WITH: String
  nextSibling: FieldWhere
  nextSiblingAggregate: FieldNextSiblingAggregateInput
  nextSiblingConnection: FieldNextSiblingConnectionWhere
  nextSiblingConnection_NOT: FieldNextSiblingConnectionWhere
  nextSibling_NOT: FieldWhere
  prevSibling: FieldWhere
  prevSiblingAggregate: FieldPrevSiblingAggregateInput
  prevSiblingConnection: FieldPrevSiblingConnectionWhere
  prevSiblingConnection_NOT: FieldPrevSiblingConnectionWhere
  prevSibling_NOT: FieldWhere
  validationRules: String
  validationRules_CONTAINS: String
  validationRules_ENDS_WITH: String
  validationRules_IN: [String]
  validationRules_MATCHES: String
  validationRules_STARTS_WITH: String
}

type FieldsConnection {
  edges: [FieldEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input GetBaseTypesOptions {
  limit: Int
  offset: Int
  where: BaseTypesWhere
}

type GetBaseTypesReturn {
  items: [BaseType!]!
  totalCount: Int!
}

type GetBaseTypesReturnAggregateSelection {
  count: Int!
  totalCount: IntAggregateSelectionNonNullable!
}

input GetBaseTypesReturnCreateInput {
  totalCount: Int!
}

type GetBaseTypesReturnEdge {
  cursor: String!
  node: GetBaseTypesReturn!
}

input GetBaseTypesReturnOptions {
  limit: Int
  offset: Int

  """
  Specify one or more GetBaseTypesReturnSort objects to sort GetBaseTypesReturns by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [GetBaseTypesReturnSort!]
}

"""
Fields to sort GetBaseTypesReturns by. The order in which sorts are applied is not guaranteed when specifying many fields in one GetBaseTypesReturnSort object.
"""
input GetBaseTypesReturnSort {
  totalCount: SortDirection
}

input GetBaseTypesReturnUpdateInput {
  totalCount: Int
  totalCount_DECREMENT: Int
  totalCount_INCREMENT: Int
}

input GetBaseTypesReturnWhere {
  AND: [GetBaseTypesReturnWhere!]
  NOT: GetBaseTypesReturnWhere
  OR: [GetBaseTypesReturnWhere!]
  totalCount: Int
  totalCount_GT: Int
  totalCount_GTE: Int
  totalCount_IN: [Int!]
  totalCount_LT: Int
  totalCount_LTE: Int
}

type GetBaseTypesReturnsConnection {
  edges: [GetBaseTypesReturnEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Hook {
  config(
    directed: Boolean = true
    options: PropOptions
    where: PropWhere
  ): Prop!
  configAggregate(
    directed: Boolean = true
    where: PropWhere
  ): HookPropConfigAggregationSelection
  configConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [HookConfigConnectionSort!]
    where: HookConfigConnectionWhere
  ): HookConfigConnection!
  element(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  elementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): HookElementElementAggregationSelection
  elementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [HookElementConnectionSort!]
    where: HookElementConnectionWhere
  ): HookElementConnection!
  id: ID!
  type: AtomType!
}

type HookAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
}

input HookConfigAggregateInput {
  AND: [HookConfigAggregateInput!]
  NOT: HookConfigAggregateInput
  OR: [HookConfigAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: HookConfigNodeAggregationWhereInput
}

input HookConfigConnectFieldInput {
  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: PropConnectWhere
}

input HookConfigConnectOrCreateFieldInput {
  onCreate: HookConfigConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input HookConfigConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type HookConfigConnection {
  edges: [HookConfigRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input HookConfigConnectionSort {
  node: PropSort
}

input HookConfigConnectionWhere {
  AND: [HookConfigConnectionWhere!]
  NOT: HookConfigConnectionWhere
  OR: [HookConfigConnectionWhere!]
  node: PropWhere
}

input HookConfigCreateFieldInput {
  node: PropCreateInput!
}

input HookConfigDeleteFieldInput {
  where: HookConfigConnectionWhere
}

input HookConfigDisconnectFieldInput {
  where: HookConfigConnectionWhere
}

input HookConfigFieldInput {
  connect: HookConfigConnectFieldInput
  connectOrCreate: HookConfigConnectOrCreateFieldInput
  create: HookConfigCreateFieldInput
}

input HookConfigNodeAggregationWhereInput {
  AND: [HookConfigNodeAggregationWhereInput!]
  NOT: HookConfigNodeAggregationWhereInput
  OR: [HookConfigNodeAggregationWhereInput!]
  data_AVERAGE_LENGTH_EQUAL: Float
  data_AVERAGE_LENGTH_GT: Float
  data_AVERAGE_LENGTH_GTE: Float
  data_AVERAGE_LENGTH_LT: Float
  data_AVERAGE_LENGTH_LTE: Float
  data_LONGEST_LENGTH_EQUAL: Int
  data_LONGEST_LENGTH_GT: Int
  data_LONGEST_LENGTH_GTE: Int
  data_LONGEST_LENGTH_LT: Int
  data_LONGEST_LENGTH_LTE: Int
  data_SHORTEST_LENGTH_EQUAL: Int
  data_SHORTEST_LENGTH_GT: Int
  data_SHORTEST_LENGTH_GTE: Int
  data_SHORTEST_LENGTH_LT: Int
  data_SHORTEST_LENGTH_LTE: Int
}

type HookConfigRelationship {
  cursor: String!
  node: Prop!
}

input HookConfigUpdateConnectionInput {
  node: PropUpdateInput
}

input HookConfigUpdateFieldInput {
  connect: HookConfigConnectFieldInput
  connectOrCreate: HookConfigConnectOrCreateFieldInput
  create: HookConfigCreateFieldInput
  delete: HookConfigDeleteFieldInput
  disconnect: HookConfigDisconnectFieldInput
  update: HookConfigUpdateConnectionInput
  where: HookConfigConnectionWhere
}

input HookConnectInput {
  config: HookConfigConnectFieldInput
  element: HookElementConnectFieldInput
}

input HookConnectOrCreateInput {
  config: HookConfigConnectOrCreateFieldInput
  element: HookElementConnectOrCreateFieldInput
}

input HookCreateInput {
  config: HookConfigFieldInput
  element: HookElementFieldInput
  type: AtomType!
}

input HookDeleteInput {
  config: HookConfigDeleteFieldInput
  element: HookElementDeleteFieldInput
}

input HookDisconnectInput {
  config: HookConfigDisconnectFieldInput
  element: HookElementDisconnectFieldInput
}

type HookEdge {
  cursor: String!
  node: Hook!
}

input HookElementAggregateInput {
  AND: [HookElementAggregateInput!]
  NOT: HookElementAggregateInput
  OR: [HookElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: HookElementNodeAggregationWhereInput
}

input HookElementConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input HookElementConnectOrCreateFieldInput {
  onCreate: HookElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input HookElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type HookElementConnection {
  edges: [HookElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input HookElementConnectionSort {
  node: ElementSort
}

input HookElementConnectionWhere {
  AND: [HookElementConnectionWhere!]
  NOT: HookElementConnectionWhere
  OR: [HookElementConnectionWhere!]
  node: ElementWhere
}

input HookElementCreateFieldInput {
  node: ElementCreateInput!
}

input HookElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: HookElementConnectionWhere
}

input HookElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: HookElementConnectionWhere
}

type HookElementElementAggregationSelection {
  count: Int!
  node: HookElementElementNodeAggregateSelection
}

type HookElementElementNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

input HookElementFieldInput {
  connect: HookElementConnectFieldInput
  connectOrCreate: HookElementConnectOrCreateFieldInput
  create: HookElementCreateFieldInput
}

input HookElementNodeAggregationWhereInput {
  AND: [HookElementNodeAggregationWhereInput!]
  NOT: HookElementNodeAggregationWhereInput
  OR: [HookElementNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type HookElementRelationship {
  cursor: String!
  node: Element!
}

input HookElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input HookElementUpdateFieldInput {
  connect: HookElementConnectFieldInput
  connectOrCreate: HookElementConnectOrCreateFieldInput
  create: HookElementCreateFieldInput
  delete: HookElementDeleteFieldInput
  disconnect: HookElementDisconnectFieldInput
  update: HookElementUpdateConnectionInput
  where: HookElementConnectionWhere
}

input HookOptions {
  limit: Int
  offset: Int

  """
  Specify one or more HookSort objects to sort Hooks by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [HookSort!]
}

type HookPropConfigAggregationSelection {
  count: Int!
  node: HookPropConfigNodeAggregateSelection
}

type HookPropConfigNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input HookRelationInput {
  config: HookConfigCreateFieldInput
  element: HookElementCreateFieldInput
}

"""
Fields to sort Hooks by. The order in which sorts are applied is not guaranteed when specifying many fields in one HookSort object.
"""
input HookSort {
  id: SortDirection
  type: SortDirection
}

input HookUpdateInput {
  config: HookConfigUpdateFieldInput
  element: HookElementUpdateFieldInput
  type: AtomType
}

input HookWhere {
  AND: [HookWhere!]
  NOT: HookWhere
  OR: [HookWhere!]
  config: PropWhere
  configAggregate: HookConfigAggregateInput
  configConnection: HookConfigConnectionWhere
  configConnection_NOT: HookConfigConnectionWhere
  config_NOT: PropWhere
  element: ElementWhere
  elementAggregate: HookElementAggregateInput
  elementConnection: HookElementConnectionWhere
  elementConnection_NOT: HookElementConnectionWhere
  element_NOT: ElementWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  type: AtomType
  type_IN: [AtomType!]
}

type HooksConnection {
  edges: [HookEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface IBaseType {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

input IBaseTypeConnectInput {
  _on: IBaseTypeImplementationsConnectInput
  owner: IBaseTypeOwnerConnectFieldInput
}

input IBaseTypeConnectWhere {
  node: IBaseTypeWhere!
}

input IBaseTypeCreateInput {
  ActionType: ActionTypeCreateInput
  AppType: AppTypeCreateInput
  ArrayType: ArrayTypeCreateInput
  BaseType: BaseTypeCreateInput
  CodeMirrorType: CodeMirrorTypeCreateInput
  ElementType: ElementTypeCreateInput
  EnumType: EnumTypeCreateInput
  InterfaceType: InterfaceTypeCreateInput
  LambdaType: LambdaTypeCreateInput
  PageType: PageTypeCreateInput
  PrimitiveType: PrimitiveTypeCreateInput
  ReactNodeType: ReactNodeTypeCreateInput
  RenderPropType: RenderPropTypeCreateInput
  UnionType: UnionTypeCreateInput
}

input IBaseTypeDeleteInput {
  _on: IBaseTypeImplementationsDeleteInput
  owner: IBaseTypeOwnerDeleteFieldInput
}

input IBaseTypeDisconnectInput {
  _on: IBaseTypeImplementationsDisconnectInput
  owner: IBaseTypeOwnerDisconnectFieldInput
}

input IBaseTypeImplementationsConnectInput {
  ActionType: [ActionTypeConnectInput!]
  AppType: [AppTypeConnectInput!]
  ArrayType: [ArrayTypeConnectInput!]
  BaseType: [BaseTypeConnectInput!]
  CodeMirrorType: [CodeMirrorTypeConnectInput!]
  ElementType: [ElementTypeConnectInput!]
  EnumType: [EnumTypeConnectInput!]
  InterfaceType: [InterfaceTypeConnectInput!]
  LambdaType: [LambdaTypeConnectInput!]
  PageType: [PageTypeConnectInput!]
  PrimitiveType: [PrimitiveTypeConnectInput!]
  ReactNodeType: [ReactNodeTypeConnectInput!]
  RenderPropType: [RenderPropTypeConnectInput!]
  UnionType: [UnionTypeConnectInput!]
}

input IBaseTypeImplementationsDeleteInput {
  ActionType: [ActionTypeDeleteInput!]
  AppType: [AppTypeDeleteInput!]
  ArrayType: [ArrayTypeDeleteInput!]
  BaseType: [BaseTypeDeleteInput!]
  CodeMirrorType: [CodeMirrorTypeDeleteInput!]
  ElementType: [ElementTypeDeleteInput!]
  EnumType: [EnumTypeDeleteInput!]
  InterfaceType: [InterfaceTypeDeleteInput!]
  LambdaType: [LambdaTypeDeleteInput!]
  PageType: [PageTypeDeleteInput!]
  PrimitiveType: [PrimitiveTypeDeleteInput!]
  ReactNodeType: [ReactNodeTypeDeleteInput!]
  RenderPropType: [RenderPropTypeDeleteInput!]
  UnionType: [UnionTypeDeleteInput!]
}

input IBaseTypeImplementationsDisconnectInput {
  ActionType: [ActionTypeDisconnectInput!]
  AppType: [AppTypeDisconnectInput!]
  ArrayType: [ArrayTypeDisconnectInput!]
  BaseType: [BaseTypeDisconnectInput!]
  CodeMirrorType: [CodeMirrorTypeDisconnectInput!]
  ElementType: [ElementTypeDisconnectInput!]
  EnumType: [EnumTypeDisconnectInput!]
  InterfaceType: [InterfaceTypeDisconnectInput!]
  LambdaType: [LambdaTypeDisconnectInput!]
  PageType: [PageTypeDisconnectInput!]
  PrimitiveType: [PrimitiveTypeDisconnectInput!]
  ReactNodeType: [ReactNodeTypeDisconnectInput!]
  RenderPropType: [RenderPropTypeDisconnectInput!]
  UnionType: [UnionTypeDisconnectInput!]
}

input IBaseTypeImplementationsUpdateInput {
  ActionType: ActionTypeUpdateInput
  AppType: AppTypeUpdateInput
  ArrayType: ArrayTypeUpdateInput
  BaseType: BaseTypeUpdateInput
  CodeMirrorType: CodeMirrorTypeUpdateInput
  ElementType: ElementTypeUpdateInput
  EnumType: EnumTypeUpdateInput
  InterfaceType: InterfaceTypeUpdateInput
  LambdaType: LambdaTypeUpdateInput
  PageType: PageTypeUpdateInput
  PrimitiveType: PrimitiveTypeUpdateInput
  ReactNodeType: ReactNodeTypeUpdateInput
  RenderPropType: RenderPropTypeUpdateInput
  UnionType: UnionTypeUpdateInput
}

input IBaseTypeImplementationsWhere {
  ActionType: ActionTypeWhere
  AppType: AppTypeWhere
  ArrayType: ArrayTypeWhere
  BaseType: BaseTypeWhere
  CodeMirrorType: CodeMirrorTypeWhere
  ElementType: ElementTypeWhere
  EnumType: EnumTypeWhere
  InterfaceType: InterfaceTypeWhere
  LambdaType: LambdaTypeWhere
  PageType: PageTypeWhere
  PrimitiveType: PrimitiveTypeWhere
  ReactNodeType: ReactNodeTypeWhere
  RenderPropType: RenderPropTypeWhere
  UnionType: UnionTypeWhere
}

input IBaseTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more IBaseTypeSort objects to sort IBaseTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [IBaseTypeSort]
}

input IBaseTypeOwnerAggregateInput {
  AND: [IBaseTypeOwnerAggregateInput!]
  NOT: IBaseTypeOwnerAggregateInput
  OR: [IBaseTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: IBaseTypeOwnerNodeAggregationWhereInput
}

input IBaseTypeOwnerConnectFieldInput {
  connect: UserConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: UserConnectWhere
}

input IBaseTypeOwnerConnectOrCreateFieldInput {
  onCreate: IBaseTypeOwnerConnectOrCreateFieldInputOnCreate!
  where: UserConnectOrCreateWhere!
}

input IBaseTypeOwnerConnectOrCreateFieldInputOnCreate {
  node: UserOnCreateInput!
}

type IBaseTypeOwnerConnection {
  edges: [IBaseTypeOwnerRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input IBaseTypeOwnerConnectionSort {
  node: UserSort
}

input IBaseTypeOwnerConnectionWhere {
  AND: [IBaseTypeOwnerConnectionWhere!]
  NOT: IBaseTypeOwnerConnectionWhere
  OR: [IBaseTypeOwnerConnectionWhere!]
  node: UserWhere
}

input IBaseTypeOwnerCreateFieldInput {
  node: UserCreateInput!
}

input IBaseTypeOwnerDeleteFieldInput {
  delete: UserDeleteInput
  where: IBaseTypeOwnerConnectionWhere
}

input IBaseTypeOwnerDisconnectFieldInput {
  disconnect: UserDisconnectInput
  where: IBaseTypeOwnerConnectionWhere
}

input IBaseTypeOwnerFieldInput {
  connect: IBaseTypeOwnerConnectFieldInput
  connectOrCreate: IBaseTypeOwnerConnectOrCreateFieldInput
  create: IBaseTypeOwnerCreateFieldInput
}

input IBaseTypeOwnerNodeAggregationWhereInput {
  AND: [IBaseTypeOwnerNodeAggregationWhereInput!]
  NOT: IBaseTypeOwnerNodeAggregationWhereInput
  OR: [IBaseTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

type IBaseTypeOwnerRelationship {
  cursor: String!
  node: User!
}

input IBaseTypeOwnerUpdateConnectionInput {
  node: UserUpdateInput
}

input IBaseTypeOwnerUpdateFieldInput {
  connect: IBaseTypeOwnerConnectFieldInput
  connectOrCreate: IBaseTypeOwnerConnectOrCreateFieldInput
  create: IBaseTypeOwnerCreateFieldInput
  delete: IBaseTypeOwnerDeleteFieldInput
  disconnect: IBaseTypeOwnerDisconnectFieldInput
  update: IBaseTypeOwnerUpdateConnectionInput
  where: IBaseTypeOwnerConnectionWhere
}

"""
Fields to sort IBaseTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one IBaseTypeSort object.
"""
input IBaseTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input IBaseTypeUpdateInput {
  _on: IBaseTypeImplementationsUpdateInput
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

input IBaseTypeWhere {
  _on: IBaseTypeImplementationsWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: IBaseTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type IDAggregateSelectionNonNullable {
  longest: ID!
  shortest: ID!
}

type IntAggregateSelectionNonNullable {
  average: Float!
  max: Int!
  min: Int!
  sum: Int!
}

"""
Represents an object type with multiple fields
"""
type InterfaceType implements IBaseType & WithDescendants {
  apiOfAtoms(
    directed: Boolean = true
    options: AtomOptions
    where: AtomWhere
  ): [Atom!]!
  apiOfAtomsAggregate(
    directed: Boolean = true
    where: AtomWhere
  ): InterfaceTypeAtomApiOfAtomsAggregationSelection
  apiOfAtomsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [InterfaceTypeApiOfAtomsConnectionSort!]
    where: InterfaceTypeApiOfAtomsConnectionWhere
  ): InterfaceTypeApiOfAtomsConnection!
  descendantTypesIds: [ID!]!
  fieldRefs(
    directed: Boolean = true
    options: FieldOptions
    where: FieldWhere
  ): [Field!]!
  fieldRefsAggregate(
    directed: Boolean = true
    where: FieldWhere
  ): InterfaceTypeFieldFieldRefsAggregationSelection
  fieldRefsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [InterfaceTypeFieldRefsConnectionSort!]
    where: InterfaceTypeFieldRefsConnectionWhere
  ): InterfaceTypeFieldRefsConnection!
  fields(
    directed: Boolean = true
    options: FieldOptions
    where: FieldWhere
  ): [Field!]!
  fieldsAggregate(
    directed: Boolean = true
    where: FieldWhere
  ): InterfaceTypeFieldFieldsAggregationSelection
  fieldsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [InterfaceTypeFieldsConnectionSort!]
    where: InterfaceTypeFieldsConnectionWhere
  ): InterfaceTypeFieldsConnection!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): InterfaceTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type InterfaceTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input InterfaceTypeApiOfAtomsAggregateInput {
  AND: [InterfaceTypeApiOfAtomsAggregateInput!]
  NOT: InterfaceTypeApiOfAtomsAggregateInput
  OR: [InterfaceTypeApiOfAtomsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: InterfaceTypeApiOfAtomsNodeAggregationWhereInput
}

input InterfaceTypeApiOfAtomsConnectFieldInput {
  connect: [AtomConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: AtomConnectWhere
}

input InterfaceTypeApiOfAtomsConnectOrCreateFieldInput {
  onCreate: InterfaceTypeApiOfAtomsConnectOrCreateFieldInputOnCreate!
  where: AtomConnectOrCreateWhere!
}

input InterfaceTypeApiOfAtomsConnectOrCreateFieldInputOnCreate {
  node: AtomOnCreateInput!
}

type InterfaceTypeApiOfAtomsConnection {
  edges: [InterfaceTypeApiOfAtomsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input InterfaceTypeApiOfAtomsConnectionSort {
  node: AtomSort
}

input InterfaceTypeApiOfAtomsConnectionWhere {
  AND: [InterfaceTypeApiOfAtomsConnectionWhere!]
  NOT: InterfaceTypeApiOfAtomsConnectionWhere
  OR: [InterfaceTypeApiOfAtomsConnectionWhere!]
  node: AtomWhere
}

input InterfaceTypeApiOfAtomsCreateFieldInput {
  node: AtomCreateInput!
}

input InterfaceTypeApiOfAtomsDeleteFieldInput {
  delete: AtomDeleteInput
  where: InterfaceTypeApiOfAtomsConnectionWhere
}

input InterfaceTypeApiOfAtomsDisconnectFieldInput {
  disconnect: AtomDisconnectInput
  where: InterfaceTypeApiOfAtomsConnectionWhere
}

input InterfaceTypeApiOfAtomsFieldInput {
  connect: [InterfaceTypeApiOfAtomsConnectFieldInput!]
  connectOrCreate: [InterfaceTypeApiOfAtomsConnectOrCreateFieldInput!]
  create: [InterfaceTypeApiOfAtomsCreateFieldInput!]
}

input InterfaceTypeApiOfAtomsNodeAggregationWhereInput {
  AND: [InterfaceTypeApiOfAtomsNodeAggregationWhereInput!]
  NOT: InterfaceTypeApiOfAtomsNodeAggregationWhereInput
  OR: [InterfaceTypeApiOfAtomsNodeAggregationWhereInput!]
  externalCssSource_AVERAGE_LENGTH_EQUAL: Float
  externalCssSource_AVERAGE_LENGTH_GT: Float
  externalCssSource_AVERAGE_LENGTH_GTE: Float
  externalCssSource_AVERAGE_LENGTH_LT: Float
  externalCssSource_AVERAGE_LENGTH_LTE: Float
  externalCssSource_LONGEST_LENGTH_EQUAL: Int
  externalCssSource_LONGEST_LENGTH_GT: Int
  externalCssSource_LONGEST_LENGTH_GTE: Int
  externalCssSource_LONGEST_LENGTH_LT: Int
  externalCssSource_LONGEST_LENGTH_LTE: Int
  externalCssSource_SHORTEST_LENGTH_EQUAL: Int
  externalCssSource_SHORTEST_LENGTH_GT: Int
  externalCssSource_SHORTEST_LENGTH_GTE: Int
  externalCssSource_SHORTEST_LENGTH_LT: Int
  externalCssSource_SHORTEST_LENGTH_LTE: Int
  externalJsSource_AVERAGE_LENGTH_EQUAL: Float
  externalJsSource_AVERAGE_LENGTH_GT: Float
  externalJsSource_AVERAGE_LENGTH_GTE: Float
  externalJsSource_AVERAGE_LENGTH_LT: Float
  externalJsSource_AVERAGE_LENGTH_LTE: Float
  externalJsSource_LONGEST_LENGTH_EQUAL: Int
  externalJsSource_LONGEST_LENGTH_GT: Int
  externalJsSource_LONGEST_LENGTH_GTE: Int
  externalJsSource_LONGEST_LENGTH_LT: Int
  externalJsSource_LONGEST_LENGTH_LTE: Int
  externalJsSource_SHORTEST_LENGTH_EQUAL: Int
  externalJsSource_SHORTEST_LENGTH_GT: Int
  externalJsSource_SHORTEST_LENGTH_GTE: Int
  externalJsSource_SHORTEST_LENGTH_LT: Int
  externalJsSource_SHORTEST_LENGTH_LTE: Int
  externalSourceType_AVERAGE_LENGTH_EQUAL: Float
  externalSourceType_AVERAGE_LENGTH_GT: Float
  externalSourceType_AVERAGE_LENGTH_GTE: Float
  externalSourceType_AVERAGE_LENGTH_LT: Float
  externalSourceType_AVERAGE_LENGTH_LTE: Float
  externalSourceType_LONGEST_LENGTH_EQUAL: Int
  externalSourceType_LONGEST_LENGTH_GT: Int
  externalSourceType_LONGEST_LENGTH_GTE: Int
  externalSourceType_LONGEST_LENGTH_LT: Int
  externalSourceType_LONGEST_LENGTH_LTE: Int
  externalSourceType_SHORTEST_LENGTH_EQUAL: Int
  externalSourceType_SHORTEST_LENGTH_GT: Int
  externalSourceType_SHORTEST_LENGTH_GTE: Int
  externalSourceType_SHORTEST_LENGTH_LT: Int
  externalSourceType_SHORTEST_LENGTH_LTE: Int
  icon_AVERAGE_LENGTH_EQUAL: Float
  icon_AVERAGE_LENGTH_GT: Float
  icon_AVERAGE_LENGTH_GTE: Float
  icon_AVERAGE_LENGTH_LT: Float
  icon_AVERAGE_LENGTH_LTE: Float
  icon_LONGEST_LENGTH_EQUAL: Int
  icon_LONGEST_LENGTH_GT: Int
  icon_LONGEST_LENGTH_GTE: Int
  icon_LONGEST_LENGTH_LT: Int
  icon_LONGEST_LENGTH_LTE: Int
  icon_SHORTEST_LENGTH_EQUAL: Int
  icon_SHORTEST_LENGTH_GT: Int
  icon_SHORTEST_LENGTH_GTE: Int
  icon_SHORTEST_LENGTH_LT: Int
  icon_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type InterfaceTypeApiOfAtomsRelationship {
  cursor: String!
  node: Atom!
}

input InterfaceTypeApiOfAtomsUpdateConnectionInput {
  node: AtomUpdateInput
}

input InterfaceTypeApiOfAtomsUpdateFieldInput {
  connect: [InterfaceTypeApiOfAtomsConnectFieldInput!]
  connectOrCreate: [InterfaceTypeApiOfAtomsConnectOrCreateFieldInput!]
  create: [InterfaceTypeApiOfAtomsCreateFieldInput!]
  delete: [InterfaceTypeApiOfAtomsDeleteFieldInput!]
  disconnect: [InterfaceTypeApiOfAtomsDisconnectFieldInput!]
  update: InterfaceTypeApiOfAtomsUpdateConnectionInput
  where: InterfaceTypeApiOfAtomsConnectionWhere
}

type InterfaceTypeAtomApiOfAtomsAggregationSelection {
  count: Int!
  node: InterfaceTypeAtomApiOfAtomsNodeAggregateSelection
}

type InterfaceTypeAtomApiOfAtomsNodeAggregateSelection {
  externalCssSource: StringAggregateSelectionNullable!
  externalJsSource: StringAggregateSelectionNullable!
  externalSourceType: StringAggregateSelectionNullable!
  icon: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input InterfaceTypeConnectInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsConnectFieldInput!]
  fieldRefs: [InterfaceTypeFieldRefsConnectFieldInput!]
  fields: [InterfaceTypeFieldsConnectFieldInput!]
  owner: IBaseTypeOwnerConnectFieldInput
}

input InterfaceTypeConnectOrCreateInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsConnectOrCreateFieldInput!]
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input InterfaceTypeConnectOrCreateWhere {
  node: InterfaceTypeUniqueWhere!
}

input InterfaceTypeConnectWhere {
  node: InterfaceTypeWhere!
}

input InterfaceTypeCreateInput {
  apiOfAtoms: InterfaceTypeApiOfAtomsFieldInput
  fieldRefs: InterfaceTypeFieldRefsFieldInput
  fields: InterfaceTypeFieldsFieldInput
  id: ID!
  kind: TypeKind! = InterfaceType
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input InterfaceTypeDeleteInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsDeleteFieldInput!]
  fieldRefs: [InterfaceTypeFieldRefsDeleteFieldInput!]
  fields: [InterfaceTypeFieldsDeleteFieldInput!]
  owner: IBaseTypeOwnerDeleteFieldInput
}

input InterfaceTypeDisconnectInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsDisconnectFieldInput!]
  fieldRefs: [InterfaceTypeFieldRefsDisconnectFieldInput!]
  fields: [InterfaceTypeFieldsDisconnectFieldInput!]
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type InterfaceTypeEdge {
  cursor: String!
  node: InterfaceType!
}

type InterfaceTypeFieldFieldRefsAggregationSelection {
  count: Int!
  node: InterfaceTypeFieldFieldRefsNodeAggregateSelection
}

type InterfaceTypeFieldFieldRefsNodeAggregateSelection {
  defaultValues: StringAggregateSelectionNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  key: StringAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  validationRules: StringAggregateSelectionNullable!
}

type InterfaceTypeFieldFieldsAggregationSelection {
  count: Int!
  node: InterfaceTypeFieldFieldsNodeAggregateSelection
}

type InterfaceTypeFieldFieldsNodeAggregateSelection {
  defaultValues: StringAggregateSelectionNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  key: StringAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  validationRules: StringAggregateSelectionNullable!
}

input InterfaceTypeFieldRefsAggregateInput {
  AND: [InterfaceTypeFieldRefsAggregateInput!]
  NOT: InterfaceTypeFieldRefsAggregateInput
  OR: [InterfaceTypeFieldRefsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: InterfaceTypeFieldRefsNodeAggregationWhereInput
}

input InterfaceTypeFieldRefsConnectFieldInput {
  connect: [FieldConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: FieldConnectWhere
}

type InterfaceTypeFieldRefsConnection {
  edges: [InterfaceTypeFieldRefsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input InterfaceTypeFieldRefsConnectionSort {
  node: FieldSort
}

input InterfaceTypeFieldRefsConnectionWhere {
  AND: [InterfaceTypeFieldRefsConnectionWhere!]
  NOT: InterfaceTypeFieldRefsConnectionWhere
  OR: [InterfaceTypeFieldRefsConnectionWhere!]
  node: FieldWhere
}

input InterfaceTypeFieldRefsCreateFieldInput {
  node: FieldCreateInput!
}

input InterfaceTypeFieldRefsDeleteFieldInput {
  delete: FieldDeleteInput
  where: InterfaceTypeFieldRefsConnectionWhere
}

input InterfaceTypeFieldRefsDisconnectFieldInput {
  disconnect: FieldDisconnectInput
  where: InterfaceTypeFieldRefsConnectionWhere
}

input InterfaceTypeFieldRefsFieldInput {
  connect: [InterfaceTypeFieldRefsConnectFieldInput!]
  create: [InterfaceTypeFieldRefsCreateFieldInput!]
}

input InterfaceTypeFieldRefsNodeAggregationWhereInput {
  AND: [InterfaceTypeFieldRefsNodeAggregationWhereInput!]
  NOT: InterfaceTypeFieldRefsNodeAggregationWhereInput
  OR: [InterfaceTypeFieldRefsNodeAggregationWhereInput!]
  defaultValues_AVERAGE_LENGTH_EQUAL: Float
  defaultValues_AVERAGE_LENGTH_GT: Float
  defaultValues_AVERAGE_LENGTH_GTE: Float
  defaultValues_AVERAGE_LENGTH_LT: Float
  defaultValues_AVERAGE_LENGTH_LTE: Float
  defaultValues_LONGEST_LENGTH_EQUAL: Int
  defaultValues_LONGEST_LENGTH_GT: Int
  defaultValues_LONGEST_LENGTH_GTE: Int
  defaultValues_LONGEST_LENGTH_LT: Int
  defaultValues_LONGEST_LENGTH_LTE: Int
  defaultValues_SHORTEST_LENGTH_EQUAL: Int
  defaultValues_SHORTEST_LENGTH_GT: Int
  defaultValues_SHORTEST_LENGTH_GTE: Int
  defaultValues_SHORTEST_LENGTH_LT: Int
  defaultValues_SHORTEST_LENGTH_LTE: Int
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  key_AVERAGE_LENGTH_EQUAL: Float
  key_AVERAGE_LENGTH_GT: Float
  key_AVERAGE_LENGTH_GTE: Float
  key_AVERAGE_LENGTH_LT: Float
  key_AVERAGE_LENGTH_LTE: Float
  key_LONGEST_LENGTH_EQUAL: Int
  key_LONGEST_LENGTH_GT: Int
  key_LONGEST_LENGTH_GTE: Int
  key_LONGEST_LENGTH_LT: Int
  key_LONGEST_LENGTH_LTE: Int
  key_SHORTEST_LENGTH_EQUAL: Int
  key_SHORTEST_LENGTH_GT: Int
  key_SHORTEST_LENGTH_GTE: Int
  key_SHORTEST_LENGTH_LT: Int
  key_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  validationRules_AVERAGE_LENGTH_EQUAL: Float
  validationRules_AVERAGE_LENGTH_GT: Float
  validationRules_AVERAGE_LENGTH_GTE: Float
  validationRules_AVERAGE_LENGTH_LT: Float
  validationRules_AVERAGE_LENGTH_LTE: Float
  validationRules_LONGEST_LENGTH_EQUAL: Int
  validationRules_LONGEST_LENGTH_GT: Int
  validationRules_LONGEST_LENGTH_GTE: Int
  validationRules_LONGEST_LENGTH_LT: Int
  validationRules_LONGEST_LENGTH_LTE: Int
  validationRules_SHORTEST_LENGTH_EQUAL: Int
  validationRules_SHORTEST_LENGTH_GT: Int
  validationRules_SHORTEST_LENGTH_GTE: Int
  validationRules_SHORTEST_LENGTH_LT: Int
  validationRules_SHORTEST_LENGTH_LTE: Int
}

type InterfaceTypeFieldRefsRelationship {
  cursor: String!
  node: Field!
}

input InterfaceTypeFieldRefsUpdateConnectionInput {
  node: FieldUpdateInput
}

input InterfaceTypeFieldRefsUpdateFieldInput {
  connect: [InterfaceTypeFieldRefsConnectFieldInput!]
  create: [InterfaceTypeFieldRefsCreateFieldInput!]
  delete: [InterfaceTypeFieldRefsDeleteFieldInput!]
  disconnect: [InterfaceTypeFieldRefsDisconnectFieldInput!]
  update: InterfaceTypeFieldRefsUpdateConnectionInput
  where: InterfaceTypeFieldRefsConnectionWhere
}

input InterfaceTypeFieldsAggregateInput {
  AND: [InterfaceTypeFieldsAggregateInput!]
  NOT: InterfaceTypeFieldsAggregateInput
  OR: [InterfaceTypeFieldsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: InterfaceTypeFieldsNodeAggregationWhereInput
}

input InterfaceTypeFieldsConnectFieldInput {
  connect: [FieldConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: FieldConnectWhere
}

type InterfaceTypeFieldsConnection {
  edges: [InterfaceTypeFieldsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input InterfaceTypeFieldsConnectionSort {
  node: FieldSort
}

input InterfaceTypeFieldsConnectionWhere {
  AND: [InterfaceTypeFieldsConnectionWhere!]
  NOT: InterfaceTypeFieldsConnectionWhere
  OR: [InterfaceTypeFieldsConnectionWhere!]
  node: FieldWhere
}

input InterfaceTypeFieldsCreateFieldInput {
  node: FieldCreateInput!
}

input InterfaceTypeFieldsDeleteFieldInput {
  delete: FieldDeleteInput
  where: InterfaceTypeFieldsConnectionWhere
}

input InterfaceTypeFieldsDisconnectFieldInput {
  disconnect: FieldDisconnectInput
  where: InterfaceTypeFieldsConnectionWhere
}

input InterfaceTypeFieldsFieldInput {
  connect: [InterfaceTypeFieldsConnectFieldInput!]
  create: [InterfaceTypeFieldsCreateFieldInput!]
}

input InterfaceTypeFieldsNodeAggregationWhereInput {
  AND: [InterfaceTypeFieldsNodeAggregationWhereInput!]
  NOT: InterfaceTypeFieldsNodeAggregationWhereInput
  OR: [InterfaceTypeFieldsNodeAggregationWhereInput!]
  defaultValues_AVERAGE_LENGTH_EQUAL: Float
  defaultValues_AVERAGE_LENGTH_GT: Float
  defaultValues_AVERAGE_LENGTH_GTE: Float
  defaultValues_AVERAGE_LENGTH_LT: Float
  defaultValues_AVERAGE_LENGTH_LTE: Float
  defaultValues_LONGEST_LENGTH_EQUAL: Int
  defaultValues_LONGEST_LENGTH_GT: Int
  defaultValues_LONGEST_LENGTH_GTE: Int
  defaultValues_LONGEST_LENGTH_LT: Int
  defaultValues_LONGEST_LENGTH_LTE: Int
  defaultValues_SHORTEST_LENGTH_EQUAL: Int
  defaultValues_SHORTEST_LENGTH_GT: Int
  defaultValues_SHORTEST_LENGTH_GTE: Int
  defaultValues_SHORTEST_LENGTH_LT: Int
  defaultValues_SHORTEST_LENGTH_LTE: Int
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  key_AVERAGE_LENGTH_EQUAL: Float
  key_AVERAGE_LENGTH_GT: Float
  key_AVERAGE_LENGTH_GTE: Float
  key_AVERAGE_LENGTH_LT: Float
  key_AVERAGE_LENGTH_LTE: Float
  key_LONGEST_LENGTH_EQUAL: Int
  key_LONGEST_LENGTH_GT: Int
  key_LONGEST_LENGTH_GTE: Int
  key_LONGEST_LENGTH_LT: Int
  key_LONGEST_LENGTH_LTE: Int
  key_SHORTEST_LENGTH_EQUAL: Int
  key_SHORTEST_LENGTH_GT: Int
  key_SHORTEST_LENGTH_GTE: Int
  key_SHORTEST_LENGTH_LT: Int
  key_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  validationRules_AVERAGE_LENGTH_EQUAL: Float
  validationRules_AVERAGE_LENGTH_GT: Float
  validationRules_AVERAGE_LENGTH_GTE: Float
  validationRules_AVERAGE_LENGTH_LT: Float
  validationRules_AVERAGE_LENGTH_LTE: Float
  validationRules_LONGEST_LENGTH_EQUAL: Int
  validationRules_LONGEST_LENGTH_GT: Int
  validationRules_LONGEST_LENGTH_GTE: Int
  validationRules_LONGEST_LENGTH_LT: Int
  validationRules_LONGEST_LENGTH_LTE: Int
  validationRules_SHORTEST_LENGTH_EQUAL: Int
  validationRules_SHORTEST_LENGTH_GT: Int
  validationRules_SHORTEST_LENGTH_GTE: Int
  validationRules_SHORTEST_LENGTH_LT: Int
  validationRules_SHORTEST_LENGTH_LTE: Int
}

type InterfaceTypeFieldsRelationship {
  cursor: String!
  node: Field!
}

input InterfaceTypeFieldsUpdateConnectionInput {
  node: FieldUpdateInput
}

input InterfaceTypeFieldsUpdateFieldInput {
  connect: [InterfaceTypeFieldsConnectFieldInput!]
  create: [InterfaceTypeFieldsCreateFieldInput!]
  delete: [InterfaceTypeFieldsDeleteFieldInput!]
  disconnect: [InterfaceTypeFieldsDisconnectFieldInput!]
  update: InterfaceTypeFieldsUpdateConnectionInput
  where: InterfaceTypeFieldsConnectionWhere
}

input InterfaceTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = InterfaceType
  name: String!
}

input InterfaceTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more InterfaceTypeSort objects to sort InterfaceTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [InterfaceTypeSort!]
}

input InterfaceTypeOwnerAggregateInput {
  AND: [InterfaceTypeOwnerAggregateInput!]
  NOT: InterfaceTypeOwnerAggregateInput
  OR: [InterfaceTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: InterfaceTypeOwnerNodeAggregationWhereInput
}

input InterfaceTypeOwnerNodeAggregationWhereInput {
  AND: [InterfaceTypeOwnerNodeAggregationWhereInput!]
  NOT: InterfaceTypeOwnerNodeAggregationWhereInput
  OR: [InterfaceTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input InterfaceTypeRelationInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsCreateFieldInput!]
  fieldRefs: [InterfaceTypeFieldRefsCreateFieldInput!]
  fields: [InterfaceTypeFieldsCreateFieldInput!]
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort InterfaceTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one InterfaceTypeSort object.
"""
input InterfaceTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input InterfaceTypeUniqueWhere {
  id: ID
}

input InterfaceTypeUpdateInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsUpdateFieldInput!]
  fieldRefs: [InterfaceTypeFieldRefsUpdateFieldInput!]
  fields: [InterfaceTypeFieldsUpdateFieldInput!]
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type InterfaceTypeUserOwnerAggregationSelection {
  count: Int!
  node: InterfaceTypeUserOwnerNodeAggregateSelection
}

type InterfaceTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input InterfaceTypeWhere {
  AND: [InterfaceTypeWhere!]
  NOT: InterfaceTypeWhere
  OR: [InterfaceTypeWhere!]
  apiOfAtomsAggregate: InterfaceTypeApiOfAtomsAggregateInput

  """
  Return InterfaceTypes where all of the related InterfaceTypeApiOfAtomsConnections match this filter
  """
  apiOfAtomsConnection_ALL: InterfaceTypeApiOfAtomsConnectionWhere

  """
  Return InterfaceTypes where none of the related InterfaceTypeApiOfAtomsConnections match this filter
  """
  apiOfAtomsConnection_NONE: InterfaceTypeApiOfAtomsConnectionWhere

  """
  Return InterfaceTypes where one of the related InterfaceTypeApiOfAtomsConnections match this filter
  """
  apiOfAtomsConnection_SINGLE: InterfaceTypeApiOfAtomsConnectionWhere

  """
  Return InterfaceTypes where some of the related InterfaceTypeApiOfAtomsConnections match this filter
  """
  apiOfAtomsConnection_SOME: InterfaceTypeApiOfAtomsConnectionWhere

  """
  Return InterfaceTypes where all of the related Atoms match this filter
  """
  apiOfAtoms_ALL: AtomWhere

  """
  Return InterfaceTypes where none of the related Atoms match this filter
  """
  apiOfAtoms_NONE: AtomWhere

  """
  Return InterfaceTypes where one of the related Atoms match this filter
  """
  apiOfAtoms_SINGLE: AtomWhere

  """
  Return InterfaceTypes where some of the related Atoms match this filter
  """
  apiOfAtoms_SOME: AtomWhere
  fieldRefsAggregate: InterfaceTypeFieldRefsAggregateInput

  """
  Return InterfaceTypes where all of the related InterfaceTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_ALL: InterfaceTypeFieldRefsConnectionWhere

  """
  Return InterfaceTypes where none of the related InterfaceTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_NONE: InterfaceTypeFieldRefsConnectionWhere

  """
  Return InterfaceTypes where one of the related InterfaceTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_SINGLE: InterfaceTypeFieldRefsConnectionWhere

  """
  Return InterfaceTypes where some of the related InterfaceTypeFieldRefsConnections match this filter
  """
  fieldRefsConnection_SOME: InterfaceTypeFieldRefsConnectionWhere

  """
  Return InterfaceTypes where all of the related Fields match this filter
  """
  fieldRefs_ALL: FieldWhere

  """
  Return InterfaceTypes where none of the related Fields match this filter
  """
  fieldRefs_NONE: FieldWhere

  """
  Return InterfaceTypes where one of the related Fields match this filter
  """
  fieldRefs_SINGLE: FieldWhere

  """
  Return InterfaceTypes where some of the related Fields match this filter
  """
  fieldRefs_SOME: FieldWhere
  fieldsAggregate: InterfaceTypeFieldsAggregateInput

  """
  Return InterfaceTypes where all of the related InterfaceTypeFieldsConnections match this filter
  """
  fieldsConnection_ALL: InterfaceTypeFieldsConnectionWhere

  """
  Return InterfaceTypes where none of the related InterfaceTypeFieldsConnections match this filter
  """
  fieldsConnection_NONE: InterfaceTypeFieldsConnectionWhere

  """
  Return InterfaceTypes where one of the related InterfaceTypeFieldsConnections match this filter
  """
  fieldsConnection_SINGLE: InterfaceTypeFieldsConnectionWhere

  """
  Return InterfaceTypes where some of the related InterfaceTypeFieldsConnections match this filter
  """
  fieldsConnection_SOME: InterfaceTypeFieldsConnectionWhere

  """
  Return InterfaceTypes where all of the related Fields match this filter
  """
  fields_ALL: FieldWhere

  """
  Return InterfaceTypes where none of the related Fields match this filter
  """
  fields_NONE: FieldWhere

  """
  Return InterfaceTypes where one of the related Fields match this filter
  """
  fields_SINGLE: FieldWhere

  """
  Return InterfaceTypes where some of the related Fields match this filter
  """
  fields_SOME: FieldWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: InterfaceTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type InterfaceTypesConnection {
  edges: [InterfaceTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows picking a lambda
"""
type LambdaType implements IBaseType {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): LambdaTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type LambdaTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input LambdaTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
}

input LambdaTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input LambdaTypeConnectOrCreateWhere {
  node: LambdaTypeUniqueWhere!
}

input LambdaTypeConnectWhere {
  node: LambdaTypeWhere!
}

input LambdaTypeCreateInput {
  id: ID!
  kind: TypeKind! = LambdaType
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input LambdaTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
}

input LambdaTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type LambdaTypeEdge {
  cursor: String!
  node: LambdaType!
}

input LambdaTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = LambdaType
  name: String!
}

input LambdaTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more LambdaTypeSort objects to sort LambdaTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [LambdaTypeSort!]
}

input LambdaTypeOwnerAggregateInput {
  AND: [LambdaTypeOwnerAggregateInput!]
  NOT: LambdaTypeOwnerAggregateInput
  OR: [LambdaTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: LambdaTypeOwnerNodeAggregationWhereInput
}

input LambdaTypeOwnerNodeAggregationWhereInput {
  AND: [LambdaTypeOwnerNodeAggregationWhereInput!]
  NOT: LambdaTypeOwnerNodeAggregationWhereInput
  OR: [LambdaTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input LambdaTypeRelationInput {
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort LambdaTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one LambdaTypeSort object.
"""
input LambdaTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input LambdaTypeUniqueWhere {
  id: ID
}

input LambdaTypeUpdateInput {
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type LambdaTypeUserOwnerAggregationSelection {
  count: Int!
  node: LambdaTypeUserOwnerNodeAggregateSelection
}

type LambdaTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input LambdaTypeWhere {
  AND: [LambdaTypeWhere!]
  NOT: LambdaTypeWhere
  OR: [LambdaTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: LambdaTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type LambdaTypesConnection {
  edges: [LambdaTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Mutation {
  createActionTypes(
    input: [ActionTypeCreateInput!]!
  ): CreateActionTypesMutationResponse!
  createApiActions(
    input: [ApiActionCreateInput!]!
  ): CreateApiActionsMutationResponse!
  createAppTypes(input: [AppTypeCreateInput!]!): CreateAppTypesMutationResponse!
  createApps(input: [AppCreateInput!]!): CreateAppsMutationResponse!
  createArrayTypes(
    input: [ArrayTypeCreateInput!]!
  ): CreateArrayTypesMutationResponse!
  createAtoms(input: [AtomCreateInput!]!): CreateAtomsMutationResponse!
  createCodeActions(
    input: [CodeActionCreateInput!]!
  ): CreateCodeActionsMutationResponse!
  createCodeMirrorTypes(
    input: [CodeMirrorTypeCreateInput!]!
  ): CreateCodeMirrorTypesMutationResponse!
  createComponents(
    input: [ComponentCreateInput!]!
  ): CreateComponentsMutationResponse!
  createDomains(input: [DomainCreateInput!]!): CreateDomainsMutationResponse!
  createElementTypes(
    input: [ElementTypeCreateInput!]!
  ): CreateElementTypesMutationResponse!
  createElements(input: [ElementCreateInput!]!): CreateElementsMutationResponse!
  createEnumTypeValues(
    input: [EnumTypeValueCreateInput!]!
  ): CreateEnumTypeValuesMutationResponse!
  createEnumTypes(
    input: [EnumTypeCreateInput!]!
  ): CreateEnumTypesMutationResponse!
  createFields(input: [FieldCreateInput!]!): CreateFieldsMutationResponse!
  createGetBaseTypesReturns(
    input: [GetBaseTypesReturnCreateInput!]!
  ): CreateGetBaseTypesReturnsMutationResponse!
  createHooks(input: [HookCreateInput!]!): CreateHooksMutationResponse!
  createInterfaceTypes(
    input: [InterfaceTypeCreateInput!]!
  ): CreateInterfaceTypesMutationResponse!
  createLambdaTypes(
    input: [LambdaTypeCreateInput!]!
  ): CreateLambdaTypesMutationResponse!
  createPageTypes(
    input: [PageTypeCreateInput!]!
  ): CreatePageTypesMutationResponse!
  createPages(input: [PageCreateInput!]!): CreatePagesMutationResponse!
  createPrimitiveTypes(
    input: [PrimitiveTypeCreateInput!]!
  ): CreatePrimitiveTypesMutationResponse!
  createProps(input: [PropCreateInput!]!): CreatePropsMutationResponse!
  createReactNodeTypes(
    input: [ReactNodeTypeCreateInput!]!
  ): CreateReactNodeTypesMutationResponse!
  createRenderPropTypes(
    input: [RenderPropTypeCreateInput!]!
  ): CreateRenderPropTypesMutationResponse!
  createResources(
    input: [ResourceCreateInput!]!
  ): CreateResourcesMutationResponse!
  createStores(input: [StoreCreateInput!]!): CreateStoresMutationResponse!
  createTags(input: [TagCreateInput!]!): CreateTagsMutationResponse!
  createTypeReferences(
    input: [TypeReferenceCreateInput!]!
  ): CreateTypeReferencesMutationResponse!
  createUnionTypes(
    input: [UnionTypeCreateInput!]!
  ): CreateUnionTypesMutationResponse!
  createUsers(input: [UserCreateInput!]!): CreateUsersMutationResponse!
  deleteActionTypes(
    delete: ActionTypeDeleteInput
    where: ActionTypeWhere
  ): DeleteInfo!
  deleteApiActions(
    delete: ApiActionDeleteInput
    where: ApiActionWhere
  ): DeleteInfo!
  deleteAppTypes(delete: AppTypeDeleteInput, where: AppTypeWhere): DeleteInfo!
  deleteApps(delete: AppDeleteInput, where: AppWhere): DeleteInfo!
  deleteArrayTypes(
    delete: ArrayTypeDeleteInput
    where: ArrayTypeWhere
  ): DeleteInfo!
  deleteAtoms(delete: AtomDeleteInput, where: AtomWhere): DeleteInfo!
  deleteCodeActions(
    delete: CodeActionDeleteInput
    where: CodeActionWhere
  ): DeleteInfo!
  deleteCodeMirrorTypes(
    delete: CodeMirrorTypeDeleteInput
    where: CodeMirrorTypeWhere
  ): DeleteInfo!
  deleteComponents(
    delete: ComponentDeleteInput
    where: ComponentWhere
  ): DeleteInfo!
  deleteDomains(delete: DomainDeleteInput, where: DomainWhere): DeleteInfo!
  deleteElementTypes(
    delete: ElementTypeDeleteInput
    where: ElementTypeWhere
  ): DeleteInfo!
  deleteElements(delete: ElementDeleteInput, where: ElementWhere): DeleteInfo!
  deleteEnumTypeValues(
    delete: EnumTypeValueDeleteInput
    where: EnumTypeValueWhere
  ): DeleteInfo!
  deleteEnumTypes(
    delete: EnumTypeDeleteInput
    where: EnumTypeWhere
  ): DeleteInfo!
  deleteFields(delete: FieldDeleteInput, where: FieldWhere): DeleteInfo!
  deleteGetBaseTypesReturns(where: GetBaseTypesReturnWhere): DeleteInfo!
  deleteHooks(delete: HookDeleteInput, where: HookWhere): DeleteInfo!
  deleteInterfaceTypes(
    delete: InterfaceTypeDeleteInput
    where: InterfaceTypeWhere
  ): DeleteInfo!
  deleteLambdaTypes(
    delete: LambdaTypeDeleteInput
    where: LambdaTypeWhere
  ): DeleteInfo!
  deletePageTypes(
    delete: PageTypeDeleteInput
    where: PageTypeWhere
  ): DeleteInfo!
  deletePages(delete: PageDeleteInput, where: PageWhere): DeleteInfo!
  deletePrimitiveTypes(
    delete: PrimitiveTypeDeleteInput
    where: PrimitiveTypeWhere
  ): DeleteInfo!
  deleteProps(where: PropWhere): DeleteInfo!
  deleteReactNodeTypes(
    delete: ReactNodeTypeDeleteInput
    where: ReactNodeTypeWhere
  ): DeleteInfo!
  deleteRenderPropTypes(
    delete: RenderPropTypeDeleteInput
    where: RenderPropTypeWhere
  ): DeleteInfo!
  deleteResources(
    delete: ResourceDeleteInput
    where: ResourceWhere
  ): DeleteInfo!
  deleteStores(delete: StoreDeleteInput, where: StoreWhere): DeleteInfo!
  deleteTags(delete: TagDeleteInput, where: TagWhere): DeleteInfo!
  deleteTypeReferences(where: TypeReferenceWhere): DeleteInfo!
  deleteUnionTypes(
    delete: UnionTypeDeleteInput
    where: UnionTypeWhere
  ): DeleteInfo!
  deleteUsers(delete: UserDeleteInput, where: UserWhere): DeleteInfo!
  resetDatabase: ResetDatabaseMutationResponse
  updateActionTypes(
    connect: ActionTypeConnectInput
    connectOrCreate: ActionTypeConnectOrCreateInput
    create: ActionTypeRelationInput
    delete: ActionTypeDeleteInput
    disconnect: ActionTypeDisconnectInput
    update: ActionTypeUpdateInput
    where: ActionTypeWhere
  ): UpdateActionTypesMutationResponse!
  updateApiActions(
    connect: ApiActionConnectInput
    connectOrCreate: ApiActionConnectOrCreateInput
    create: ApiActionRelationInput
    delete: ApiActionDeleteInput
    disconnect: ApiActionDisconnectInput
    update: ApiActionUpdateInput
    where: ApiActionWhere
  ): UpdateApiActionsMutationResponse!
  updateAppTypes(
    connect: AppTypeConnectInput
    connectOrCreate: AppTypeConnectOrCreateInput
    create: AppTypeRelationInput
    delete: AppTypeDeleteInput
    disconnect: AppTypeDisconnectInput
    update: AppTypeUpdateInput
    where: AppTypeWhere
  ): UpdateAppTypesMutationResponse!
  updateApps(
    connect: AppConnectInput
    connectOrCreate: AppConnectOrCreateInput
    create: AppRelationInput
    delete: AppDeleteInput
    disconnect: AppDisconnectInput
    update: AppUpdateInput
    where: AppWhere
  ): UpdateAppsMutationResponse!
  updateArrayTypes(
    connect: ArrayTypeConnectInput
    connectOrCreate: ArrayTypeConnectOrCreateInput
    create: ArrayTypeRelationInput
    delete: ArrayTypeDeleteInput
    disconnect: ArrayTypeDisconnectInput
    update: ArrayTypeUpdateInput
    where: ArrayTypeWhere
  ): UpdateArrayTypesMutationResponse!
  updateAtoms(
    connect: AtomConnectInput
    connectOrCreate: AtomConnectOrCreateInput
    create: AtomRelationInput
    delete: AtomDeleteInput
    disconnect: AtomDisconnectInput
    update: AtomUpdateInput
    where: AtomWhere
  ): UpdateAtomsMutationResponse!
  updateCodeActions(
    connect: CodeActionConnectInput
    connectOrCreate: CodeActionConnectOrCreateInput
    create: CodeActionRelationInput
    delete: CodeActionDeleteInput
    disconnect: CodeActionDisconnectInput
    update: CodeActionUpdateInput
    where: CodeActionWhere
  ): UpdateCodeActionsMutationResponse!
  updateCodeMirrorTypes(
    connect: CodeMirrorTypeConnectInput
    connectOrCreate: CodeMirrorTypeConnectOrCreateInput
    create: CodeMirrorTypeRelationInput
    delete: CodeMirrorTypeDeleteInput
    disconnect: CodeMirrorTypeDisconnectInput
    update: CodeMirrorTypeUpdateInput
    where: CodeMirrorTypeWhere
  ): UpdateCodeMirrorTypesMutationResponse!
  updateComponents(
    connect: ComponentConnectInput
    connectOrCreate: ComponentConnectOrCreateInput
    create: ComponentRelationInput
    delete: ComponentDeleteInput
    disconnect: ComponentDisconnectInput
    update: ComponentUpdateInput
    where: ComponentWhere
  ): UpdateComponentsMutationResponse!
  updateDomains(
    connect: DomainConnectInput
    connectOrCreate: DomainConnectOrCreateInput
    create: DomainRelationInput
    delete: DomainDeleteInput
    disconnect: DomainDisconnectInput
    update: DomainUpdateInput
    where: DomainWhere
  ): UpdateDomainsMutationResponse!
  updateElementTypes(
    connect: ElementTypeConnectInput
    connectOrCreate: ElementTypeConnectOrCreateInput
    create: ElementTypeRelationInput
    delete: ElementTypeDeleteInput
    disconnect: ElementTypeDisconnectInput
    update: ElementTypeUpdateInput
    where: ElementTypeWhere
  ): UpdateElementTypesMutationResponse!
  updateElements(
    connect: ElementConnectInput
    connectOrCreate: ElementConnectOrCreateInput
    create: ElementRelationInput
    delete: ElementDeleteInput
    disconnect: ElementDisconnectInput
    update: ElementUpdateInput
    where: ElementWhere
  ): UpdateElementsMutationResponse!
  updateEnumTypeValues(
    connect: EnumTypeValueConnectInput
    connectOrCreate: EnumTypeValueConnectOrCreateInput
    create: EnumTypeValueRelationInput
    delete: EnumTypeValueDeleteInput
    disconnect: EnumTypeValueDisconnectInput
    update: EnumTypeValueUpdateInput
    where: EnumTypeValueWhere
  ): UpdateEnumTypeValuesMutationResponse!
  updateEnumTypes(
    connect: EnumTypeConnectInput
    connectOrCreate: EnumTypeConnectOrCreateInput
    create: EnumTypeRelationInput
    delete: EnumTypeDeleteInput
    disconnect: EnumTypeDisconnectInput
    update: EnumTypeUpdateInput
    where: EnumTypeWhere
  ): UpdateEnumTypesMutationResponse!
  updateFields(
    connect: FieldConnectInput
    connectOrCreate: FieldConnectOrCreateInput
    create: FieldRelationInput
    delete: FieldDeleteInput
    disconnect: FieldDisconnectInput
    update: FieldUpdateInput
    where: FieldWhere
  ): UpdateFieldsMutationResponse!
  updateGetBaseTypesReturns(
    update: GetBaseTypesReturnUpdateInput
    where: GetBaseTypesReturnWhere
  ): UpdateGetBaseTypesReturnsMutationResponse!
  updateHooks(
    connect: HookConnectInput
    connectOrCreate: HookConnectOrCreateInput
    create: HookRelationInput
    delete: HookDeleteInput
    disconnect: HookDisconnectInput
    update: HookUpdateInput
    where: HookWhere
  ): UpdateHooksMutationResponse!
  updateInterfaceTypes(
    connect: InterfaceTypeConnectInput
    connectOrCreate: InterfaceTypeConnectOrCreateInput
    create: InterfaceTypeRelationInput
    delete: InterfaceTypeDeleteInput
    disconnect: InterfaceTypeDisconnectInput
    update: InterfaceTypeUpdateInput
    where: InterfaceTypeWhere
  ): UpdateInterfaceTypesMutationResponse!
  updateLambdaTypes(
    connect: LambdaTypeConnectInput
    connectOrCreate: LambdaTypeConnectOrCreateInput
    create: LambdaTypeRelationInput
    delete: LambdaTypeDeleteInput
    disconnect: LambdaTypeDisconnectInput
    update: LambdaTypeUpdateInput
    where: LambdaTypeWhere
  ): UpdateLambdaTypesMutationResponse!
  updatePageTypes(
    connect: PageTypeConnectInput
    connectOrCreate: PageTypeConnectOrCreateInput
    create: PageTypeRelationInput
    delete: PageTypeDeleteInput
    disconnect: PageTypeDisconnectInput
    update: PageTypeUpdateInput
    where: PageTypeWhere
  ): UpdatePageTypesMutationResponse!
  updatePages(
    connect: PageConnectInput
    connectOrCreate: PageConnectOrCreateInput
    create: PageRelationInput
    delete: PageDeleteInput
    disconnect: PageDisconnectInput
    update: PageUpdateInput
    where: PageWhere
  ): UpdatePagesMutationResponse!
  updatePrimitiveTypes(
    connect: PrimitiveTypeConnectInput
    connectOrCreate: PrimitiveTypeConnectOrCreateInput
    create: PrimitiveTypeRelationInput
    delete: PrimitiveTypeDeleteInput
    disconnect: PrimitiveTypeDisconnectInput
    update: PrimitiveTypeUpdateInput
    where: PrimitiveTypeWhere
  ): UpdatePrimitiveTypesMutationResponse!
  updateProps(
    update: PropUpdateInput
    where: PropWhere
  ): UpdatePropsMutationResponse!
  updateReactNodeTypes(
    connect: ReactNodeTypeConnectInput
    connectOrCreate: ReactNodeTypeConnectOrCreateInput
    create: ReactNodeTypeRelationInput
    delete: ReactNodeTypeDeleteInput
    disconnect: ReactNodeTypeDisconnectInput
    update: ReactNodeTypeUpdateInput
    where: ReactNodeTypeWhere
  ): UpdateReactNodeTypesMutationResponse!
  updateRenderPropTypes(
    connect: RenderPropTypeConnectInput
    connectOrCreate: RenderPropTypeConnectOrCreateInput
    create: RenderPropTypeRelationInput
    delete: RenderPropTypeDeleteInput
    disconnect: RenderPropTypeDisconnectInput
    update: RenderPropTypeUpdateInput
    where: RenderPropTypeWhere
  ): UpdateRenderPropTypesMutationResponse!
  updateResources(
    connect: ResourceConnectInput
    connectOrCreate: ResourceConnectOrCreateInput
    create: ResourceRelationInput
    delete: ResourceDeleteInput
    disconnect: ResourceDisconnectInput
    update: ResourceUpdateInput
    where: ResourceWhere
  ): UpdateResourcesMutationResponse!
  updateStores(
    connect: StoreConnectInput
    connectOrCreate: StoreConnectOrCreateInput
    create: StoreRelationInput
    delete: StoreDeleteInput
    disconnect: StoreDisconnectInput
    update: StoreUpdateInput
    where: StoreWhere
  ): UpdateStoresMutationResponse!
  updateTags(
    connect: TagConnectInput
    connectOrCreate: TagConnectOrCreateInput
    create: TagRelationInput
    delete: TagDeleteInput
    disconnect: TagDisconnectInput
    update: TagUpdateInput
    where: TagWhere
  ): UpdateTagsMutationResponse!
  updateTypeReferences(
    update: TypeReferenceUpdateInput
    where: TypeReferenceWhere
  ): UpdateTypeReferencesMutationResponse!
  updateUnionTypes(
    connect: UnionTypeConnectInput
    connectOrCreate: UnionTypeConnectOrCreateInput
    create: UnionTypeRelationInput
    delete: UnionTypeDeleteInput
    disconnect: UnionTypeDisconnectInput
    update: UnionTypeUpdateInput
    where: UnionTypeWhere
  ): UpdateUnionTypesMutationResponse!
}

type Page {
  _compoundName: String!
  app(directed: Boolean = true, options: AppOptions, where: AppWhere): App!
  appAggregate(
    directed: Boolean = true
    where: AppWhere
  ): PageAppAppAggregationSelection
  appConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PageAppConnectionSort!]
    where: PageAppConnectionWhere
  ): PageAppConnection!
  id: ID!
  kind: PageKind!
  name: String!
  pageContentContainer(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  pageContentContainerAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): PageElementPageContentContainerAggregationSelection
  pageContentContainerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PagePageContentContainerConnectionSort!]
    where: PagePageContentContainerConnectionWhere
  ): PagePageContentContainerConnection!
  rootElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  rootElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): PageElementRootElementAggregationSelection
  rootElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PageRootElementConnectionSort!]
    where: PageRootElementConnectionWhere
  ): PageRootElementConnection!
  slug: String!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): PageStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PageStoreConnectionSort!]
    where: PageStoreConnectionWhere
  ): PageStoreConnection!
  url: String!
}

type PageAggregateSelection {
  _compoundName: StringAggregateSelectionNonNullable!
  count: Int!
  id: IDAggregateSelectionNonNullable!
  url: StringAggregateSelectionNonNullable!
}

input PageAppAggregateInput {
  AND: [PageAppAggregateInput!]
  NOT: PageAppAggregateInput
  OR: [PageAppAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PageAppNodeAggregationWhereInput
}

type PageAppAppAggregationSelection {
  count: Int!
  node: PageAppAppNodeAggregateSelection
}

type PageAppAppNodeAggregateSelection {
  _compoundName: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input PageAppConnectFieldInput {
  connect: AppConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: AppConnectWhere
}

input PageAppConnectOrCreateFieldInput {
  onCreate: PageAppConnectOrCreateFieldInputOnCreate!
  where: AppConnectOrCreateWhere!
}

input PageAppConnectOrCreateFieldInputOnCreate {
  node: AppOnCreateInput!
}

type PageAppConnection {
  edges: [PageAppRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageAppConnectionSort {
  node: AppSort
}

input PageAppConnectionWhere {
  AND: [PageAppConnectionWhere!]
  NOT: PageAppConnectionWhere
  OR: [PageAppConnectionWhere!]
  node: AppWhere
}

input PageAppCreateFieldInput {
  node: AppCreateInput!
}

input PageAppDeleteFieldInput {
  delete: AppDeleteInput
  where: PageAppConnectionWhere
}

input PageAppDisconnectFieldInput {
  disconnect: AppDisconnectInput
  where: PageAppConnectionWhere
}

input PageAppFieldInput {
  connect: PageAppConnectFieldInput
  connectOrCreate: PageAppConnectOrCreateFieldInput
  create: PageAppCreateFieldInput
}

input PageAppNodeAggregationWhereInput {
  AND: [PageAppNodeAggregationWhereInput!]
  NOT: PageAppNodeAggregationWhereInput
  OR: [PageAppNodeAggregationWhereInput!]
  _compoundName_AVERAGE_LENGTH_EQUAL: Float
  _compoundName_AVERAGE_LENGTH_GT: Float
  _compoundName_AVERAGE_LENGTH_GTE: Float
  _compoundName_AVERAGE_LENGTH_LT: Float
  _compoundName_AVERAGE_LENGTH_LTE: Float
  _compoundName_LONGEST_LENGTH_EQUAL: Int
  _compoundName_LONGEST_LENGTH_GT: Int
  _compoundName_LONGEST_LENGTH_GTE: Int
  _compoundName_LONGEST_LENGTH_LT: Int
  _compoundName_LONGEST_LENGTH_LTE: Int
  _compoundName_SHORTEST_LENGTH_EQUAL: Int
  _compoundName_SHORTEST_LENGTH_GT: Int
  _compoundName_SHORTEST_LENGTH_GTE: Int
  _compoundName_SHORTEST_LENGTH_LT: Int
  _compoundName_SHORTEST_LENGTH_LTE: Int
}

type PageAppRelationship {
  cursor: String!
  node: App!
}

input PageAppUpdateConnectionInput {
  node: AppUpdateInput
}

input PageAppUpdateFieldInput {
  connect: PageAppConnectFieldInput
  connectOrCreate: PageAppConnectOrCreateFieldInput
  create: PageAppCreateFieldInput
  delete: PageAppDeleteFieldInput
  disconnect: PageAppDisconnectFieldInput
  update: PageAppUpdateConnectionInput
  where: PageAppConnectionWhere
}

input PageConnectInput {
  app: PageAppConnectFieldInput
  pageContentContainer: PagePageContentContainerConnectFieldInput
  rootElement: PageRootElementConnectFieldInput
  store: PageStoreConnectFieldInput
}

input PageConnectOrCreateInput {
  app: PageAppConnectOrCreateFieldInput
  pageContentContainer: PagePageContentContainerConnectOrCreateFieldInput
  rootElement: PageRootElementConnectOrCreateFieldInput
  store: PageStoreConnectOrCreateFieldInput
}

input PageConnectOrCreateWhere {
  node: PageUniqueWhere!
}

input PageConnectWhere {
  node: PageWhere!
}

input PageCreateInput {
  _compoundName: String!
  app: PageAppFieldInput
  id: ID!
  kind: PageKind!
  pageContentContainer: PagePageContentContainerFieldInput
  rootElement: PageRootElementFieldInput
  store: PageStoreFieldInput
  url: String!
}

input PageDeleteInput {
  app: PageAppDeleteFieldInput
  pageContentContainer: PagePageContentContainerDeleteFieldInput
  rootElement: PageRootElementDeleteFieldInput
  store: PageStoreDeleteFieldInput
}

input PageDisconnectInput {
  app: PageAppDisconnectFieldInput
  pageContentContainer: PagePageContentContainerDisconnectFieldInput
  rootElement: PageRootElementDisconnectFieldInput
  store: PageStoreDisconnectFieldInput
}

type PageEdge {
  cursor: String!
  node: Page!
}

type PageElementPageContentContainerAggregationSelection {
  count: Int!
  node: PageElementPageContentContainerNodeAggregateSelection
}

type PageElementPageContentContainerNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

type PageElementRootElementAggregationSelection {
  count: Int!
  node: PageElementRootElementNodeAggregateSelection
}

type PageElementRootElementNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

"""
Pagination information (Relay)
"""
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum PageKind {
  InternalServerError
  NotFound
  Provider
  Regular
}

input PageOnCreateInput {
  _compoundName: String!
  id: ID!
  kind: PageKind!
  url: String!
}

input PageOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PageSort objects to sort Pages by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PageSort!]
}

input PagePageContentContainerAggregateInput {
  AND: [PagePageContentContainerAggregateInput!]
  NOT: PagePageContentContainerAggregateInput
  OR: [PagePageContentContainerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PagePageContentContainerNodeAggregationWhereInput
}

input PagePageContentContainerConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input PagePageContentContainerConnectOrCreateFieldInput {
  onCreate: PagePageContentContainerConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input PagePageContentContainerConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type PagePageContentContainerConnection {
  edges: [PagePageContentContainerRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PagePageContentContainerConnectionSort {
  node: ElementSort
}

input PagePageContentContainerConnectionWhere {
  AND: [PagePageContentContainerConnectionWhere!]
  NOT: PagePageContentContainerConnectionWhere
  OR: [PagePageContentContainerConnectionWhere!]
  node: ElementWhere
}

input PagePageContentContainerCreateFieldInput {
  node: ElementCreateInput!
}

input PagePageContentContainerDeleteFieldInput {
  delete: ElementDeleteInput
  where: PagePageContentContainerConnectionWhere
}

input PagePageContentContainerDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: PagePageContentContainerConnectionWhere
}

input PagePageContentContainerFieldInput {
  connect: PagePageContentContainerConnectFieldInput
  connectOrCreate: PagePageContentContainerConnectOrCreateFieldInput
  create: PagePageContentContainerCreateFieldInput
}

input PagePageContentContainerNodeAggregationWhereInput {
  AND: [PagePageContentContainerNodeAggregationWhereInput!]
  NOT: PagePageContentContainerNodeAggregationWhereInput
  OR: [PagePageContentContainerNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type PagePageContentContainerRelationship {
  cursor: String!
  node: Element!
}

input PagePageContentContainerUpdateConnectionInput {
  node: ElementUpdateInput
}

input PagePageContentContainerUpdateFieldInput {
  connect: PagePageContentContainerConnectFieldInput
  connectOrCreate: PagePageContentContainerConnectOrCreateFieldInput
  create: PagePageContentContainerCreateFieldInput
  delete: PagePageContentContainerDeleteFieldInput
  disconnect: PagePageContentContainerDisconnectFieldInput
  update: PagePageContentContainerUpdateConnectionInput
  where: PagePageContentContainerConnectionWhere
}

input PageRelationInput {
  app: PageAppCreateFieldInput
  pageContentContainer: PagePageContentContainerCreateFieldInput
  rootElement: PageRootElementCreateFieldInput
  store: PageStoreCreateFieldInput
}

input PageRootElementAggregateInput {
  AND: [PageRootElementAggregateInput!]
  NOT: PageRootElementAggregateInput
  OR: [PageRootElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PageRootElementNodeAggregationWhereInput
}

input PageRootElementConnectFieldInput {
  connect: ElementConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input PageRootElementConnectOrCreateFieldInput {
  onCreate: PageRootElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input PageRootElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type PageRootElementConnection {
  edges: [PageRootElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageRootElementConnectionSort {
  node: ElementSort
}

input PageRootElementConnectionWhere {
  AND: [PageRootElementConnectionWhere!]
  NOT: PageRootElementConnectionWhere
  OR: [PageRootElementConnectionWhere!]
  node: ElementWhere
}

input PageRootElementCreateFieldInput {
  node: ElementCreateInput!
}

input PageRootElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: PageRootElementConnectionWhere
}

input PageRootElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: PageRootElementConnectionWhere
}

input PageRootElementFieldInput {
  connect: PageRootElementConnectFieldInput
  connectOrCreate: PageRootElementConnectOrCreateFieldInput
  create: PageRootElementCreateFieldInput
}

input PageRootElementNodeAggregationWhereInput {
  AND: [PageRootElementNodeAggregationWhereInput!]
  NOT: PageRootElementNodeAggregationWhereInput
  OR: [PageRootElementNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type PageRootElementRelationship {
  cursor: String!
  node: Element!
}

input PageRootElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input PageRootElementUpdateFieldInput {
  connect: PageRootElementConnectFieldInput
  connectOrCreate: PageRootElementConnectOrCreateFieldInput
  create: PageRootElementCreateFieldInput
  delete: PageRootElementDeleteFieldInput
  disconnect: PageRootElementDisconnectFieldInput
  update: PageRootElementUpdateConnectionInput
  where: PageRootElementConnectionWhere
}

"""
Fields to sort Pages by. The order in which sorts are applied is not guaranteed when specifying many fields in one PageSort object.
"""
input PageSort {
  _compoundName: SortDirection
  id: SortDirection
  kind: SortDirection
  url: SortDirection
}

input PageStoreAggregateInput {
  AND: [PageStoreAggregateInput!]
  NOT: PageStoreAggregateInput
  OR: [PageStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PageStoreNodeAggregationWhereInput
}

input PageStoreConnectFieldInput {
  connect: StoreConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: StoreConnectWhere
}

input PageStoreConnectOrCreateFieldInput {
  onCreate: PageStoreConnectOrCreateFieldInputOnCreate!
  where: StoreConnectOrCreateWhere!
}

input PageStoreConnectOrCreateFieldInputOnCreate {
  node: StoreOnCreateInput!
}

type PageStoreConnection {
  edges: [PageStoreRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageStoreConnectionSort {
  node: StoreSort
}

input PageStoreConnectionWhere {
  AND: [PageStoreConnectionWhere!]
  NOT: PageStoreConnectionWhere
  OR: [PageStoreConnectionWhere!]
  node: StoreWhere
}

input PageStoreCreateFieldInput {
  node: StoreCreateInput!
}

input PageStoreDeleteFieldInput {
  delete: StoreDeleteInput
  where: PageStoreConnectionWhere
}

input PageStoreDisconnectFieldInput {
  disconnect: StoreDisconnectInput
  where: PageStoreConnectionWhere
}

input PageStoreFieldInput {
  connect: PageStoreConnectFieldInput
  connectOrCreate: PageStoreConnectOrCreateFieldInput
  create: PageStoreCreateFieldInput
}

input PageStoreNodeAggregationWhereInput {
  AND: [PageStoreNodeAggregationWhereInput!]
  NOT: PageStoreNodeAggregationWhereInput
  OR: [PageStoreNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type PageStoreRelationship {
  cursor: String!
  node: Store!
}

type PageStoreStoreAggregationSelection {
  count: Int!
  node: PageStoreStoreNodeAggregateSelection
}

type PageStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PageStoreUpdateConnectionInput {
  node: StoreUpdateInput
}

input PageStoreUpdateFieldInput {
  connect: PageStoreConnectFieldInput
  connectOrCreate: PageStoreConnectOrCreateFieldInput
  create: PageStoreCreateFieldInput
  delete: PageStoreDeleteFieldInput
  disconnect: PageStoreDisconnectFieldInput
  update: PageStoreUpdateConnectionInput
  where: PageStoreConnectionWhere
}

"""
Allows picking a page from the list of pages
"""
type PageType implements IBaseType {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): PageTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type PageTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PageTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
}

input PageTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input PageTypeConnectOrCreateWhere {
  node: PageTypeUniqueWhere!
}

input PageTypeConnectWhere {
  node: PageTypeWhere!
}

input PageTypeCreateInput {
  id: ID!
  kind: TypeKind! = PageType
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input PageTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
}

input PageTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type PageTypeEdge {
  cursor: String!
  node: PageType!
}

input PageTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = PageType
  name: String!
}

input PageTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PageTypeSort objects to sort PageTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PageTypeSort!]
}

input PageTypeOwnerAggregateInput {
  AND: [PageTypeOwnerAggregateInput!]
  NOT: PageTypeOwnerAggregateInput
  OR: [PageTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PageTypeOwnerNodeAggregationWhereInput
}

input PageTypeOwnerNodeAggregationWhereInput {
  AND: [PageTypeOwnerNodeAggregationWhereInput!]
  NOT: PageTypeOwnerNodeAggregationWhereInput
  OR: [PageTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input PageTypeRelationInput {
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort PageTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one PageTypeSort object.
"""
input PageTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input PageTypeUniqueWhere {
  id: ID
}

input PageTypeUpdateInput {
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type PageTypeUserOwnerAggregationSelection {
  count: Int!
  node: PageTypeUserOwnerNodeAggregateSelection
}

type PageTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input PageTypeWhere {
  AND: [PageTypeWhere!]
  NOT: PageTypeWhere
  OR: [PageTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: PageTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type PageTypesConnection {
  edges: [PageTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageUniqueWhere {
  _compoundName: String
  id: ID
}

input PageUpdateInput {
  _compoundName: String
  app: PageAppUpdateFieldInput
  id: ID
  kind: PageKind
  pageContentContainer: PagePageContentContainerUpdateFieldInput
  rootElement: PageRootElementUpdateFieldInput
  store: PageStoreUpdateFieldInput
  url: String
}

input PageWhere {
  AND: [PageWhere!]
  NOT: PageWhere
  OR: [PageWhere!]
  _compoundName: String
  _compoundName_CONTAINS: String
  _compoundName_ENDS_WITH: String
  _compoundName_IN: [String!]
  _compoundName_MATCHES: String
  _compoundName_STARTS_WITH: String
  app: AppWhere
  appAggregate: PageAppAggregateInput
  appConnection: PageAppConnectionWhere
  appConnection_NOT: PageAppConnectionWhere
  app_NOT: AppWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: PageKind
  kind_IN: [PageKind!]
  pageContentContainer: ElementWhere
  pageContentContainerAggregate: PagePageContentContainerAggregateInput
  pageContentContainerConnection: PagePageContentContainerConnectionWhere
  pageContentContainerConnection_NOT: PagePageContentContainerConnectionWhere
  pageContentContainer_NOT: ElementWhere
  rootElement: ElementWhere
  rootElementAggregate: PageRootElementAggregateInput
  rootElementConnection: PageRootElementConnectionWhere
  rootElementConnection_NOT: PageRootElementConnectionWhere
  rootElement_NOT: ElementWhere
  store: StoreWhere
  storeAggregate: PageStoreAggregateInput
  storeConnection: PageStoreConnectionWhere
  storeConnection_NOT: PageStoreConnectionWhere
  store_NOT: StoreWhere
  url: String
  url_CONTAINS: String
  url_ENDS_WITH: String
  url_IN: [String!]
  url_MATCHES: String
  url_STARTS_WITH: String
}

type PagesConnection {
  edges: [PageEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Base atomic building block of the type system. Represents primitive types - String, Integer, Float, Boolean
"""
type PrimitiveType implements IBaseType {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): PrimitiveTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
  primitiveKind: PrimitiveTypeKind!
}

type PrimitiveTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PrimitiveTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
}

input PrimitiveTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input PrimitiveTypeConnectOrCreateWhere {
  node: PrimitiveTypeUniqueWhere!
}

input PrimitiveTypeConnectWhere {
  node: PrimitiveTypeWhere!
}

input PrimitiveTypeCreateInput {
  id: ID!
  kind: TypeKind! = PrimitiveType
  name: String!
  owner: IBaseTypeOwnerFieldInput
  primitiveKind: PrimitiveTypeKind!
}

input PrimitiveTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
}

input PrimitiveTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type PrimitiveTypeEdge {
  cursor: String!
  node: PrimitiveType!
}

enum PrimitiveTypeKind {
  Boolean
  Integer
  Number
  String
}

input PrimitiveTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = PrimitiveType
  name: String!
  primitiveKind: PrimitiveTypeKind!
}

input PrimitiveTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PrimitiveTypeSort objects to sort PrimitiveTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PrimitiveTypeSort!]
}

input PrimitiveTypeOwnerAggregateInput {
  AND: [PrimitiveTypeOwnerAggregateInput!]
  NOT: PrimitiveTypeOwnerAggregateInput
  OR: [PrimitiveTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PrimitiveTypeOwnerNodeAggregationWhereInput
}

input PrimitiveTypeOwnerNodeAggregationWhereInput {
  AND: [PrimitiveTypeOwnerNodeAggregationWhereInput!]
  NOT: PrimitiveTypeOwnerNodeAggregationWhereInput
  OR: [PrimitiveTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input PrimitiveTypeRelationInput {
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort PrimitiveTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one PrimitiveTypeSort object.
"""
input PrimitiveTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
  primitiveKind: SortDirection
}

input PrimitiveTypeUniqueWhere {
  id: ID
  name: String
  primitiveKind: PrimitiveTypeKind
}

input PrimitiveTypeUpdateInput {
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
  primitiveKind: PrimitiveTypeKind
}

type PrimitiveTypeUserOwnerAggregationSelection {
  count: Int!
  node: PrimitiveTypeUserOwnerNodeAggregateSelection
}

type PrimitiveTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input PrimitiveTypeWhere {
  AND: [PrimitiveTypeWhere!]
  NOT: PrimitiveTypeWhere
  OR: [PrimitiveTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: PrimitiveTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
  primitiveKind: PrimitiveTypeKind
  primitiveKind_IN: [PrimitiveTypeKind!]
}

type PrimitiveTypesConnection {
  edges: [PrimitiveTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Prop {
  data: String!
  id: ID!
}

type PropAggregateSelection {
  count: Int!
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input PropConnectOrCreateWhere {
  node: PropUniqueWhere!
}

input PropConnectWhere {
  node: PropWhere!
}

input PropCreateInput {
  data: String!
  id: ID!
}

type PropEdge {
  cursor: String!
  node: Prop!
}

input PropOnCreateInput {
  data: String!
  id: ID!
}

input PropOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PropSort objects to sort Props by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PropSort!]
}

"""
Fields to sort Props by. The order in which sorts are applied is not guaranteed when specifying many fields in one PropSort object.
"""
input PropSort {
  data: SortDirection
  id: SortDirection
}

input PropUniqueWhere {
  id: ID
}

input PropUpdateInput {
  data: String
  id: ID
}

input PropWhere {
  AND: [PropWhere!]
  NOT: PropWhere
  OR: [PropWhere!]
  data: String
  data_CONTAINS: String
  data_ENDS_WITH: String
  data_IN: [String!]
  data_MATCHES: String
  data_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
}

type PropsConnection {
  edges: [PropEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  actionTypes(
    options: ActionTypeOptions
    where: ActionTypeWhere
  ): [ActionType!]!
  actionTypesAggregate(where: ActionTypeWhere): ActionTypeAggregateSelection!
  actionTypesConnection(
    after: String
    first: Int
    sort: [ActionTypeSort]
    where: ActionTypeWhere
  ): ActionTypesConnection!
  apiActions(options: ApiActionOptions, where: ApiActionWhere): [ApiAction!]!
  apiActionsAggregate(where: ApiActionWhere): ApiActionAggregateSelection!
  apiActionsConnection(
    after: String
    first: Int
    sort: [ApiActionSort]
    where: ApiActionWhere
  ): ApiActionsConnection!
  appTypes(options: AppTypeOptions, where: AppTypeWhere): [AppType!]!
  appTypesAggregate(where: AppTypeWhere): AppTypeAggregateSelection!
  appTypesConnection(
    after: String
    first: Int
    sort: [AppTypeSort]
    where: AppTypeWhere
  ): AppTypesConnection!
  apps(options: AppOptions, where: AppWhere): [App!]!
  appsAggregate(where: AppWhere): AppAggregateSelection!
  appsConnection(
    after: String
    first: Int
    sort: [AppSort]
    where: AppWhere
  ): AppsConnection!
  arrayTypes(options: ArrayTypeOptions, where: ArrayTypeWhere): [ArrayType!]!
  arrayTypesAggregate(where: ArrayTypeWhere): ArrayTypeAggregateSelection!
  arrayTypesConnection(
    after: String
    first: Int
    sort: [ArrayTypeSort]
    where: ArrayTypeWhere
  ): ArrayTypesConnection!
  atoms(options: AtomOptions, where: AtomWhere): [Atom!]!
  atomsAggregate(where: AtomWhere): AtomAggregateSelection!
  atomsConnection(
    after: String
    first: Int
    sort: [AtomSort]
    where: AtomWhere
  ): AtomsConnection!
  baseTypes(options: GetBaseTypesOptions): GetBaseTypesReturn!
  codeActions(
    options: CodeActionOptions
    where: CodeActionWhere
  ): [CodeAction!]!
  codeActionsAggregate(where: CodeActionWhere): CodeActionAggregateSelection!
  codeActionsConnection(
    after: String
    first: Int
    sort: [CodeActionSort]
    where: CodeActionWhere
  ): CodeActionsConnection!
  codeMirrorTypes(
    options: CodeMirrorTypeOptions
    where: CodeMirrorTypeWhere
  ): [CodeMirrorType!]!
  codeMirrorTypesAggregate(
    where: CodeMirrorTypeWhere
  ): CodeMirrorTypeAggregateSelection!
  codeMirrorTypesConnection(
    after: String
    first: Int
    sort: [CodeMirrorTypeSort]
    where: CodeMirrorTypeWhere
  ): CodeMirrorTypesConnection!
  components(options: ComponentOptions, where: ComponentWhere): [Component!]!
  componentsAggregate(where: ComponentWhere): ComponentAggregateSelection!
  componentsConnection(
    after: String
    first: Int
    sort: [ComponentSort]
    where: ComponentWhere
  ): ComponentsConnection!
  domains(options: DomainOptions, where: DomainWhere): [Domain!]!
  domainsAggregate(where: DomainWhere): DomainAggregateSelection!
  domainsConnection(
    after: String
    first: Int
    sort: [DomainSort]
    where: DomainWhere
  ): DomainsConnection!
  elementTypes(
    options: ElementTypeOptions
    where: ElementTypeWhere
  ): [ElementType!]!
  elementTypesAggregate(where: ElementTypeWhere): ElementTypeAggregateSelection!
  elementTypesConnection(
    after: String
    first: Int
    sort: [ElementTypeSort]
    where: ElementTypeWhere
  ): ElementTypesConnection!
  elements(options: ElementOptions, where: ElementWhere): [Element!]!
  elementsAggregate(where: ElementWhere): ElementAggregateSelection!
  elementsConnection(
    after: String
    first: Int
    sort: [ElementSort]
    where: ElementWhere
  ): ElementsConnection!
  enumTypeValues(
    options: EnumTypeValueOptions
    where: EnumTypeValueWhere
  ): [EnumTypeValue!]!
  enumTypeValuesAggregate(
    where: EnumTypeValueWhere
  ): EnumTypeValueAggregateSelection!
  enumTypeValuesConnection(
    after: String
    first: Int
    sort: [EnumTypeValueSort]
    where: EnumTypeValueWhere
  ): EnumTypeValuesConnection!
  enumTypes(options: EnumTypeOptions, where: EnumTypeWhere): [EnumType!]!
  enumTypesAggregate(where: EnumTypeWhere): EnumTypeAggregateSelection!
  enumTypesConnection(
    after: String
    first: Int
    sort: [EnumTypeSort]
    where: EnumTypeWhere
  ): EnumTypesConnection!
  fields(options: FieldOptions, where: FieldWhere): [Field!]!
  fieldsAggregate(where: FieldWhere): FieldAggregateSelection!
  fieldsConnection(
    after: String
    first: Int
    sort: [FieldSort]
    where: FieldWhere
  ): FieldsConnection!
  getBaseTypesReturns(
    options: GetBaseTypesReturnOptions
    where: GetBaseTypesReturnWhere
  ): [GetBaseTypesReturn!]!
  getBaseTypesReturnsAggregate(
    where: GetBaseTypesReturnWhere
  ): GetBaseTypesReturnAggregateSelection!
  getBaseTypesReturnsConnection(
    after: String
    first: Int
    sort: [GetBaseTypesReturnSort]
    where: GetBaseTypesReturnWhere
  ): GetBaseTypesReturnsConnection!

  """
  Returns a list of all Type and Atom entities that reference the type with the given id
  This could be different types of relationships like Atom-Api, ArrayType-itemType, InterfaceType-field, UnionType-unionTypeChild
  """
  getTypeReferences(typeId: ID!): [TypeReference!]
  hooks(options: HookOptions, where: HookWhere): [Hook!]!
  hooksAggregate(where: HookWhere): HookAggregateSelection!
  hooksConnection(
    after: String
    first: Int
    sort: [HookSort]
    where: HookWhere
  ): HooksConnection!
  interfaceTypes(
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): [InterfaceType!]!
  interfaceTypesAggregate(
    where: InterfaceTypeWhere
  ): InterfaceTypeAggregateSelection!
  interfaceTypesConnection(
    after: String
    first: Int
    sort: [InterfaceTypeSort]
    where: InterfaceTypeWhere
  ): InterfaceTypesConnection!

  """
  Does a recursive check to see if the parent type (parentTypeId) contains the descendant type (descendantTypeId) at any level of nesting. Useful for checking for recursion
  """
  isTypeDescendantOf(descendantTypeId: ID!, parentTypeId: ID!): Boolean
  lambdaTypes(
    options: LambdaTypeOptions
    where: LambdaTypeWhere
  ): [LambdaType!]!
  lambdaTypesAggregate(where: LambdaTypeWhere): LambdaTypeAggregateSelection!
  lambdaTypesConnection(
    after: String
    first: Int
    sort: [LambdaTypeSort]
    where: LambdaTypeWhere
  ): LambdaTypesConnection!
  pageTypes(options: PageTypeOptions, where: PageTypeWhere): [PageType!]!
  pageTypesAggregate(where: PageTypeWhere): PageTypeAggregateSelection!
  pageTypesConnection(
    after: String
    first: Int
    sort: [PageTypeSort]
    where: PageTypeWhere
  ): PageTypesConnection!
  pages(options: PageOptions, where: PageWhere): [Page!]!
  pagesAggregate(where: PageWhere): PageAggregateSelection!
  pagesConnection(
    after: String
    first: Int
    sort: [PageSort]
    where: PageWhere
  ): PagesConnection!
  primitiveTypes(
    options: PrimitiveTypeOptions
    where: PrimitiveTypeWhere
  ): [PrimitiveType!]!
  primitiveTypesAggregate(
    where: PrimitiveTypeWhere
  ): PrimitiveTypeAggregateSelection!
  primitiveTypesConnection(
    after: String
    first: Int
    sort: [PrimitiveTypeSort]
    where: PrimitiveTypeWhere
  ): PrimitiveTypesConnection!
  props(options: PropOptions, where: PropWhere): [Prop!]!
  propsAggregate(where: PropWhere): PropAggregateSelection!
  propsConnection(
    after: String
    first: Int
    sort: [PropSort]
    where: PropWhere
  ): PropsConnection!
  reactNodeTypes(
    options: ReactNodeTypeOptions
    where: ReactNodeTypeWhere
  ): [ReactNodeType!]!
  reactNodeTypesAggregate(
    where: ReactNodeTypeWhere
  ): ReactNodeTypeAggregateSelection!
  reactNodeTypesConnection(
    after: String
    first: Int
    sort: [ReactNodeTypeSort]
    where: ReactNodeTypeWhere
  ): ReactNodeTypesConnection!
  renderPropTypes(
    options: RenderPropTypeOptions
    where: RenderPropTypeWhere
  ): [RenderPropType!]!
  renderPropTypesAggregate(
    where: RenderPropTypeWhere
  ): RenderPropTypeAggregateSelection!
  renderPropTypesConnection(
    after: String
    first: Int
    sort: [RenderPropTypeSort]
    where: RenderPropTypeWhere
  ): RenderPropTypesConnection!
  resources(options: ResourceOptions, where: ResourceWhere): [Resource!]!
  resourcesAggregate(where: ResourceWhere): ResourceAggregateSelection!
  resourcesConnection(
    after: String
    first: Int
    sort: [ResourceSort]
    where: ResourceWhere
  ): ResourcesConnection!
  stores(options: StoreOptions, where: StoreWhere): [Store!]!
  storesAggregate(where: StoreWhere): StoreAggregateSelection!
  storesConnection(
    after: String
    first: Int
    sort: [StoreSort]
    where: StoreWhere
  ): StoresConnection!
  tags(options: TagOptions, where: TagWhere): [Tag!]!
  tagsAggregate(where: TagWhere): TagAggregateSelection!
  tagsConnection(
    after: String
    first: Int
    sort: [TagSort]
    where: TagWhere
  ): TagsConnection!
  typeReferences(
    options: TypeReferenceOptions
    where: TypeReferenceWhere
  ): [TypeReference!]!
  typeReferencesAggregate(
    where: TypeReferenceWhere
  ): TypeReferenceAggregateSelection!
  typeReferencesConnection(
    after: String
    first: Int
    sort: [TypeReferenceSort]
    where: TypeReferenceWhere
  ): TypeReferencesConnection!
  unionTypes(options: UnionTypeOptions, where: UnionTypeWhere): [UnionType!]!
  unionTypesAggregate(where: UnionTypeWhere): UnionTypeAggregateSelection!
  unionTypesConnection(
    after: String
    first: Int
    sort: [UnionTypeSort]
    where: UnionTypeWhere
  ): UnionTypesConnection!
  users(options: UserOptions, where: UserWhere): [User!]!
  usersAggregate(where: UserWhere): UserAggregateSelection!
  usersConnection(
    after: String
    first: Int
    sort: [UserSort]
    where: UserWhere
  ): UsersConnection!
}

input QueryOptions {
  limit: Int
  offset: Int
}

"""
Allows picking a Component from the list of components.
It is passed to the rendered element as a React node: `ReactNode`
Prop values for this type have the shape of TypedProp in order to
be distinguished from other element types.
Comparison between different element types:
- RenderPropType: Component select box, results it '(props) => ReactNode' value
- ReactNodeType: Component select box, results it 'ReactNode' value
- ElementType: Current tree element select box, results it 'ReactNode' value
"""
type ReactNodeType implements IBaseType {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ReactNodeTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type ReactNodeTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ReactNodeTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
}

input ReactNodeTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input ReactNodeTypeConnectOrCreateWhere {
  node: ReactNodeTypeUniqueWhere!
}

input ReactNodeTypeConnectWhere {
  node: ReactNodeTypeWhere!
}

input ReactNodeTypeCreateInput {
  id: ID!
  kind: TypeKind! = ReactNodeType
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input ReactNodeTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
}

input ReactNodeTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type ReactNodeTypeEdge {
  cursor: String!
  node: ReactNodeType!
}

input ReactNodeTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = ReactNodeType
  name: String!
}

input ReactNodeTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ReactNodeTypeSort objects to sort ReactNodeTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ReactNodeTypeSort!]
}

input ReactNodeTypeOwnerAggregateInput {
  AND: [ReactNodeTypeOwnerAggregateInput!]
  NOT: ReactNodeTypeOwnerAggregateInput
  OR: [ReactNodeTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ReactNodeTypeOwnerNodeAggregationWhereInput
}

input ReactNodeTypeOwnerNodeAggregationWhereInput {
  AND: [ReactNodeTypeOwnerNodeAggregationWhereInput!]
  NOT: ReactNodeTypeOwnerNodeAggregationWhereInput
  OR: [ReactNodeTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input ReactNodeTypeRelationInput {
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort ReactNodeTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ReactNodeTypeSort object.
"""
input ReactNodeTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ReactNodeTypeUniqueWhere {
  id: ID
  name: String
}

input ReactNodeTypeUpdateInput {
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type ReactNodeTypeUserOwnerAggregationSelection {
  count: Int!
  node: ReactNodeTypeUserOwnerNodeAggregateSelection
}

type ReactNodeTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ReactNodeTypeWhere {
  AND: [ReactNodeTypeWhere!]
  NOT: ReactNodeTypeWhere
  OR: [ReactNodeTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ReactNodeTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ReactNodeTypesConnection {
  edges: [ReactNodeTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows picking a Component from the list of components.
It is passed to the rendered element as a function that takes props as input
and returns a React element: '(props) => ReactNode'
Prop values for this type have the shape of TypedProp in order to
be distinguished from other element types.
Comparison between different element types:
- RenderPropType: Component select box, results it '(props) => ReactNode' value
- ReactNodeType: Component select box, results it 'ReactNode' value
- ElementType: Current tree element select box, results it 'ReactNode' value
"""
type RenderPropType implements IBaseType {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): RenderPropTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
}

type RenderPropTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input RenderPropTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
}

input RenderPropTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
}

input RenderPropTypeConnectOrCreateWhere {
  node: RenderPropTypeUniqueWhere!
}

input RenderPropTypeConnectWhere {
  node: RenderPropTypeWhere!
}

input RenderPropTypeCreateInput {
  id: ID!
  kind: TypeKind! = RenderPropType
  name: String!
  owner: IBaseTypeOwnerFieldInput
}

input RenderPropTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
}

input RenderPropTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
}

type RenderPropTypeEdge {
  cursor: String!
  node: RenderPropType!
}

input RenderPropTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = RenderPropType
  name: String!
}

input RenderPropTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more RenderPropTypeSort objects to sort RenderPropTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [RenderPropTypeSort!]
}

input RenderPropTypeOwnerAggregateInput {
  AND: [RenderPropTypeOwnerAggregateInput!]
  NOT: RenderPropTypeOwnerAggregateInput
  OR: [RenderPropTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: RenderPropTypeOwnerNodeAggregationWhereInput
}

input RenderPropTypeOwnerNodeAggregationWhereInput {
  AND: [RenderPropTypeOwnerNodeAggregationWhereInput!]
  NOT: RenderPropTypeOwnerNodeAggregationWhereInput
  OR: [RenderPropTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input RenderPropTypeRelationInput {
  owner: IBaseTypeOwnerCreateFieldInput
}

"""
Fields to sort RenderPropTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one RenderPropTypeSort object.
"""
input RenderPropTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input RenderPropTypeUniqueWhere {
  id: ID
  name: String
}

input RenderPropTypeUpdateInput {
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
}

type RenderPropTypeUserOwnerAggregationSelection {
  count: Int!
  node: RenderPropTypeUserOwnerNodeAggregateSelection
}

type RenderPropTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input RenderPropTypeWhere {
  AND: [RenderPropTypeWhere!]
  NOT: RenderPropTypeWhere
  OR: [RenderPropTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: RenderPropTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere
}

type RenderPropTypesConnection {
  edges: [RenderPropTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type RenderType {
  id: ID!
  kind: RenderTypeKind!
}

enum RenderTypeKind {
  Atom
  Component
}

type ResetDatabaseMutationResponse {
  success: Boolean
}

type Resource implements WithOwner {
  config(
    directed: Boolean = true
    options: PropOptions
    where: PropWhere
  ): Prop!
  configAggregate(
    directed: Boolean = true
    where: PropWhere
  ): ResourcePropConfigAggregationSelection
  configConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ResourceConfigConnectionSort!]
    where: ResourceConfigConnectionWhere
  ): ResourceConfigConnection!
  id: ID!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ResourceUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [WithOwnerOwnerConnectionSort!]
    where: WithOwnerOwnerConnectionWhere
  ): WithOwnerOwnerConnection!
  type: ResourceType!
}

type ResourceAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ResourceConfigAggregateInput {
  AND: [ResourceConfigAggregateInput!]
  NOT: ResourceConfigAggregateInput
  OR: [ResourceConfigAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ResourceConfigNodeAggregationWhereInput
}

input ResourceConfigConnectFieldInput {
  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: PropConnectWhere
}

input ResourceConfigConnectOrCreateFieldInput {
  onCreate: ResourceConfigConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input ResourceConfigConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type ResourceConfigConnection {
  edges: [ResourceConfigRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ResourceConfigConnectionSort {
  node: PropSort
}

input ResourceConfigConnectionWhere {
  AND: [ResourceConfigConnectionWhere!]
  NOT: ResourceConfigConnectionWhere
  OR: [ResourceConfigConnectionWhere!]
  node: PropWhere
}

input ResourceConfigCreateFieldInput {
  node: PropCreateInput!
}

input ResourceConfigDeleteFieldInput {
  where: ResourceConfigConnectionWhere
}

input ResourceConfigDisconnectFieldInput {
  where: ResourceConfigConnectionWhere
}

input ResourceConfigFieldInput {
  connect: ResourceConfigConnectFieldInput
  connectOrCreate: ResourceConfigConnectOrCreateFieldInput
  create: ResourceConfigCreateFieldInput
}

input ResourceConfigNodeAggregationWhereInput {
  AND: [ResourceConfigNodeAggregationWhereInput!]
  NOT: ResourceConfigNodeAggregationWhereInput
  OR: [ResourceConfigNodeAggregationWhereInput!]
  data_AVERAGE_LENGTH_EQUAL: Float
  data_AVERAGE_LENGTH_GT: Float
  data_AVERAGE_LENGTH_GTE: Float
  data_AVERAGE_LENGTH_LT: Float
  data_AVERAGE_LENGTH_LTE: Float
  data_LONGEST_LENGTH_EQUAL: Int
  data_LONGEST_LENGTH_GT: Int
  data_LONGEST_LENGTH_GTE: Int
  data_LONGEST_LENGTH_LT: Int
  data_LONGEST_LENGTH_LTE: Int
  data_SHORTEST_LENGTH_EQUAL: Int
  data_SHORTEST_LENGTH_GT: Int
  data_SHORTEST_LENGTH_GTE: Int
  data_SHORTEST_LENGTH_LT: Int
  data_SHORTEST_LENGTH_LTE: Int
}

type ResourceConfigRelationship {
  cursor: String!
  node: Prop!
}

input ResourceConfigUpdateConnectionInput {
  node: PropUpdateInput
}

input ResourceConfigUpdateFieldInput {
  connect: ResourceConfigConnectFieldInput
  connectOrCreate: ResourceConfigConnectOrCreateFieldInput
  create: ResourceConfigCreateFieldInput
  delete: ResourceConfigDeleteFieldInput
  disconnect: ResourceConfigDisconnectFieldInput
  update: ResourceConfigUpdateConnectionInput
  where: ResourceConfigConnectionWhere
}

input ResourceConnectInput {
  config: ResourceConfigConnectFieldInput
  owner: WithOwnerOwnerConnectFieldInput
}

input ResourceConnectOrCreateInput {
  config: ResourceConfigConnectOrCreateFieldInput
  owner: WithOwnerOwnerConnectOrCreateFieldInput
}

input ResourceConnectOrCreateWhere {
  node: ResourceUniqueWhere!
}

input ResourceConnectWhere {
  node: ResourceWhere!
}

input ResourceCreateInput {
  config: ResourceConfigFieldInput
  id: ID!
  name: String!
  owner: WithOwnerOwnerFieldInput
  type: ResourceType!
}

input ResourceDeleteInput {
  config: ResourceConfigDeleteFieldInput
  owner: WithOwnerOwnerDeleteFieldInput
}

input ResourceDisconnectInput {
  config: ResourceConfigDisconnectFieldInput
  owner: WithOwnerOwnerDisconnectFieldInput
}

type ResourceEdge {
  cursor: String!
  node: Resource!
}

input ResourceOnCreateInput {
  id: ID!
  name: String!
  type: ResourceType!
}

input ResourceOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ResourceSort objects to sort Resources by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ResourceSort!]
}

input ResourceOwnerAggregateInput {
  AND: [ResourceOwnerAggregateInput!]
  NOT: ResourceOwnerAggregateInput
  OR: [ResourceOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ResourceOwnerNodeAggregationWhereInput
}

input ResourceOwnerNodeAggregationWhereInput {
  AND: [ResourceOwnerNodeAggregationWhereInput!]
  NOT: ResourceOwnerNodeAggregationWhereInput
  OR: [ResourceOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

type ResourcePropConfigAggregationSelection {
  count: Int!
  node: ResourcePropConfigNodeAggregateSelection
}

type ResourcePropConfigNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ResourceRelationInput {
  config: ResourceConfigCreateFieldInput
  owner: WithOwnerOwnerCreateFieldInput
}

"""
Fields to sort Resources by. The order in which sorts are applied is not guaranteed when specifying many fields in one ResourceSort object.
"""
input ResourceSort {
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

enum ResourceType {
  GraphQL
  Rest
}

input ResourceUniqueWhere {
  id: ID
}

input ResourceUpdateInput {
  config: ResourceConfigUpdateFieldInput
  id: ID
  name: String
  owner: WithOwnerOwnerUpdateFieldInput
  type: ResourceType
}

type ResourceUserOwnerAggregationSelection {
  count: Int!
  node: ResourceUserOwnerNodeAggregateSelection
}

type ResourceUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ResourceWhere {
  AND: [ResourceWhere!]
  NOT: ResourceWhere
  OR: [ResourceWhere!]
  config: PropWhere
  configAggregate: ResourceConfigAggregateInput
  configConnection: ResourceConfigConnectionWhere
  configConnection_NOT: ResourceConfigConnectionWhere
  config_NOT: PropWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ResourceOwnerAggregateInput
  ownerConnection: WithOwnerOwnerConnectionWhere
  ownerConnection_NOT: WithOwnerOwnerConnectionWhere
  owner_NOT: UserWhere
  type: ResourceType
  type_IN: [ResourceType!]
}

type ResourcesConnection {
  edges: [ResourceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum Role {
  Admin
  User
}

enum SortDirection {
  """
  Sort by field values in ascending order.
  """
  ASC

  """
  Sort by field values in descending order.
  """
  DESC
}

type Store {
  actions(
    directed: Boolean = true
    options: QueryOptions
    where: AnyActionWhere
  ): [AnyAction!]!
  actionsConnection(
    after: String
    directed: Boolean = true
    first: Int
    where: StoreActionsConnectionWhere
  ): StoreActionsConnection!
  api(
    directed: Boolean = true
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): InterfaceType!
  apiAggregate(
    directed: Boolean = true
    where: InterfaceTypeWhere
  ): StoreInterfaceTypeApiAggregationSelection
  apiConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [StoreApiConnectionSort!]
    where: StoreApiConnectionWhere
  ): StoreApiConnection!
  component(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): Component
  componentAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): StoreComponentComponentAggregationSelection
  componentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [StoreComponentConnectionSort!]
    where: StoreComponentConnectionWhere
  ): StoreComponentConnection!
  id: ID!
  name: String!
  page(directed: Boolean = true, options: PageOptions, where: PageWhere): Page
  pageAggregate(
    directed: Boolean = true
    where: PageWhere
  ): StorePagePageAggregationSelection
  pageConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [StorePageConnectionSort!]
    where: StorePageConnectionWhere
  ): StorePageConnection!
}

input StoreActionsApiActionConnectFieldInput {
  connect: [ApiActionConnectInput!]
  where: ApiActionConnectWhere
}

input StoreActionsApiActionConnectOrCreateFieldInput {
  onCreate: StoreActionsApiActionConnectOrCreateFieldInputOnCreate!
  where: ApiActionConnectOrCreateWhere!
}

input StoreActionsApiActionConnectOrCreateFieldInputOnCreate {
  node: ApiActionOnCreateInput!
}

input StoreActionsApiActionConnectionWhere {
  AND: [StoreActionsApiActionConnectionWhere!]
  NOT: StoreActionsApiActionConnectionWhere
  OR: [StoreActionsApiActionConnectionWhere!]
  node: ApiActionWhere
}

input StoreActionsApiActionCreateFieldInput {
  node: ApiActionCreateInput!
}

input StoreActionsApiActionDeleteFieldInput {
  delete: ApiActionDeleteInput
  where: StoreActionsApiActionConnectionWhere
}

input StoreActionsApiActionDisconnectFieldInput {
  disconnect: ApiActionDisconnectInput
  where: StoreActionsApiActionConnectionWhere
}

input StoreActionsApiActionFieldInput {
  connect: [StoreActionsApiActionConnectFieldInput!]
  connectOrCreate: [StoreActionsApiActionConnectOrCreateFieldInput!]
  create: [StoreActionsApiActionCreateFieldInput!]
}

input StoreActionsApiActionUpdateConnectionInput {
  node: ApiActionUpdateInput
}

input StoreActionsApiActionUpdateFieldInput {
  connect: [StoreActionsApiActionConnectFieldInput!]
  connectOrCreate: [StoreActionsApiActionConnectOrCreateFieldInput!]
  create: [StoreActionsApiActionCreateFieldInput!]
  delete: [StoreActionsApiActionDeleteFieldInput!]
  disconnect: [StoreActionsApiActionDisconnectFieldInput!]
  update: StoreActionsApiActionUpdateConnectionInput
  where: StoreActionsApiActionConnectionWhere
}

input StoreActionsCodeActionConnectFieldInput {
  connect: [CodeActionConnectInput!]
  where: CodeActionConnectWhere
}

input StoreActionsCodeActionConnectOrCreateFieldInput {
  onCreate: StoreActionsCodeActionConnectOrCreateFieldInputOnCreate!
  where: CodeActionConnectOrCreateWhere!
}

input StoreActionsCodeActionConnectOrCreateFieldInputOnCreate {
  node: CodeActionOnCreateInput!
}

input StoreActionsCodeActionConnectionWhere {
  AND: [StoreActionsCodeActionConnectionWhere!]
  NOT: StoreActionsCodeActionConnectionWhere
  OR: [StoreActionsCodeActionConnectionWhere!]
  node: CodeActionWhere
}

input StoreActionsCodeActionCreateFieldInput {
  node: CodeActionCreateInput!
}

input StoreActionsCodeActionDeleteFieldInput {
  delete: CodeActionDeleteInput
  where: StoreActionsCodeActionConnectionWhere
}

input StoreActionsCodeActionDisconnectFieldInput {
  disconnect: CodeActionDisconnectInput
  where: StoreActionsCodeActionConnectionWhere
}

input StoreActionsCodeActionFieldInput {
  connect: [StoreActionsCodeActionConnectFieldInput!]
  connectOrCreate: [StoreActionsCodeActionConnectOrCreateFieldInput!]
  create: [StoreActionsCodeActionCreateFieldInput!]
}

input StoreActionsCodeActionUpdateConnectionInput {
  node: CodeActionUpdateInput
}

input StoreActionsCodeActionUpdateFieldInput {
  connect: [StoreActionsCodeActionConnectFieldInput!]
  connectOrCreate: [StoreActionsCodeActionConnectOrCreateFieldInput!]
  create: [StoreActionsCodeActionCreateFieldInput!]
  delete: [StoreActionsCodeActionDeleteFieldInput!]
  disconnect: [StoreActionsCodeActionDisconnectFieldInput!]
  update: StoreActionsCodeActionUpdateConnectionInput
  where: StoreActionsCodeActionConnectionWhere
}

input StoreActionsConnectInput {
  ApiAction: [StoreActionsApiActionConnectFieldInput!]
  CodeAction: [StoreActionsCodeActionConnectFieldInput!]
}

input StoreActionsConnectOrCreateInput {
  ApiAction: [StoreActionsApiActionConnectOrCreateFieldInput!]
  CodeAction: [StoreActionsCodeActionConnectOrCreateFieldInput!]
}

type StoreActionsConnection {
  edges: [StoreActionsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input StoreActionsConnectionWhere {
  ApiAction: StoreActionsApiActionConnectionWhere
  CodeAction: StoreActionsCodeActionConnectionWhere
}

input StoreActionsCreateFieldInput {
  ApiAction: [StoreActionsApiActionCreateFieldInput!]
  CodeAction: [StoreActionsCodeActionCreateFieldInput!]
}

input StoreActionsCreateInput {
  ApiAction: StoreActionsApiActionFieldInput
  CodeAction: StoreActionsCodeActionFieldInput
}

input StoreActionsDeleteInput {
  ApiAction: [StoreActionsApiActionDeleteFieldInput!]
  CodeAction: [StoreActionsCodeActionDeleteFieldInput!]
}

input StoreActionsDisconnectInput {
  ApiAction: [StoreActionsApiActionDisconnectFieldInput!]
  CodeAction: [StoreActionsCodeActionDisconnectFieldInput!]
}

type StoreActionsRelationship {
  cursor: String!
  node: AnyAction!
}

input StoreActionsUpdateInput {
  ApiAction: [StoreActionsApiActionUpdateFieldInput!]
  CodeAction: [StoreActionsCodeActionUpdateFieldInput!]
}

type StoreAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input StoreApiAggregateInput {
  AND: [StoreApiAggregateInput!]
  NOT: StoreApiAggregateInput
  OR: [StoreApiAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: StoreApiNodeAggregationWhereInput
}

input StoreApiConnectFieldInput {
  connect: InterfaceTypeConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: InterfaceTypeConnectWhere
}

input StoreApiConnectOrCreateFieldInput {
  onCreate: StoreApiConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input StoreApiConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

type StoreApiConnection {
  edges: [StoreApiRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input StoreApiConnectionSort {
  node: InterfaceTypeSort
}

input StoreApiConnectionWhere {
  AND: [StoreApiConnectionWhere!]
  NOT: StoreApiConnectionWhere
  OR: [StoreApiConnectionWhere!]
  node: InterfaceTypeWhere
}

input StoreApiCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input StoreApiDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: StoreApiConnectionWhere
}

input StoreApiDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: StoreApiConnectionWhere
}

input StoreApiFieldInput {
  connect: StoreApiConnectFieldInput
  connectOrCreate: StoreApiConnectOrCreateFieldInput
  create: StoreApiCreateFieldInput
}

input StoreApiNodeAggregationWhereInput {
  AND: [StoreApiNodeAggregationWhereInput!]
  NOT: StoreApiNodeAggregationWhereInput
  OR: [StoreApiNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type StoreApiRelationship {
  cursor: String!
  node: InterfaceType!
}

input StoreApiUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input StoreApiUpdateFieldInput {
  connect: StoreApiConnectFieldInput
  connectOrCreate: StoreApiConnectOrCreateFieldInput
  create: StoreApiCreateFieldInput
  delete: StoreApiDeleteFieldInput
  disconnect: StoreApiDisconnectFieldInput
  update: StoreApiUpdateConnectionInput
  where: StoreApiConnectionWhere
}

input StoreComponentAggregateInput {
  AND: [StoreComponentAggregateInput!]
  NOT: StoreComponentAggregateInput
  OR: [StoreComponentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: StoreComponentNodeAggregationWhereInput
}

type StoreComponentComponentAggregationSelection {
  count: Int!
  node: StoreComponentComponentNodeAggregateSelection
}

type StoreComponentComponentNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  keyGenerator: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
}

input StoreComponentConnectFieldInput {
  connect: ComponentConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ComponentConnectWhere
}

input StoreComponentConnectOrCreateFieldInput {
  onCreate: StoreComponentConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input StoreComponentConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type StoreComponentConnection {
  edges: [StoreComponentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input StoreComponentConnectionSort {
  node: ComponentSort
}

input StoreComponentConnectionWhere {
  AND: [StoreComponentConnectionWhere!]
  NOT: StoreComponentConnectionWhere
  OR: [StoreComponentConnectionWhere!]
  node: ComponentWhere
}

input StoreComponentCreateFieldInput {
  node: ComponentCreateInput!
}

input StoreComponentDeleteFieldInput {
  delete: ComponentDeleteInput
  where: StoreComponentConnectionWhere
}

input StoreComponentDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: StoreComponentConnectionWhere
}

input StoreComponentFieldInput {
  connect: StoreComponentConnectFieldInput
  connectOrCreate: StoreComponentConnectOrCreateFieldInput
  create: StoreComponentCreateFieldInput
}

input StoreComponentNodeAggregationWhereInput {
  AND: [StoreComponentNodeAggregationWhereInput!]
  NOT: StoreComponentNodeAggregationWhereInput
  OR: [StoreComponentNodeAggregationWhereInput!]
  keyGenerator_AVERAGE_LENGTH_EQUAL: Float
  keyGenerator_AVERAGE_LENGTH_GT: Float
  keyGenerator_AVERAGE_LENGTH_GTE: Float
  keyGenerator_AVERAGE_LENGTH_LT: Float
  keyGenerator_AVERAGE_LENGTH_LTE: Float
  keyGenerator_LONGEST_LENGTH_EQUAL: Int
  keyGenerator_LONGEST_LENGTH_GT: Int
  keyGenerator_LONGEST_LENGTH_GTE: Int
  keyGenerator_LONGEST_LENGTH_LT: Int
  keyGenerator_LONGEST_LENGTH_LTE: Int
  keyGenerator_SHORTEST_LENGTH_EQUAL: Int
  keyGenerator_SHORTEST_LENGTH_GT: Int
  keyGenerator_SHORTEST_LENGTH_GTE: Int
  keyGenerator_SHORTEST_LENGTH_LT: Int
  keyGenerator_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type StoreComponentRelationship {
  cursor: String!
  node: Component!
}

input StoreComponentUpdateConnectionInput {
  node: ComponentUpdateInput
}

input StoreComponentUpdateFieldInput {
  connect: StoreComponentConnectFieldInput
  connectOrCreate: StoreComponentConnectOrCreateFieldInput
  create: StoreComponentCreateFieldInput
  delete: StoreComponentDeleteFieldInput
  disconnect: StoreComponentDisconnectFieldInput
  update: StoreComponentUpdateConnectionInput
  where: StoreComponentConnectionWhere
}

input StoreConnectInput {
  actions: StoreActionsConnectInput
  api: StoreApiConnectFieldInput
  component: StoreComponentConnectFieldInput
  page: StorePageConnectFieldInput
}

input StoreConnectOrCreateInput {
  actions: StoreActionsConnectOrCreateInput
  api: StoreApiConnectOrCreateFieldInput
  component: StoreComponentConnectOrCreateFieldInput
  page: StorePageConnectOrCreateFieldInput
}

input StoreConnectOrCreateWhere {
  node: StoreUniqueWhere!
}

input StoreConnectWhere {
  node: StoreWhere!
}

input StoreCreateInput {
  actions: StoreActionsCreateInput
  api: StoreApiFieldInput
  component: StoreComponentFieldInput
  id: ID!
  name: String!
  page: StorePageFieldInput
}

input StoreDeleteInput {
  actions: StoreActionsDeleteInput
  api: StoreApiDeleteFieldInput
  component: StoreComponentDeleteFieldInput
  page: StorePageDeleteFieldInput
}

input StoreDisconnectInput {
  actions: StoreActionsDisconnectInput
  api: StoreApiDisconnectFieldInput
  component: StoreComponentDisconnectFieldInput
  page: StorePageDisconnectFieldInput
}

type StoreEdge {
  cursor: String!
  node: Store!
}

type StoreInterfaceTypeApiAggregationSelection {
  count: Int!
  node: StoreInterfaceTypeApiNodeAggregateSelection
}

type StoreInterfaceTypeApiNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input StoreOnCreateInput {
  id: ID!
  name: String!
}

input StoreOptions {
  limit: Int
  offset: Int

  """
  Specify one or more StoreSort objects to sort Stores by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [StoreSort!]
}

input StorePageAggregateInput {
  AND: [StorePageAggregateInput!]
  NOT: StorePageAggregateInput
  OR: [StorePageAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: StorePageNodeAggregationWhereInput
}

input StorePageConnectFieldInput {
  connect: PageConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: PageConnectWhere
}

input StorePageConnectOrCreateFieldInput {
  onCreate: StorePageConnectOrCreateFieldInputOnCreate!
  where: PageConnectOrCreateWhere!
}

input StorePageConnectOrCreateFieldInputOnCreate {
  node: PageOnCreateInput!
}

type StorePageConnection {
  edges: [StorePageRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input StorePageConnectionSort {
  node: PageSort
}

input StorePageConnectionWhere {
  AND: [StorePageConnectionWhere!]
  NOT: StorePageConnectionWhere
  OR: [StorePageConnectionWhere!]
  node: PageWhere
}

input StorePageCreateFieldInput {
  node: PageCreateInput!
}

input StorePageDeleteFieldInput {
  delete: PageDeleteInput
  where: StorePageConnectionWhere
}

input StorePageDisconnectFieldInput {
  disconnect: PageDisconnectInput
  where: StorePageConnectionWhere
}

input StorePageFieldInput {
  connect: StorePageConnectFieldInput
  connectOrCreate: StorePageConnectOrCreateFieldInput
  create: StorePageCreateFieldInput
}

input StorePageNodeAggregationWhereInput {
  AND: [StorePageNodeAggregationWhereInput!]
  NOT: StorePageNodeAggregationWhereInput
  OR: [StorePageNodeAggregationWhereInput!]
  _compoundName_AVERAGE_LENGTH_EQUAL: Float
  _compoundName_AVERAGE_LENGTH_GT: Float
  _compoundName_AVERAGE_LENGTH_GTE: Float
  _compoundName_AVERAGE_LENGTH_LT: Float
  _compoundName_AVERAGE_LENGTH_LTE: Float
  _compoundName_LONGEST_LENGTH_EQUAL: Int
  _compoundName_LONGEST_LENGTH_GT: Int
  _compoundName_LONGEST_LENGTH_GTE: Int
  _compoundName_LONGEST_LENGTH_LT: Int
  _compoundName_LONGEST_LENGTH_LTE: Int
  _compoundName_SHORTEST_LENGTH_EQUAL: Int
  _compoundName_SHORTEST_LENGTH_GT: Int
  _compoundName_SHORTEST_LENGTH_GTE: Int
  _compoundName_SHORTEST_LENGTH_LT: Int
  _compoundName_SHORTEST_LENGTH_LTE: Int
  url_AVERAGE_LENGTH_EQUAL: Float
  url_AVERAGE_LENGTH_GT: Float
  url_AVERAGE_LENGTH_GTE: Float
  url_AVERAGE_LENGTH_LT: Float
  url_AVERAGE_LENGTH_LTE: Float
  url_LONGEST_LENGTH_EQUAL: Int
  url_LONGEST_LENGTH_GT: Int
  url_LONGEST_LENGTH_GTE: Int
  url_LONGEST_LENGTH_LT: Int
  url_LONGEST_LENGTH_LTE: Int
  url_SHORTEST_LENGTH_EQUAL: Int
  url_SHORTEST_LENGTH_GT: Int
  url_SHORTEST_LENGTH_GTE: Int
  url_SHORTEST_LENGTH_LT: Int
  url_SHORTEST_LENGTH_LTE: Int
}

type StorePagePageAggregationSelection {
  count: Int!
  node: StorePagePageNodeAggregateSelection
}

type StorePagePageNodeAggregateSelection {
  _compoundName: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  url: StringAggregateSelectionNonNullable!
}

type StorePageRelationship {
  cursor: String!
  node: Page!
}

input StorePageUpdateConnectionInput {
  node: PageUpdateInput
}

input StorePageUpdateFieldInput {
  connect: StorePageConnectFieldInput
  connectOrCreate: StorePageConnectOrCreateFieldInput
  create: StorePageCreateFieldInput
  delete: StorePageDeleteFieldInput
  disconnect: StorePageDisconnectFieldInput
  update: StorePageUpdateConnectionInput
  where: StorePageConnectionWhere
}

input StoreRelationInput {
  actions: StoreActionsCreateFieldInput
  api: StoreApiCreateFieldInput
  component: StoreComponentCreateFieldInput
  page: StorePageCreateFieldInput
}

"""
Fields to sort Stores by. The order in which sorts are applied is not guaranteed when specifying many fields in one StoreSort object.
"""
input StoreSort {
  id: SortDirection
  name: SortDirection
}

input StoreUniqueWhere {
  id: ID
}

input StoreUpdateInput {
  actions: StoreActionsUpdateInput
  api: StoreApiUpdateFieldInput
  component: StoreComponentUpdateFieldInput
  id: ID
  name: String
  page: StorePageUpdateFieldInput
}

input StoreWhere {
  AND: [StoreWhere!]
  NOT: StoreWhere
  OR: [StoreWhere!]

  """
  Return Stores where all of the related StoreActionsConnections match this filter
  """
  actionsConnection_ALL: StoreActionsConnectionWhere

  """
  Return Stores where none of the related StoreActionsConnections match this filter
  """
  actionsConnection_NONE: StoreActionsConnectionWhere

  """
  Return Stores where one of the related StoreActionsConnections match this filter
  """
  actionsConnection_SINGLE: StoreActionsConnectionWhere

  """
  Return Stores where some of the related StoreActionsConnections match this filter
  """
  actionsConnection_SOME: StoreActionsConnectionWhere
  api: InterfaceTypeWhere
  apiAggregate: StoreApiAggregateInput
  apiConnection: StoreApiConnectionWhere
  apiConnection_NOT: StoreApiConnectionWhere
  api_NOT: InterfaceTypeWhere
  component: ComponentWhere
  componentAggregate: StoreComponentAggregateInput
  componentConnection: StoreComponentConnectionWhere
  componentConnection_NOT: StoreComponentConnectionWhere
  component_NOT: ComponentWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  page: PageWhere
  pageAggregate: StorePageAggregateInput
  pageConnection: StorePageConnectionWhere
  pageConnection_NOT: StorePageConnectionWhere
  page_NOT: PageWhere
}

type StoresConnection {
  edges: [StoreEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StringAggregateSelectionNonNullable {
  longest: String!
  shortest: String!
}

type StringAggregateSelectionNullable {
  longest: String
  shortest: String
}

type Tag {
  atoms(
    directed: Boolean = true
    options: AtomOptions
    where: AtomWhere
  ): [Atom!]!
  atomsAggregate(
    directed: Boolean = true
    where: AtomWhere
  ): TagAtomAtomsAggregationSelection
  atomsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TagAtomsConnectionSort!]
    where: TagAtomsConnectionWhere
  ): TagAtomsConnection!
  children(
    directed: Boolean = true
    options: TagOptions
    where: TagWhere
  ): [Tag!]!
  childrenAggregate(
    directed: Boolean = true
    where: TagWhere
  ): TagTagChildrenAggregationSelection
  childrenConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TagChildrenConnectionSort!]
    where: TagChildrenConnectionWhere
  ): TagChildrenConnection!
  descendants: [Tag!]!
  id: ID!
  isRoot: Boolean
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): TagUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TagOwnerConnectionSort!]
    where: TagOwnerConnectionWhere
  ): TagOwnerConnection!
  parent(directed: Boolean = true, options: TagOptions, where: TagWhere): Tag
  parentAggregate(
    directed: Boolean = true
    where: TagWhere
  ): TagTagParentAggregationSelection
  parentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TagParentConnectionSort!]
    where: TagParentConnectionWhere
  ): TagParentConnection!
}

type TagAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

type TagAtomAtomsAggregationSelection {
  count: Int!
  node: TagAtomAtomsNodeAggregateSelection
}

type TagAtomAtomsNodeAggregateSelection {
  externalCssSource: StringAggregateSelectionNullable!
  externalJsSource: StringAggregateSelectionNullable!
  externalSourceType: StringAggregateSelectionNullable!
  icon: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input TagAtomsAggregateInput {
  AND: [TagAtomsAggregateInput!]
  NOT: TagAtomsAggregateInput
  OR: [TagAtomsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TagAtomsNodeAggregationWhereInput
}

input TagAtomsConnectFieldInput {
  connect: [AtomConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: AtomConnectWhere
}

input TagAtomsConnectOrCreateFieldInput {
  onCreate: TagAtomsConnectOrCreateFieldInputOnCreate!
  where: AtomConnectOrCreateWhere!
}

input TagAtomsConnectOrCreateFieldInputOnCreate {
  node: AtomOnCreateInput!
}

type TagAtomsConnection {
  edges: [TagAtomsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagAtomsConnectionSort {
  node: AtomSort
}

input TagAtomsConnectionWhere {
  AND: [TagAtomsConnectionWhere!]
  NOT: TagAtomsConnectionWhere
  OR: [TagAtomsConnectionWhere!]
  node: AtomWhere
}

input TagAtomsCreateFieldInput {
  node: AtomCreateInput!
}

input TagAtomsDeleteFieldInput {
  delete: AtomDeleteInput
  where: TagAtomsConnectionWhere
}

input TagAtomsDisconnectFieldInput {
  disconnect: AtomDisconnectInput
  where: TagAtomsConnectionWhere
}

input TagAtomsFieldInput {
  connect: [TagAtomsConnectFieldInput!]
  connectOrCreate: [TagAtomsConnectOrCreateFieldInput!]
  create: [TagAtomsCreateFieldInput!]
}

input TagAtomsNodeAggregationWhereInput {
  AND: [TagAtomsNodeAggregationWhereInput!]
  NOT: TagAtomsNodeAggregationWhereInput
  OR: [TagAtomsNodeAggregationWhereInput!]
  externalCssSource_AVERAGE_LENGTH_EQUAL: Float
  externalCssSource_AVERAGE_LENGTH_GT: Float
  externalCssSource_AVERAGE_LENGTH_GTE: Float
  externalCssSource_AVERAGE_LENGTH_LT: Float
  externalCssSource_AVERAGE_LENGTH_LTE: Float
  externalCssSource_LONGEST_LENGTH_EQUAL: Int
  externalCssSource_LONGEST_LENGTH_GT: Int
  externalCssSource_LONGEST_LENGTH_GTE: Int
  externalCssSource_LONGEST_LENGTH_LT: Int
  externalCssSource_LONGEST_LENGTH_LTE: Int
  externalCssSource_SHORTEST_LENGTH_EQUAL: Int
  externalCssSource_SHORTEST_LENGTH_GT: Int
  externalCssSource_SHORTEST_LENGTH_GTE: Int
  externalCssSource_SHORTEST_LENGTH_LT: Int
  externalCssSource_SHORTEST_LENGTH_LTE: Int
  externalJsSource_AVERAGE_LENGTH_EQUAL: Float
  externalJsSource_AVERAGE_LENGTH_GT: Float
  externalJsSource_AVERAGE_LENGTH_GTE: Float
  externalJsSource_AVERAGE_LENGTH_LT: Float
  externalJsSource_AVERAGE_LENGTH_LTE: Float
  externalJsSource_LONGEST_LENGTH_EQUAL: Int
  externalJsSource_LONGEST_LENGTH_GT: Int
  externalJsSource_LONGEST_LENGTH_GTE: Int
  externalJsSource_LONGEST_LENGTH_LT: Int
  externalJsSource_LONGEST_LENGTH_LTE: Int
  externalJsSource_SHORTEST_LENGTH_EQUAL: Int
  externalJsSource_SHORTEST_LENGTH_GT: Int
  externalJsSource_SHORTEST_LENGTH_GTE: Int
  externalJsSource_SHORTEST_LENGTH_LT: Int
  externalJsSource_SHORTEST_LENGTH_LTE: Int
  externalSourceType_AVERAGE_LENGTH_EQUAL: Float
  externalSourceType_AVERAGE_LENGTH_GT: Float
  externalSourceType_AVERAGE_LENGTH_GTE: Float
  externalSourceType_AVERAGE_LENGTH_LT: Float
  externalSourceType_AVERAGE_LENGTH_LTE: Float
  externalSourceType_LONGEST_LENGTH_EQUAL: Int
  externalSourceType_LONGEST_LENGTH_GT: Int
  externalSourceType_LONGEST_LENGTH_GTE: Int
  externalSourceType_LONGEST_LENGTH_LT: Int
  externalSourceType_LONGEST_LENGTH_LTE: Int
  externalSourceType_SHORTEST_LENGTH_EQUAL: Int
  externalSourceType_SHORTEST_LENGTH_GT: Int
  externalSourceType_SHORTEST_LENGTH_GTE: Int
  externalSourceType_SHORTEST_LENGTH_LT: Int
  externalSourceType_SHORTEST_LENGTH_LTE: Int
  icon_AVERAGE_LENGTH_EQUAL: Float
  icon_AVERAGE_LENGTH_GT: Float
  icon_AVERAGE_LENGTH_GTE: Float
  icon_AVERAGE_LENGTH_LT: Float
  icon_AVERAGE_LENGTH_LTE: Float
  icon_LONGEST_LENGTH_EQUAL: Int
  icon_LONGEST_LENGTH_GT: Int
  icon_LONGEST_LENGTH_GTE: Int
  icon_LONGEST_LENGTH_LT: Int
  icon_LONGEST_LENGTH_LTE: Int
  icon_SHORTEST_LENGTH_EQUAL: Int
  icon_SHORTEST_LENGTH_GT: Int
  icon_SHORTEST_LENGTH_GTE: Int
  icon_SHORTEST_LENGTH_LT: Int
  icon_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type TagAtomsRelationship {
  cursor: String!
  node: Atom!
}

input TagAtomsUpdateConnectionInput {
  node: AtomUpdateInput
}

input TagAtomsUpdateFieldInput {
  connect: [TagAtomsConnectFieldInput!]
  connectOrCreate: [TagAtomsConnectOrCreateFieldInput!]
  create: [TagAtomsCreateFieldInput!]
  delete: [TagAtomsDeleteFieldInput!]
  disconnect: [TagAtomsDisconnectFieldInput!]
  update: TagAtomsUpdateConnectionInput
  where: TagAtomsConnectionWhere
}

input TagChildrenAggregateInput {
  AND: [TagChildrenAggregateInput!]
  NOT: TagChildrenAggregateInput
  OR: [TagChildrenAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TagChildrenNodeAggregationWhereInput
}

input TagChildrenConnectFieldInput {
  connect: [TagConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: TagConnectWhere
}

input TagChildrenConnectOrCreateFieldInput {
  onCreate: TagChildrenConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input TagChildrenConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type TagChildrenConnection {
  edges: [TagChildrenRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagChildrenConnectionSort {
  node: TagSort
}

input TagChildrenConnectionWhere {
  AND: [TagChildrenConnectionWhere!]
  NOT: TagChildrenConnectionWhere
  OR: [TagChildrenConnectionWhere!]
  node: TagWhere
}

input TagChildrenCreateFieldInput {
  node: TagCreateInput!
}

input TagChildrenDeleteFieldInput {
  delete: TagDeleteInput
  where: TagChildrenConnectionWhere
}

input TagChildrenDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: TagChildrenConnectionWhere
}

input TagChildrenFieldInput {
  connect: [TagChildrenConnectFieldInput!]
  connectOrCreate: [TagChildrenConnectOrCreateFieldInput!]
  create: [TagChildrenCreateFieldInput!]
}

input TagChildrenNodeAggregationWhereInput {
  AND: [TagChildrenNodeAggregationWhereInput!]
  NOT: TagChildrenNodeAggregationWhereInput
  OR: [TagChildrenNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type TagChildrenRelationship {
  cursor: String!
  node: Tag!
}

input TagChildrenUpdateConnectionInput {
  node: TagUpdateInput
}

input TagChildrenUpdateFieldInput {
  connect: [TagChildrenConnectFieldInput!]
  connectOrCreate: [TagChildrenConnectOrCreateFieldInput!]
  create: [TagChildrenCreateFieldInput!]
  delete: [TagChildrenDeleteFieldInput!]
  disconnect: [TagChildrenDisconnectFieldInput!]
  update: TagChildrenUpdateConnectionInput
  where: TagChildrenConnectionWhere
}

input TagConnectInput {
  atoms: [TagAtomsConnectFieldInput!]
  children: [TagChildrenConnectFieldInput!]
  owner: TagOwnerConnectFieldInput
  parent: TagParentConnectFieldInput
}

input TagConnectOrCreateInput {
  atoms: [TagAtomsConnectOrCreateFieldInput!]
  children: [TagChildrenConnectOrCreateFieldInput!]
  owner: TagOwnerConnectOrCreateFieldInput
  parent: TagParentConnectOrCreateFieldInput
}

input TagConnectOrCreateWhere {
  node: TagUniqueWhere!
}

input TagConnectWhere {
  node: TagWhere!
}

input TagCreateInput {
  atoms: TagAtomsFieldInput
  children: TagChildrenFieldInput
  id: ID!
  name: String!
  owner: TagOwnerFieldInput
  parent: TagParentFieldInput
}

input TagDeleteInput {
  atoms: [TagAtomsDeleteFieldInput!]
  children: [TagChildrenDeleteFieldInput!]
  owner: TagOwnerDeleteFieldInput
  parent: TagParentDeleteFieldInput
}

input TagDisconnectInput {
  atoms: [TagAtomsDisconnectFieldInput!]
  children: [TagChildrenDisconnectFieldInput!]
  owner: TagOwnerDisconnectFieldInput
  parent: TagParentDisconnectFieldInput
}

type TagEdge {
  cursor: String!
  node: Tag!
}

input TagOnCreateInput {
  id: ID!
  name: String!
}

input TagOptions {
  limit: Int
  offset: Int

  """
  Specify one or more TagSort objects to sort Tags by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [TagSort!]
}

input TagOwnerAggregateInput {
  AND: [TagOwnerAggregateInput!]
  NOT: TagOwnerAggregateInput
  OR: [TagOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TagOwnerNodeAggregationWhereInput
}

input TagOwnerConnectFieldInput {
  connect: UserConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: UserConnectWhere
}

input TagOwnerConnectOrCreateFieldInput {
  onCreate: TagOwnerConnectOrCreateFieldInputOnCreate!
  where: UserConnectOrCreateWhere!
}

input TagOwnerConnectOrCreateFieldInputOnCreate {
  node: UserOnCreateInput!
}

type TagOwnerConnection {
  edges: [TagOwnerRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagOwnerConnectionSort {
  node: UserSort
}

input TagOwnerConnectionWhere {
  AND: [TagOwnerConnectionWhere!]
  NOT: TagOwnerConnectionWhere
  OR: [TagOwnerConnectionWhere!]
  node: UserWhere
}

input TagOwnerCreateFieldInput {
  node: UserCreateInput!
}

input TagOwnerDeleteFieldInput {
  delete: UserDeleteInput
  where: TagOwnerConnectionWhere
}

input TagOwnerDisconnectFieldInput {
  disconnect: UserDisconnectInput
  where: TagOwnerConnectionWhere
}

input TagOwnerFieldInput {
  connect: TagOwnerConnectFieldInput
  connectOrCreate: TagOwnerConnectOrCreateFieldInput
  create: TagOwnerCreateFieldInput
}

input TagOwnerNodeAggregationWhereInput {
  AND: [TagOwnerNodeAggregationWhereInput!]
  NOT: TagOwnerNodeAggregationWhereInput
  OR: [TagOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

type TagOwnerRelationship {
  cursor: String!
  node: User!
}

input TagOwnerUpdateConnectionInput {
  node: UserUpdateInput
}

input TagOwnerUpdateFieldInput {
  connect: TagOwnerConnectFieldInput
  connectOrCreate: TagOwnerConnectOrCreateFieldInput
  create: TagOwnerCreateFieldInput
  delete: TagOwnerDeleteFieldInput
  disconnect: TagOwnerDisconnectFieldInput
  update: TagOwnerUpdateConnectionInput
  where: TagOwnerConnectionWhere
}

input TagParentAggregateInput {
  AND: [TagParentAggregateInput!]
  NOT: TagParentAggregateInput
  OR: [TagParentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TagParentNodeAggregationWhereInput
}

input TagParentConnectFieldInput {
  connect: TagConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: TagConnectWhere
}

input TagParentConnectOrCreateFieldInput {
  onCreate: TagParentConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input TagParentConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type TagParentConnection {
  edges: [TagParentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagParentConnectionSort {
  node: TagSort
}

input TagParentConnectionWhere {
  AND: [TagParentConnectionWhere!]
  NOT: TagParentConnectionWhere
  OR: [TagParentConnectionWhere!]
  node: TagWhere
}

input TagParentCreateFieldInput {
  node: TagCreateInput!
}

input TagParentDeleteFieldInput {
  delete: TagDeleteInput
  where: TagParentConnectionWhere
}

input TagParentDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: TagParentConnectionWhere
}

input TagParentFieldInput {
  connect: TagParentConnectFieldInput
  connectOrCreate: TagParentConnectOrCreateFieldInput
  create: TagParentCreateFieldInput
}

input TagParentNodeAggregationWhereInput {
  AND: [TagParentNodeAggregationWhereInput!]
  NOT: TagParentNodeAggregationWhereInput
  OR: [TagParentNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type TagParentRelationship {
  cursor: String!
  node: Tag!
}

input TagParentUpdateConnectionInput {
  node: TagUpdateInput
}

input TagParentUpdateFieldInput {
  connect: TagParentConnectFieldInput
  connectOrCreate: TagParentConnectOrCreateFieldInput
  create: TagParentCreateFieldInput
  delete: TagParentDeleteFieldInput
  disconnect: TagParentDisconnectFieldInput
  update: TagParentUpdateConnectionInput
  where: TagParentConnectionWhere
}

input TagRelationInput {
  atoms: [TagAtomsCreateFieldInput!]
  children: [TagChildrenCreateFieldInput!]
  owner: TagOwnerCreateFieldInput
  parent: TagParentCreateFieldInput
}

"""
Fields to sort Tags by. The order in which sorts are applied is not guaranteed when specifying many fields in one TagSort object.
"""
input TagSort {
  id: SortDirection
  isRoot: SortDirection
  name: SortDirection
}

type TagTagChildrenAggregationSelection {
  count: Int!
  node: TagTagChildrenNodeAggregateSelection
}

type TagTagChildrenNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

type TagTagParentAggregationSelection {
  count: Int!
  node: TagTagParentNodeAggregateSelection
}

type TagTagParentNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input TagUniqueWhere {
  id: ID
  name: String
}

input TagUpdateInput {
  atoms: [TagAtomsUpdateFieldInput!]
  children: [TagChildrenUpdateFieldInput!]
  id: ID
  name: String
  owner: TagOwnerUpdateFieldInput
  parent: TagParentUpdateFieldInput
}

type TagUserOwnerAggregationSelection {
  count: Int!
  node: TagUserOwnerNodeAggregateSelection
}

type TagUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input TagWhere {
  AND: [TagWhere!]
  NOT: TagWhere
  OR: [TagWhere!]
  atomsAggregate: TagAtomsAggregateInput

  """
  Return Tags where all of the related TagAtomsConnections match this filter
  """
  atomsConnection_ALL: TagAtomsConnectionWhere

  """
  Return Tags where none of the related TagAtomsConnections match this filter
  """
  atomsConnection_NONE: TagAtomsConnectionWhere

  """
  Return Tags where one of the related TagAtomsConnections match this filter
  """
  atomsConnection_SINGLE: TagAtomsConnectionWhere

  """
  Return Tags where some of the related TagAtomsConnections match this filter
  """
  atomsConnection_SOME: TagAtomsConnectionWhere

  """
  Return Tags where all of the related Atoms match this filter
  """
  atoms_ALL: AtomWhere

  """
  Return Tags where none of the related Atoms match this filter
  """
  atoms_NONE: AtomWhere

  """
  Return Tags where one of the related Atoms match this filter
  """
  atoms_SINGLE: AtomWhere

  """
  Return Tags where some of the related Atoms match this filter
  """
  atoms_SOME: AtomWhere
  childrenAggregate: TagChildrenAggregateInput

  """
  Return Tags where all of the related TagChildrenConnections match this filter
  """
  childrenConnection_ALL: TagChildrenConnectionWhere

  """
  Return Tags where none of the related TagChildrenConnections match this filter
  """
  childrenConnection_NONE: TagChildrenConnectionWhere

  """
  Return Tags where one of the related TagChildrenConnections match this filter
  """
  childrenConnection_SINGLE: TagChildrenConnectionWhere

  """
  Return Tags where some of the related TagChildrenConnections match this filter
  """
  childrenConnection_SOME: TagChildrenConnectionWhere

  """
  Return Tags where all of the related Tags match this filter
  """
  children_ALL: TagWhere

  """
  Return Tags where none of the related Tags match this filter
  """
  children_NONE: TagWhere

  """
  Return Tags where one of the related Tags match this filter
  """
  children_SINGLE: TagWhere

  """
  Return Tags where some of the related Tags match this filter
  """
  children_SOME: TagWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: TagOwnerAggregateInput
  ownerConnection: TagOwnerConnectionWhere
  ownerConnection_NOT: TagOwnerConnectionWhere
  owner_NOT: UserWhere
  parent: TagWhere
  parentAggregate: TagParentAggregateInput
  parentConnection: TagParentConnectionWhere
  parentConnection_NOT: TagParentConnectionWhere
  parent_NOT: TagWhere
}

type TagsConnection {
  edges: [TagEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum TypeKind {
  ActionType
  AppType
  ArrayType
  CodeMirrorType
  ElementType
  EnumType
  InterfaceType
  LambdaType
  PageType
  PrimitiveType
  ReactNodeType
  RenderPropType
  UnionType
}

type TypeReference {
  """
  The type of resource - Atom, InterfaceType, etc.
  """
  label: String!

  """
  The name of the resource referencing the type
  """
  name: String!
}

type TypeReferenceAggregateSelection {
  count: Int!
  label: StringAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input TypeReferenceCreateInput {
  label: String!
  name: String!
}

type TypeReferenceEdge {
  cursor: String!
  node: TypeReference!
}

input TypeReferenceOptions {
  limit: Int
  offset: Int

  """
  Specify one or more TypeReferenceSort objects to sort TypeReferences by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [TypeReferenceSort!]
}

"""
Fields to sort TypeReferences by. The order in which sorts are applied is not guaranteed when specifying many fields in one TypeReferenceSort object.
"""
input TypeReferenceSort {
  label: SortDirection
  name: SortDirection
}

input TypeReferenceUpdateInput {
  label: String
  name: String
}

input TypeReferenceWhere {
  AND: [TypeReferenceWhere!]
  NOT: TypeReferenceWhere
  OR: [TypeReferenceWhere!]
  label: String
  label_CONTAINS: String
  label_ENDS_WITH: String
  label_IN: [String!]
  label_MATCHES: String
  label_STARTS_WITH: String
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
}

type TypeReferencesConnection {
  edges: [TypeReferenceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows picking one of a set of types
"""
type UnionType implements IBaseType & WithDescendants {
  descendantTypesIds: [ID!]!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): UnionTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [IBaseTypeOwnerConnectionSort!]
    where: IBaseTypeOwnerConnectionWhere
  ): IBaseTypeOwnerConnection!
  typesOfUnionType(
    directed: Boolean = true
    options: QueryOptions
    where: AnyTypeWhere
  ): [AnyType!]!
  typesOfUnionTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    where: UnionTypeTypesOfUnionTypeConnectionWhere
  ): UnionTypeTypesOfUnionTypeConnection!
}

type UnionTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input UnionTypeConnectInput {
  owner: IBaseTypeOwnerConnectFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeConnectInput
}

input UnionTypeConnectOrCreateInput {
  owner: IBaseTypeOwnerConnectOrCreateFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeConnectOrCreateInput
}

input UnionTypeConnectOrCreateWhere {
  node: UnionTypeUniqueWhere!
}

input UnionTypeConnectWhere {
  node: UnionTypeWhere!
}

input UnionTypeCreateInput {
  id: ID!
  kind: TypeKind! = UnionType
  name: String!
  owner: IBaseTypeOwnerFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeCreateInput
}

input UnionTypeDeleteInput {
  owner: IBaseTypeOwnerDeleteFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeDeleteInput
}

input UnionTypeDisconnectInput {
  owner: IBaseTypeOwnerDisconnectFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeDisconnectInput
}

type UnionTypeEdge {
  cursor: String!
  node: UnionType!
}

input UnionTypeOnCreateInput {
  id: ID!
  kind: TypeKind! = UnionType
  name: String!
}

input UnionTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more UnionTypeSort objects to sort UnionTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [UnionTypeSort!]
}

input UnionTypeOwnerAggregateInput {
  AND: [UnionTypeOwnerAggregateInput!]
  NOT: UnionTypeOwnerAggregateInput
  OR: [UnionTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UnionTypeOwnerNodeAggregationWhereInput
}

input UnionTypeOwnerNodeAggregationWhereInput {
  AND: [UnionTypeOwnerNodeAggregationWhereInput!]
  NOT: UnionTypeOwnerNodeAggregationWhereInput
  OR: [UnionTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_LENGTH_EQUAL: Float
  auth0Id_AVERAGE_LENGTH_GT: Float
  auth0Id_AVERAGE_LENGTH_GTE: Float
  auth0Id_AVERAGE_LENGTH_LT: Float
  auth0Id_AVERAGE_LENGTH_LTE: Float
  auth0Id_LONGEST_LENGTH_EQUAL: Int
  auth0Id_LONGEST_LENGTH_GT: Int
  auth0Id_LONGEST_LENGTH_GTE: Int
  auth0Id_LONGEST_LENGTH_LT: Int
  auth0Id_LONGEST_LENGTH_LTE: Int
  auth0Id_SHORTEST_LENGTH_EQUAL: Int
  auth0Id_SHORTEST_LENGTH_GT: Int
  auth0Id_SHORTEST_LENGTH_GTE: Int
  auth0Id_SHORTEST_LENGTH_LT: Int
  auth0Id_SHORTEST_LENGTH_LTE: Int
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  username_AVERAGE_LENGTH_EQUAL: Float
  username_AVERAGE_LENGTH_GT: Float
  username_AVERAGE_LENGTH_GTE: Float
  username_AVERAGE_LENGTH_LT: Float
  username_AVERAGE_LENGTH_LTE: Float
  username_LONGEST_LENGTH_EQUAL: Int
  username_LONGEST_LENGTH_GT: Int
  username_LONGEST_LENGTH_GTE: Int
  username_LONGEST_LENGTH_LT: Int
  username_LONGEST_LENGTH_LTE: Int
  username_SHORTEST_LENGTH_EQUAL: Int
  username_SHORTEST_LENGTH_GT: Int
  username_SHORTEST_LENGTH_GTE: Int
  username_SHORTEST_LENGTH_LT: Int
  username_SHORTEST_LENGTH_LTE: Int
}

input UnionTypeRelationInput {
  owner: IBaseTypeOwnerCreateFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeCreateFieldInput
}

"""
Fields to sort UnionTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one UnionTypeSort object.
"""
input UnionTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input UnionTypeTypesOfUnionTypeActionTypeConnectFieldInput {
  connect: [ActionTypeConnectInput!]
  where: ActionTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInputOnCreate!
  where: ActionTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInputOnCreate {
  node: ActionTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeActionTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeActionTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeActionTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeActionTypeConnectionWhere!]
  node: ActionTypeWhere
}

input UnionTypeTypesOfUnionTypeActionTypeCreateFieldInput {
  node: ActionTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeActionTypeDeleteFieldInput {
  delete: ActionTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeActionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeActionTypeDisconnectFieldInput {
  disconnect: ActionTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeActionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeActionTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeActionTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeActionTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeActionTypeUpdateConnectionInput {
  node: ActionTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeActionTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeActionTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeActionTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeActionTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeActionTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeActionTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeActionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeAppTypeConnectFieldInput {
  connect: [AppTypeConnectInput!]
  where: AppTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInputOnCreate!
  where: AppTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInputOnCreate {
  node: AppTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeAppTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeAppTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeAppTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeAppTypeConnectionWhere!]
  node: AppTypeWhere
}

input UnionTypeTypesOfUnionTypeAppTypeCreateFieldInput {
  node: AppTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeAppTypeDeleteFieldInput {
  delete: AppTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeAppTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeAppTypeDisconnectFieldInput {
  disconnect: AppTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeAppTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeAppTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeAppTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeAppTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeAppTypeUpdateConnectionInput {
  node: AppTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeAppTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeAppTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeAppTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeAppTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeAppTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeAppTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeAppTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeArrayTypeConnectFieldInput {
  connect: [ArrayTypeConnectInput!]
  where: ArrayTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInputOnCreate!
  where: ArrayTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInputOnCreate {
  node: ArrayTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere!]
  node: ArrayTypeWhere
}

input UnionTypeTypesOfUnionTypeArrayTypeCreateFieldInput {
  node: ArrayTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeArrayTypeDeleteFieldInput {
  delete: ArrayTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeArrayTypeDisconnectFieldInput {
  disconnect: ArrayTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeArrayTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeArrayTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeArrayTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeArrayTypeUpdateConnectionInput {
  node: ArrayTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeArrayTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeArrayTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeArrayTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeArrayTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeArrayTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeArrayTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectFieldInput {
  connect: [CodeMirrorTypeConnectInput!]
  where: CodeMirrorTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInputOnCreate!
  where: CodeMirrorTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInputOnCreate {
  node: CodeMirrorTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere!]
  node: CodeMirrorTypeWhere
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeCreateFieldInput {
  node: CodeMirrorTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeDeleteFieldInput {
  delete: CodeMirrorTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeDisconnectFieldInput {
  disconnect: CodeMirrorTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeCodeMirrorTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeUpdateConnectionInput {
  node: CodeMirrorTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeCodeMirrorTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeCodeMirrorTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeCodeMirrorTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeCodeMirrorTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeConnectInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeConnectFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeConnectFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeConnectFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeConnectFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeConnectFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeConnectFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeConnectFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectFieldInput!]
  RenderPropType: [UnionTypeTypesOfUnionTypeRenderPropTypeConnectFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeConnectFieldInput!]
}

input UnionTypeTypesOfUnionTypeConnectOrCreateInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInput!]
  RenderPropType: [UnionTypeTypesOfUnionTypeRenderPropTypeConnectOrCreateFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInput!]
}

type UnionTypeTypesOfUnionTypeConnection {
  edges: [UnionTypeTypesOfUnionTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UnionTypeTypesOfUnionTypeConnectionWhere {
  ActionType: UnionTypeTypesOfUnionTypeActionTypeConnectionWhere
  AppType: UnionTypeTypesOfUnionTypeAppTypeConnectionWhere
  ArrayType: UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere
  CodeMirrorType: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere
  ElementType: UnionTypeTypesOfUnionTypeElementTypeConnectionWhere
  EnumType: UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere
  InterfaceType: UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere
  LambdaType: UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere
  PageType: UnionTypeTypesOfUnionTypePageTypeConnectionWhere
  PrimitiveType: UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere
  ReactNodeType: UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere
  RenderPropType: UnionTypeTypesOfUnionTypeRenderPropTypeConnectionWhere
  UnionType: UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeCreateFieldInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeCreateFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeCreateFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeCreateFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeCreateFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeCreateFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeCreateFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeCreateFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeCreateFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeCreateFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeCreateFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeCreateFieldInput!]
  RenderPropType: [UnionTypeTypesOfUnionTypeRenderPropTypeCreateFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeCreateInput {
  ActionType: UnionTypeTypesOfUnionTypeActionTypeFieldInput
  AppType: UnionTypeTypesOfUnionTypeAppTypeFieldInput
  ArrayType: UnionTypeTypesOfUnionTypeArrayTypeFieldInput
  CodeMirrorType: UnionTypeTypesOfUnionTypeCodeMirrorTypeFieldInput
  ElementType: UnionTypeTypesOfUnionTypeElementTypeFieldInput
  EnumType: UnionTypeTypesOfUnionTypeEnumTypeFieldInput
  InterfaceType: UnionTypeTypesOfUnionTypeInterfaceTypeFieldInput
  LambdaType: UnionTypeTypesOfUnionTypeLambdaTypeFieldInput
  PageType: UnionTypeTypesOfUnionTypePageTypeFieldInput
  PrimitiveType: UnionTypeTypesOfUnionTypePrimitiveTypeFieldInput
  ReactNodeType: UnionTypeTypesOfUnionTypeReactNodeTypeFieldInput
  RenderPropType: UnionTypeTypesOfUnionTypeRenderPropTypeFieldInput
  UnionType: UnionTypeTypesOfUnionTypeUnionTypeFieldInput
}

input UnionTypeTypesOfUnionTypeDeleteInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeDeleteFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeDeleteFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeDeleteFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeDeleteFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeDeleteFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeDeleteFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeDeleteFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeDeleteFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeDeleteFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeDeleteFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeDeleteFieldInput!]
  RenderPropType: [UnionTypeTypesOfUnionTypeRenderPropTypeDeleteFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeDeleteFieldInput!]
}

input UnionTypeTypesOfUnionTypeDisconnectInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeDisconnectFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeDisconnectFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeDisconnectFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeDisconnectFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeDisconnectFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeDisconnectFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeDisconnectFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeDisconnectFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeDisconnectFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeDisconnectFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeDisconnectFieldInput!]
  RenderPropType: [UnionTypeTypesOfUnionTypeRenderPropTypeDisconnectFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeDisconnectFieldInput!]
}

input UnionTypeTypesOfUnionTypeElementTypeConnectFieldInput {
  connect: [ElementTypeConnectInput!]
  where: ElementTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInputOnCreate!
  where: ElementTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInputOnCreate {
  node: ElementTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeElementTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeElementTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeElementTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeElementTypeConnectionWhere!]
  node: ElementTypeWhere
}

input UnionTypeTypesOfUnionTypeElementTypeCreateFieldInput {
  node: ElementTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeElementTypeDeleteFieldInput {
  delete: ElementTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeElementTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeElementTypeDisconnectFieldInput {
  disconnect: ElementTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeElementTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeElementTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeElementTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeElementTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeElementTypeUpdateConnectionInput {
  node: ElementTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeElementTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeElementTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeElementTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeElementTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeElementTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeElementTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeElementTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeEnumTypeConnectFieldInput {
  connect: [EnumTypeConnectInput!]
  where: EnumTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInputOnCreate!
  where: EnumTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInputOnCreate {
  node: EnumTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere!]
  node: EnumTypeWhere
}

input UnionTypeTypesOfUnionTypeEnumTypeCreateFieldInput {
  node: EnumTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeEnumTypeDeleteFieldInput {
  delete: EnumTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeEnumTypeDisconnectFieldInput {
  disconnect: EnumTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeEnumTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeEnumTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeEnumTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeEnumTypeUpdateConnectionInput {
  node: EnumTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeEnumTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeEnumTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeEnumTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeEnumTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeEnumTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeEnumTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeInterfaceTypeConnectFieldInput {
  connect: [InterfaceTypeConnectInput!]
  where: InterfaceTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere!]
  node: InterfaceTypeWhere
}

input UnionTypeTypesOfUnionTypeInterfaceTypeCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeInterfaceTypeDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeInterfaceTypeDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeInterfaceTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeInterfaceTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeInterfaceTypeUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeInterfaceTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeInterfaceTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeInterfaceTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeInterfaceTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeInterfaceTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeLambdaTypeConnectFieldInput {
  connect: [LambdaTypeConnectInput!]
  where: LambdaTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInputOnCreate!
  where: LambdaTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInputOnCreate {
  node: LambdaTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere!]
  node: LambdaTypeWhere
}

input UnionTypeTypesOfUnionTypeLambdaTypeCreateFieldInput {
  node: LambdaTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeLambdaTypeDeleteFieldInput {
  delete: LambdaTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeLambdaTypeDisconnectFieldInput {
  disconnect: LambdaTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeLambdaTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeLambdaTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeLambdaTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeLambdaTypeUpdateConnectionInput {
  node: LambdaTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeLambdaTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeLambdaTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeLambdaTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeLambdaTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeLambdaTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeLambdaTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePageTypeConnectFieldInput {
  connect: [PageTypeConnectInput!]
  where: PageTypeConnectWhere
}

input UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInputOnCreate!
  where: PageTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInputOnCreate {
  node: PageTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypePageTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypePageTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypePageTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypePageTypeConnectionWhere!]
  node: PageTypeWhere
}

input UnionTypeTypesOfUnionTypePageTypeCreateFieldInput {
  node: PageTypeCreateInput!
}

input UnionTypeTypesOfUnionTypePageTypeDeleteFieldInput {
  delete: PageTypeDeleteInput
  where: UnionTypeTypesOfUnionTypePageTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePageTypeDisconnectFieldInput {
  disconnect: PageTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypePageTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePageTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypePageTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypePageTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypePageTypeUpdateConnectionInput {
  node: PageTypeUpdateInput
}

input UnionTypeTypesOfUnionTypePageTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypePageTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypePageTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypePageTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypePageTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypePageTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypePageTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePrimitiveTypeConnectFieldInput {
  connect: [PrimitiveTypeConnectInput!]
  where: PrimitiveTypeConnectWhere
}

input UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInputOnCreate!
  where: PrimitiveTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInputOnCreate {
  node: PrimitiveTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere!]
  node: PrimitiveTypeWhere
}

input UnionTypeTypesOfUnionTypePrimitiveTypeCreateFieldInput {
  node: PrimitiveTypeCreateInput!
}

input UnionTypeTypesOfUnionTypePrimitiveTypeDeleteFieldInput {
  delete: PrimitiveTypeDeleteInput
  where: UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePrimitiveTypeDisconnectFieldInput {
  disconnect: PrimitiveTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePrimitiveTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypePrimitiveTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypePrimitiveTypeUpdateConnectionInput {
  node: PrimitiveTypeUpdateInput
}

input UnionTypeTypesOfUnionTypePrimitiveTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypePrimitiveTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypePrimitiveTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypePrimitiveTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypePrimitiveTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeReactNodeTypeConnectFieldInput {
  connect: [ReactNodeTypeConnectInput!]
  where: ReactNodeTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInputOnCreate!
  where: ReactNodeTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInputOnCreate {
  node: ReactNodeTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere!]
  node: ReactNodeTypeWhere
}

input UnionTypeTypesOfUnionTypeReactNodeTypeCreateFieldInput {
  node: ReactNodeTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeReactNodeTypeDeleteFieldInput {
  delete: ReactNodeTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeReactNodeTypeDisconnectFieldInput {
  disconnect: ReactNodeTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeReactNodeTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeReactNodeTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeReactNodeTypeUpdateConnectionInput {
  node: ReactNodeTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeReactNodeTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeReactNodeTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeReactNodeTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeReactNodeTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeReactNodeTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere
}

type UnionTypeTypesOfUnionTypeRelationship {
  cursor: String!
  node: AnyType!
}

input UnionTypeTypesOfUnionTypeRenderPropTypeConnectFieldInput {
  connect: [RenderPropTypeConnectInput!]
  where: RenderPropTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeRenderPropTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeRenderPropTypeConnectOrCreateFieldInputOnCreate!
  where: RenderPropTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeRenderPropTypeConnectOrCreateFieldInputOnCreate {
  node: RenderPropTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeRenderPropTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeRenderPropTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeRenderPropTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeRenderPropTypeConnectionWhere!]
  node: RenderPropTypeWhere
}

input UnionTypeTypesOfUnionTypeRenderPropTypeCreateFieldInput {
  node: RenderPropTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeRenderPropTypeDeleteFieldInput {
  delete: RenderPropTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeRenderPropTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeRenderPropTypeDisconnectFieldInput {
  disconnect: RenderPropTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeRenderPropTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeRenderPropTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeRenderPropTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeRenderPropTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeRenderPropTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeRenderPropTypeUpdateConnectionInput {
  node: RenderPropTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeRenderPropTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeRenderPropTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeRenderPropTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeRenderPropTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeRenderPropTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeRenderPropTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeRenderPropTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeRenderPropTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeUnionTypeConnectFieldInput {
  connect: [UnionTypeConnectInput!]
  where: UnionTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInputOnCreate!
  where: UnionTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInputOnCreate {
  node: UnionTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere!]
  NOT: UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere
  OR: [UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere!]
  node: UnionTypeWhere
}

input UnionTypeTypesOfUnionTypeUnionTypeCreateFieldInput {
  node: UnionTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeUnionTypeDeleteFieldInput {
  delete: UnionTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeUnionTypeDisconnectFieldInput {
  disconnect: UnionTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeUnionTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeUnionTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeUnionTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeUnionTypeUpdateConnectionInput {
  node: UnionTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeUnionTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeUnionTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeUnionTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeUnionTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeUnionTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeUnionTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeUpdateInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeUpdateFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeUpdateFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeUpdateFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeUpdateFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeUpdateFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeUpdateFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeUpdateFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeUpdateFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeUpdateFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeUpdateFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeUpdateFieldInput!]
  RenderPropType: [UnionTypeTypesOfUnionTypeRenderPropTypeUpdateFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeUpdateFieldInput!]
}

input UnionTypeUniqueWhere {
  id: ID
  name: String
}

input UnionTypeUpdateInput {
  id: ID
  name: String
  owner: IBaseTypeOwnerUpdateFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeUpdateInput
}

type UnionTypeUserOwnerAggregationSelection {
  count: Int!
  node: UnionTypeUserOwnerNodeAggregateSelection
}

type UnionTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input UnionTypeWhere {
  AND: [UnionTypeWhere!]
  NOT: UnionTypeWhere
  OR: [UnionTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_MATCHES: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: UnionTypeOwnerAggregateInput
  ownerConnection: IBaseTypeOwnerConnectionWhere
  ownerConnection_NOT: IBaseTypeOwnerConnectionWhere
  owner_NOT: UserWhere

  """
  Return UnionTypes where all of the related UnionTypeTypesOfUnionTypeConnections match this filter
  """
  typesOfUnionTypeConnection_ALL: UnionTypeTypesOfUnionTypeConnectionWhere

  """
  Return UnionTypes where none of the related UnionTypeTypesOfUnionTypeConnections match this filter
  """
  typesOfUnionTypeConnection_NONE: UnionTypeTypesOfUnionTypeConnectionWhere

  """
  Return UnionTypes where one of the related UnionTypeTypesOfUnionTypeConnections match this filter
  """
  typesOfUnionTypeConnection_SINGLE: UnionTypeTypesOfUnionTypeConnectionWhere

  """
  Return UnionTypes where some of the related UnionTypeTypesOfUnionTypeConnections match this filter
  """
  typesOfUnionTypeConnection_SOME: UnionTypeTypesOfUnionTypeConnectionWhere
}

type UnionTypesConnection {
  edges: [UnionTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UpdateActionTypesMutationResponse {
  actionTypes: [ActionType!]!
  info: UpdateInfo!
}

type UpdateApiActionsMutationResponse {
  apiActions: [ApiAction!]!
  info: UpdateInfo!
}

type UpdateAppTypesMutationResponse {
  appTypes: [AppType!]!
  info: UpdateInfo!
}

type UpdateAppsMutationResponse {
  apps: [App!]!
  info: UpdateInfo!
}

type UpdateArrayTypesMutationResponse {
  arrayTypes: [ArrayType!]!
  info: UpdateInfo!
}

type UpdateAtomsMutationResponse {
  atoms: [Atom!]!
  info: UpdateInfo!
}

type UpdateCodeActionsMutationResponse {
  codeActions: [CodeAction!]!
  info: UpdateInfo!
}

type UpdateCodeMirrorTypesMutationResponse {
  codeMirrorTypes: [CodeMirrorType!]!
  info: UpdateInfo!
}

type UpdateComponentsMutationResponse {
  components: [Component!]!
  info: UpdateInfo!
}

type UpdateDomainsMutationResponse {
  domains: [Domain!]!
  info: UpdateInfo!
}

type UpdateElementTypesMutationResponse {
  elementTypes: [ElementType!]!
  info: UpdateInfo!
}

type UpdateElementsMutationResponse {
  elements: [Element!]!
  info: UpdateInfo!
}

type UpdateEnumTypeValuesMutationResponse {
  enumTypeValues: [EnumTypeValue!]!
  info: UpdateInfo!
}

type UpdateEnumTypesMutationResponse {
  enumTypes: [EnumType!]!
  info: UpdateInfo!
}

type UpdateFieldsMutationResponse {
  fields: [Field!]!
  info: UpdateInfo!
}

type UpdateGetBaseTypesReturnsMutationResponse {
  getBaseTypesReturns: [GetBaseTypesReturn!]!
  info: UpdateInfo!
}

type UpdateHooksMutationResponse {
  hooks: [Hook!]!
  info: UpdateInfo!
}

type UpdateInfo {
  bookmark: String
  nodesCreated: Int!
  nodesDeleted: Int!
  relationshipsCreated: Int!
  relationshipsDeleted: Int!
}

type UpdateInterfaceTypesMutationResponse {
  info: UpdateInfo!
  interfaceTypes: [InterfaceType!]!
}

type UpdateLambdaTypesMutationResponse {
  info: UpdateInfo!
  lambdaTypes: [LambdaType!]!
}

type UpdatePageTypesMutationResponse {
  info: UpdateInfo!
  pageTypes: [PageType!]!
}

type UpdatePagesMutationResponse {
  info: UpdateInfo!
  pages: [Page!]!
}

type UpdatePrimitiveTypesMutationResponse {
  info: UpdateInfo!
  primitiveTypes: [PrimitiveType!]!
}

type UpdatePropsMutationResponse {
  info: UpdateInfo!
  props: [Prop!]!
}

type UpdateReactNodeTypesMutationResponse {
  info: UpdateInfo!
  reactNodeTypes: [ReactNodeType!]!
}

type UpdateRenderPropTypesMutationResponse {
  info: UpdateInfo!
  renderPropTypes: [RenderPropType!]!
}

type UpdateResourcesMutationResponse {
  info: UpdateInfo!
  resources: [Resource!]!
}

type UpdateStoresMutationResponse {
  info: UpdateInfo!
  stores: [Store!]!
}

type UpdateTagsMutationResponse {
  info: UpdateInfo!
  tags: [Tag!]!
}

type UpdateTypeReferencesMutationResponse {
  info: UpdateInfo!
  typeReferences: [TypeReference!]!
}

type UpdateUnionTypesMutationResponse {
  info: UpdateInfo!
  unionTypes: [UnionType!]!
}

type User {
  apps(directed: Boolean = true, options: AppOptions, where: AppWhere): [App!]!
  appsAggregate(
    directed: Boolean = true
    where: AppWhere
  ): UserAppAppsAggregationSelection
  appsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserAppsConnectionSort!]
    where: UserAppsConnectionWhere
  ): UserAppsConnection!
  atoms(
    directed: Boolean = true
    options: AtomOptions
    where: AtomWhere
  ): [Atom!]!
  atomsAggregate(
    directed: Boolean = true
    where: AtomWhere
  ): UserAtomAtomsAggregationSelection
  atomsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserAtomsConnectionSort!]
    where: UserAtomsConnectionWhere
  ): UserAtomsConnection!
  auth0Id: String!
  components(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): [Component!]!
  componentsAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): UserComponentComponentsAggregationSelection
  componentsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserComponentsConnectionSort!]
    where: UserComponentsConnectionWhere
  ): UserComponentsConnection!
  elements(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): [Element!]!
  elementsAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): UserElementElementsAggregationSelection
  elementsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserElementsConnectionSort!]
    where: UserElementsConnectionWhere
  ): UserElementsConnection!
  email: String!
  id: ID!
  roles: [Role!]
  tags(directed: Boolean = true, options: TagOptions, where: TagWhere): [Tag!]!
  tagsAggregate(
    directed: Boolean = true
    where: TagWhere
  ): UserTagTagsAggregationSelection
  tagsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserTagsConnectionSort!]
    where: UserTagsConnectionWhere
  ): UserTagsConnection!
  types(
    directed: Boolean = true
    options: BaseTypeOptions
    where: BaseTypeWhere
  ): [BaseType!]!
  typesAggregate(
    directed: Boolean = true
    where: BaseTypeWhere
  ): UserBaseTypeTypesAggregationSelection
  typesConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserTypesConnectionSort!]
    where: UserTypesConnectionWhere
  ): UserTypesConnection!
  username: String!
}

type UserAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  count: Int!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

type UserAppAppsAggregationSelection {
  count: Int!
  node: UserAppAppsNodeAggregateSelection
}

type UserAppAppsNodeAggregateSelection {
  _compoundName: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input UserAppsAggregateInput {
  AND: [UserAppsAggregateInput!]
  NOT: UserAppsAggregateInput
  OR: [UserAppsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserAppsNodeAggregationWhereInput
}

input UserAppsConnectFieldInput {
  connect: [AppConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: AppConnectWhere
}

input UserAppsConnectOrCreateFieldInput {
  onCreate: UserAppsConnectOrCreateFieldInputOnCreate!
  where: AppConnectOrCreateWhere!
}

input UserAppsConnectOrCreateFieldInputOnCreate {
  node: AppOnCreateInput!
}

type UserAppsConnection {
  edges: [UserAppsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserAppsConnectionSort {
  node: AppSort
}

input UserAppsConnectionWhere {
  AND: [UserAppsConnectionWhere!]
  NOT: UserAppsConnectionWhere
  OR: [UserAppsConnectionWhere!]
  node: AppWhere
}

input UserAppsCreateFieldInput {
  node: AppCreateInput!
}

input UserAppsDeleteFieldInput {
  delete: AppDeleteInput
  where: UserAppsConnectionWhere
}

input UserAppsDisconnectFieldInput {
  disconnect: AppDisconnectInput
  where: UserAppsConnectionWhere
}

input UserAppsFieldInput {
  connect: [UserAppsConnectFieldInput!]
  connectOrCreate: [UserAppsConnectOrCreateFieldInput!]
  create: [UserAppsCreateFieldInput!]
}

input UserAppsNodeAggregationWhereInput {
  AND: [UserAppsNodeAggregationWhereInput!]
  NOT: UserAppsNodeAggregationWhereInput
  OR: [UserAppsNodeAggregationWhereInput!]
  _compoundName_AVERAGE_LENGTH_EQUAL: Float
  _compoundName_AVERAGE_LENGTH_GT: Float
  _compoundName_AVERAGE_LENGTH_GTE: Float
  _compoundName_AVERAGE_LENGTH_LT: Float
  _compoundName_AVERAGE_LENGTH_LTE: Float
  _compoundName_LONGEST_LENGTH_EQUAL: Int
  _compoundName_LONGEST_LENGTH_GT: Int
  _compoundName_LONGEST_LENGTH_GTE: Int
  _compoundName_LONGEST_LENGTH_LT: Int
  _compoundName_LONGEST_LENGTH_LTE: Int
  _compoundName_SHORTEST_LENGTH_EQUAL: Int
  _compoundName_SHORTEST_LENGTH_GT: Int
  _compoundName_SHORTEST_LENGTH_GTE: Int
  _compoundName_SHORTEST_LENGTH_LT: Int
  _compoundName_SHORTEST_LENGTH_LTE: Int
}

type UserAppsRelationship {
  cursor: String!
  node: App!
}

input UserAppsUpdateConnectionInput {
  node: AppUpdateInput
}

input UserAppsUpdateFieldInput {
  connect: [UserAppsConnectFieldInput!]
  connectOrCreate: [UserAppsConnectOrCreateFieldInput!]
  create: [UserAppsCreateFieldInput!]
  delete: [UserAppsDeleteFieldInput!]
  disconnect: [UserAppsDisconnectFieldInput!]
  update: UserAppsUpdateConnectionInput
  where: UserAppsConnectionWhere
}

type UserAtomAtomsAggregationSelection {
  count: Int!
  node: UserAtomAtomsNodeAggregateSelection
}

type UserAtomAtomsNodeAggregateSelection {
  externalCssSource: StringAggregateSelectionNullable!
  externalJsSource: StringAggregateSelectionNullable!
  externalSourceType: StringAggregateSelectionNullable!
  icon: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input UserAtomsAggregateInput {
  AND: [UserAtomsAggregateInput!]
  NOT: UserAtomsAggregateInput
  OR: [UserAtomsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserAtomsNodeAggregationWhereInput
}

input UserAtomsConnectFieldInput {
  connect: [AtomConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: AtomConnectWhere
}

input UserAtomsConnectOrCreateFieldInput {
  onCreate: UserAtomsConnectOrCreateFieldInputOnCreate!
  where: AtomConnectOrCreateWhere!
}

input UserAtomsConnectOrCreateFieldInputOnCreate {
  node: AtomOnCreateInput!
}

type UserAtomsConnection {
  edges: [UserAtomsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserAtomsConnectionSort {
  node: AtomSort
}

input UserAtomsConnectionWhere {
  AND: [UserAtomsConnectionWhere!]
  NOT: UserAtomsConnectionWhere
  OR: [UserAtomsConnectionWhere!]
  node: AtomWhere
}

input UserAtomsCreateFieldInput {
  node: AtomCreateInput!
}

input UserAtomsDeleteFieldInput {
  delete: AtomDeleteInput
  where: UserAtomsConnectionWhere
}

input UserAtomsDisconnectFieldInput {
  disconnect: AtomDisconnectInput
  where: UserAtomsConnectionWhere
}

input UserAtomsFieldInput {
  connect: [UserAtomsConnectFieldInput!]
  connectOrCreate: [UserAtomsConnectOrCreateFieldInput!]
  create: [UserAtomsCreateFieldInput!]
}

input UserAtomsNodeAggregationWhereInput {
  AND: [UserAtomsNodeAggregationWhereInput!]
  NOT: UserAtomsNodeAggregationWhereInput
  OR: [UserAtomsNodeAggregationWhereInput!]
  externalCssSource_AVERAGE_LENGTH_EQUAL: Float
  externalCssSource_AVERAGE_LENGTH_GT: Float
  externalCssSource_AVERAGE_LENGTH_GTE: Float
  externalCssSource_AVERAGE_LENGTH_LT: Float
  externalCssSource_AVERAGE_LENGTH_LTE: Float
  externalCssSource_LONGEST_LENGTH_EQUAL: Int
  externalCssSource_LONGEST_LENGTH_GT: Int
  externalCssSource_LONGEST_LENGTH_GTE: Int
  externalCssSource_LONGEST_LENGTH_LT: Int
  externalCssSource_LONGEST_LENGTH_LTE: Int
  externalCssSource_SHORTEST_LENGTH_EQUAL: Int
  externalCssSource_SHORTEST_LENGTH_GT: Int
  externalCssSource_SHORTEST_LENGTH_GTE: Int
  externalCssSource_SHORTEST_LENGTH_LT: Int
  externalCssSource_SHORTEST_LENGTH_LTE: Int
  externalJsSource_AVERAGE_LENGTH_EQUAL: Float
  externalJsSource_AVERAGE_LENGTH_GT: Float
  externalJsSource_AVERAGE_LENGTH_GTE: Float
  externalJsSource_AVERAGE_LENGTH_LT: Float
  externalJsSource_AVERAGE_LENGTH_LTE: Float
  externalJsSource_LONGEST_LENGTH_EQUAL: Int
  externalJsSource_LONGEST_LENGTH_GT: Int
  externalJsSource_LONGEST_LENGTH_GTE: Int
  externalJsSource_LONGEST_LENGTH_LT: Int
  externalJsSource_LONGEST_LENGTH_LTE: Int
  externalJsSource_SHORTEST_LENGTH_EQUAL: Int
  externalJsSource_SHORTEST_LENGTH_GT: Int
  externalJsSource_SHORTEST_LENGTH_GTE: Int
  externalJsSource_SHORTEST_LENGTH_LT: Int
  externalJsSource_SHORTEST_LENGTH_LTE: Int
  externalSourceType_AVERAGE_LENGTH_EQUAL: Float
  externalSourceType_AVERAGE_LENGTH_GT: Float
  externalSourceType_AVERAGE_LENGTH_GTE: Float
  externalSourceType_AVERAGE_LENGTH_LT: Float
  externalSourceType_AVERAGE_LENGTH_LTE: Float
  externalSourceType_LONGEST_LENGTH_EQUAL: Int
  externalSourceType_LONGEST_LENGTH_GT: Int
  externalSourceType_LONGEST_LENGTH_GTE: Int
  externalSourceType_LONGEST_LENGTH_LT: Int
  externalSourceType_LONGEST_LENGTH_LTE: Int
  externalSourceType_SHORTEST_LENGTH_EQUAL: Int
  externalSourceType_SHORTEST_LENGTH_GT: Int
  externalSourceType_SHORTEST_LENGTH_GTE: Int
  externalSourceType_SHORTEST_LENGTH_LT: Int
  externalSourceType_SHORTEST_LENGTH_LTE: Int
  icon_AVERAGE_LENGTH_EQUAL: Float
  icon_AVERAGE_LENGTH_GT: Float
  icon_AVERAGE_LENGTH_GTE: Float
  icon_AVERAGE_LENGTH_LT: Float
  icon_AVERAGE_LENGTH_LTE: Float
  icon_LONGEST_LENGTH_EQUAL: Int
  icon_LONGEST_LENGTH_GT: Int
  icon_LONGEST_LENGTH_GTE: Int
  icon_LONGEST_LENGTH_LT: Int
  icon_LONGEST_LENGTH_LTE: Int
  icon_SHORTEST_LENGTH_EQUAL: Int
  icon_SHORTEST_LENGTH_GT: Int
  icon_SHORTEST_LENGTH_GTE: Int
  icon_SHORTEST_LENGTH_LT: Int
  icon_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type UserAtomsRelationship {
  cursor: String!
  node: Atom!
}

input UserAtomsUpdateConnectionInput {
  node: AtomUpdateInput
}

input UserAtomsUpdateFieldInput {
  connect: [UserAtomsConnectFieldInput!]
  connectOrCreate: [UserAtomsConnectOrCreateFieldInput!]
  create: [UserAtomsCreateFieldInput!]
  delete: [UserAtomsDeleteFieldInput!]
  disconnect: [UserAtomsDisconnectFieldInput!]
  update: UserAtomsUpdateConnectionInput
  where: UserAtomsConnectionWhere
}

type UserBaseTypeTypesAggregationSelection {
  count: Int!
  node: UserBaseTypeTypesNodeAggregateSelection
}

type UserBaseTypeTypesNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

type UserComponentComponentsAggregationSelection {
  count: Int!
  node: UserComponentComponentsNodeAggregateSelection
}

type UserComponentComponentsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  keyGenerator: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
}

input UserComponentsAggregateInput {
  AND: [UserComponentsAggregateInput!]
  NOT: UserComponentsAggregateInput
  OR: [UserComponentsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserComponentsNodeAggregationWhereInput
}

input UserComponentsConnectFieldInput {
  connect: [ComponentConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ComponentConnectWhere
}

input UserComponentsConnectOrCreateFieldInput {
  onCreate: UserComponentsConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input UserComponentsConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type UserComponentsConnection {
  edges: [UserComponentsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserComponentsConnectionSort {
  node: ComponentSort
}

input UserComponentsConnectionWhere {
  AND: [UserComponentsConnectionWhere!]
  NOT: UserComponentsConnectionWhere
  OR: [UserComponentsConnectionWhere!]
  node: ComponentWhere
}

input UserComponentsCreateFieldInput {
  node: ComponentCreateInput!
}

input UserComponentsDeleteFieldInput {
  delete: ComponentDeleteInput
  where: UserComponentsConnectionWhere
}

input UserComponentsDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: UserComponentsConnectionWhere
}

input UserComponentsFieldInput {
  connect: [UserComponentsConnectFieldInput!]
  connectOrCreate: [UserComponentsConnectOrCreateFieldInput!]
  create: [UserComponentsCreateFieldInput!]
}

input UserComponentsNodeAggregationWhereInput {
  AND: [UserComponentsNodeAggregationWhereInput!]
  NOT: UserComponentsNodeAggregationWhereInput
  OR: [UserComponentsNodeAggregationWhereInput!]
  keyGenerator_AVERAGE_LENGTH_EQUAL: Float
  keyGenerator_AVERAGE_LENGTH_GT: Float
  keyGenerator_AVERAGE_LENGTH_GTE: Float
  keyGenerator_AVERAGE_LENGTH_LT: Float
  keyGenerator_AVERAGE_LENGTH_LTE: Float
  keyGenerator_LONGEST_LENGTH_EQUAL: Int
  keyGenerator_LONGEST_LENGTH_GT: Int
  keyGenerator_LONGEST_LENGTH_GTE: Int
  keyGenerator_LONGEST_LENGTH_LT: Int
  keyGenerator_LONGEST_LENGTH_LTE: Int
  keyGenerator_SHORTEST_LENGTH_EQUAL: Int
  keyGenerator_SHORTEST_LENGTH_GT: Int
  keyGenerator_SHORTEST_LENGTH_GTE: Int
  keyGenerator_SHORTEST_LENGTH_LT: Int
  keyGenerator_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type UserComponentsRelationship {
  cursor: String!
  node: Component!
}

input UserComponentsUpdateConnectionInput {
  node: ComponentUpdateInput
}

input UserComponentsUpdateFieldInput {
  connect: [UserComponentsConnectFieldInput!]
  connectOrCreate: [UserComponentsConnectOrCreateFieldInput!]
  create: [UserComponentsCreateFieldInput!]
  delete: [UserComponentsDeleteFieldInput!]
  disconnect: [UserComponentsDisconnectFieldInput!]
  update: UserComponentsUpdateConnectionInput
  where: UserComponentsConnectionWhere
}

input UserConnectInput {
  apps: [UserAppsConnectFieldInput!]
  atoms: [UserAtomsConnectFieldInput!]
  components: [UserComponentsConnectFieldInput!]
  elements: [UserElementsConnectFieldInput!]
  tags: [UserTagsConnectFieldInput!]
  types: [UserTypesConnectFieldInput!]
}

input UserConnectOrCreateWhere {
  node: UserUniqueWhere!
}

input UserConnectWhere {
  node: UserWhere!
}

input UserCreateInput {
  apps: UserAppsFieldInput
  atoms: UserAtomsFieldInput
  auth0Id: String!
  components: UserComponentsFieldInput
  elements: UserElementsFieldInput
  email: String!
  id: ID!
  roles: [Role!]
  tags: UserTagsFieldInput
  types: UserTypesFieldInput
  username: String!
}

input UserDeleteInput {
  apps: [UserAppsDeleteFieldInput!]
  atoms: [UserAtomsDeleteFieldInput!]
  components: [UserComponentsDeleteFieldInput!]
  elements: [UserElementsDeleteFieldInput!]
  tags: [UserTagsDeleteFieldInput!]
  types: [UserTypesDeleteFieldInput!]
}

input UserDisconnectInput {
  apps: [UserAppsDisconnectFieldInput!]
  atoms: [UserAtomsDisconnectFieldInput!]
  components: [UserComponentsDisconnectFieldInput!]
  elements: [UserElementsDisconnectFieldInput!]
  tags: [UserTagsDisconnectFieldInput!]
  types: [UserTypesDisconnectFieldInput!]
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserElementElementsAggregationSelection {
  count: Int!
  node: UserElementElementsNodeAggregateSelection
}

type UserElementElementsNodeAggregateSelection {
  childMapperPropKey: StringAggregateSelectionNullable!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfExpression: StringAggregateSelectionNullable!
}

input UserElementsAggregateInput {
  AND: [UserElementsAggregateInput!]
  NOT: UserElementsAggregateInput
  OR: [UserElementsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserElementsNodeAggregationWhereInput
}

input UserElementsConnectFieldInput {
  connect: [ElementConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: ElementConnectWhere
}

input UserElementsConnectOrCreateFieldInput {
  onCreate: UserElementsConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input UserElementsConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type UserElementsConnection {
  edges: [UserElementsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserElementsConnectionSort {
  node: ElementSort
}

input UserElementsConnectionWhere {
  AND: [UserElementsConnectionWhere!]
  NOT: UserElementsConnectionWhere
  OR: [UserElementsConnectionWhere!]
  node: ElementWhere
}

input UserElementsCreateFieldInput {
  node: ElementCreateInput!
}

input UserElementsDeleteFieldInput {
  delete: ElementDeleteInput
  where: UserElementsConnectionWhere
}

input UserElementsDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: UserElementsConnectionWhere
}

input UserElementsFieldInput {
  connect: [UserElementsConnectFieldInput!]
  connectOrCreate: [UserElementsConnectOrCreateFieldInput!]
  create: [UserElementsCreateFieldInput!]
}

input UserElementsNodeAggregationWhereInput {
  AND: [UserElementsNodeAggregationWhereInput!]
  NOT: UserElementsNodeAggregationWhereInput
  OR: [UserElementsNodeAggregationWhereInput!]
  childMapperPropKey_AVERAGE_LENGTH_EQUAL: Float
  childMapperPropKey_AVERAGE_LENGTH_GT: Float
  childMapperPropKey_AVERAGE_LENGTH_GTE: Float
  childMapperPropKey_AVERAGE_LENGTH_LT: Float
  childMapperPropKey_AVERAGE_LENGTH_LTE: Float
  childMapperPropKey_LONGEST_LENGTH_EQUAL: Int
  childMapperPropKey_LONGEST_LENGTH_GT: Int
  childMapperPropKey_LONGEST_LENGTH_GTE: Int
  childMapperPropKey_LONGEST_LENGTH_LT: Int
  childMapperPropKey_LONGEST_LENGTH_LTE: Int
  childMapperPropKey_SHORTEST_LENGTH_EQUAL: Int
  childMapperPropKey_SHORTEST_LENGTH_GT: Int
  childMapperPropKey_SHORTEST_LENGTH_GTE: Int
  childMapperPropKey_SHORTEST_LENGTH_LT: Int
  childMapperPropKey_SHORTEST_LENGTH_LTE: Int
  customCss_AVERAGE_LENGTH_EQUAL: Float
  customCss_AVERAGE_LENGTH_GT: Float
  customCss_AVERAGE_LENGTH_GTE: Float
  customCss_AVERAGE_LENGTH_LT: Float
  customCss_AVERAGE_LENGTH_LTE: Float
  customCss_LONGEST_LENGTH_EQUAL: Int
  customCss_LONGEST_LENGTH_GT: Int
  customCss_LONGEST_LENGTH_GTE: Int
  customCss_LONGEST_LENGTH_LT: Int
  customCss_LONGEST_LENGTH_LTE: Int
  customCss_SHORTEST_LENGTH_EQUAL: Int
  customCss_SHORTEST_LENGTH_GT: Int
  customCss_SHORTEST_LENGTH_GTE: Int
  customCss_SHORTEST_LENGTH_LT: Int
  customCss_SHORTEST_LENGTH_LTE: Int
  guiCss_AVERAGE_LENGTH_EQUAL: Float
  guiCss_AVERAGE_LENGTH_GT: Float
  guiCss_AVERAGE_LENGTH_GTE: Float
  guiCss_AVERAGE_LENGTH_LT: Float
  guiCss_AVERAGE_LENGTH_LTE: Float
  guiCss_LONGEST_LENGTH_EQUAL: Int
  guiCss_LONGEST_LENGTH_GT: Int
  guiCss_LONGEST_LENGTH_GTE: Int
  guiCss_LONGEST_LENGTH_LT: Int
  guiCss_LONGEST_LENGTH_LTE: Int
  guiCss_SHORTEST_LENGTH_EQUAL: Int
  guiCss_SHORTEST_LENGTH_GT: Int
  guiCss_SHORTEST_LENGTH_GTE: Int
  guiCss_SHORTEST_LENGTH_LT: Int
  guiCss_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  propTransformationJs_AVERAGE_LENGTH_EQUAL: Float
  propTransformationJs_AVERAGE_LENGTH_GT: Float
  propTransformationJs_AVERAGE_LENGTH_GTE: Float
  propTransformationJs_AVERAGE_LENGTH_LT: Float
  propTransformationJs_AVERAGE_LENGTH_LTE: Float
  propTransformationJs_LONGEST_LENGTH_EQUAL: Int
  propTransformationJs_LONGEST_LENGTH_GT: Int
  propTransformationJs_LONGEST_LENGTH_GTE: Int
  propTransformationJs_LONGEST_LENGTH_LT: Int
  propTransformationJs_LONGEST_LENGTH_LTE: Int
  propTransformationJs_SHORTEST_LENGTH_EQUAL: Int
  propTransformationJs_SHORTEST_LENGTH_GT: Int
  propTransformationJs_SHORTEST_LENGTH_GTE: Int
  propTransformationJs_SHORTEST_LENGTH_LT: Int
  propTransformationJs_SHORTEST_LENGTH_LTE: Int
  renderForEachPropKey_AVERAGE_LENGTH_EQUAL: Float
  renderForEachPropKey_AVERAGE_LENGTH_GT: Float
  renderForEachPropKey_AVERAGE_LENGTH_GTE: Float
  renderForEachPropKey_AVERAGE_LENGTH_LT: Float
  renderForEachPropKey_AVERAGE_LENGTH_LTE: Float
  renderForEachPropKey_LONGEST_LENGTH_EQUAL: Int
  renderForEachPropKey_LONGEST_LENGTH_GT: Int
  renderForEachPropKey_LONGEST_LENGTH_GTE: Int
  renderForEachPropKey_LONGEST_LENGTH_LT: Int
  renderForEachPropKey_LONGEST_LENGTH_LTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_EQUAL: Int
  renderForEachPropKey_SHORTEST_LENGTH_GT: Int
  renderForEachPropKey_SHORTEST_LENGTH_GTE: Int
  renderForEachPropKey_SHORTEST_LENGTH_LT: Int
  renderForEachPropKey_SHORTEST_LENGTH_LTE: Int
  renderIfExpression_AVERAGE_LENGTH_EQUAL: Float
  renderIfExpression_AVERAGE_LENGTH_GT: Float
  renderIfExpression_AVERAGE_LENGTH_GTE: Float
  renderIfExpression_AVERAGE_LENGTH_LT: Float
  renderIfExpression_AVERAGE_LENGTH_LTE: Float
  renderIfExpression_LONGEST_LENGTH_EQUAL: Int
  renderIfExpression_LONGEST_LENGTH_GT: Int
  renderIfExpression_LONGEST_LENGTH_GTE: Int
  renderIfExpression_LONGEST_LENGTH_LT: Int
  renderIfExpression_LONGEST_LENGTH_LTE: Int
  renderIfExpression_SHORTEST_LENGTH_EQUAL: Int
  renderIfExpression_SHORTEST_LENGTH_GT: Int
  renderIfExpression_SHORTEST_LENGTH_GTE: Int
  renderIfExpression_SHORTEST_LENGTH_LT: Int
  renderIfExpression_SHORTEST_LENGTH_LTE: Int
}

type UserElementsRelationship {
  cursor: String!
  node: Element!
}

input UserElementsUpdateConnectionInput {
  node: ElementUpdateInput
}

input UserElementsUpdateFieldInput {
  connect: [UserElementsConnectFieldInput!]
  connectOrCreate: [UserElementsConnectOrCreateFieldInput!]
  create: [UserElementsCreateFieldInput!]
  delete: [UserElementsDeleteFieldInput!]
  disconnect: [UserElementsDisconnectFieldInput!]
  update: UserElementsUpdateConnectionInput
  where: UserElementsConnectionWhere
}

input UserOnCreateInput {
  auth0Id: String!
  email: String!
  id: ID!
  roles: [Role!]
  username: String!
}

input UserOptions {
  limit: Int
  offset: Int

  """
  Specify one or more UserSort objects to sort Users by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [UserSort!]
}

"""
Fields to sort Users by. The order in which sorts are applied is not guaranteed when specifying many fields in one UserSort object.
"""
input UserSort {
  auth0Id: SortDirection
  email: SortDirection
  id: SortDirection
  username: SortDirection
}

type UserTagTagsAggregationSelection {
  count: Int!
  node: UserTagTagsNodeAggregateSelection
}

type UserTagTagsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input UserTagsAggregateInput {
  AND: [UserTagsAggregateInput!]
  NOT: UserTagsAggregateInput
  OR: [UserTagsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserTagsNodeAggregationWhereInput
}

input UserTagsConnectFieldInput {
  connect: [TagConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: TagConnectWhere
}

input UserTagsConnectOrCreateFieldInput {
  onCreate: UserTagsConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input UserTagsConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type UserTagsConnection {
  edges: [UserTagsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserTagsConnectionSort {
  node: TagSort
}

input UserTagsConnectionWhere {
  AND: [UserTagsConnectionWhere!]
  NOT: UserTagsConnectionWhere
  OR: [UserTagsConnectionWhere!]
  node: TagWhere
}

input UserTagsCreateFieldInput {
  node: TagCreateInput!
}

input UserTagsDeleteFieldInput {
  delete: TagDeleteInput
  where: UserTagsConnectionWhere
}

input UserTagsDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: UserTagsConnectionWhere
}

input UserTagsFieldInput {
  connect: [UserTagsConnectFieldInput!]
  connectOrCreate: [UserTagsConnectOrCreateFieldInput!]
  create: [UserTagsCreateFieldInput!]
}

input UserTagsNodeAggregationWhereInput {
  AND: [UserTagsNodeAggregationWhereInput!]
  NOT: UserTagsNodeAggregationWhereInput
  OR: [UserTagsNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type UserTagsRelationship {
  cursor: String!
  node: Tag!
}

input UserTagsUpdateConnectionInput {
  node: TagUpdateInput
}

input UserTagsUpdateFieldInput {
  connect: [UserTagsConnectFieldInput!]
  connectOrCreate: [UserTagsConnectOrCreateFieldInput!]
  create: [UserTagsCreateFieldInput!]
  delete: [UserTagsDeleteFieldInput!]
  disconnect: [UserTagsDisconnectFieldInput!]
  update: UserTagsUpdateConnectionInput
  where: UserTagsConnectionWhere
}

input UserTypesAggregateInput {
  AND: [UserTypesAggregateInput!]
  NOT: UserTypesAggregateInput
  OR: [UserTypesAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserTypesNodeAggregationWhereInput
}

input UserTypesConnectFieldInput {
  connect: [BaseTypeConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: BaseTypeConnectWhere
}

input UserTypesConnectOrCreateFieldInput {
  onCreate: UserTypesConnectOrCreateFieldInputOnCreate!
  where: BaseTypeConnectOrCreateWhere!
}

input UserTypesConnectOrCreateFieldInputOnCreate {
  node: BaseTypeOnCreateInput!
}

type UserTypesConnection {
  edges: [UserTypesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserTypesConnectionSort {
  node: BaseTypeSort
}

input UserTypesConnectionWhere {
  AND: [UserTypesConnectionWhere!]
  NOT: UserTypesConnectionWhere
  OR: [UserTypesConnectionWhere!]
  node: BaseTypeWhere
}

input UserTypesCreateFieldInput {
  node: BaseTypeCreateInput!
}

input UserTypesDeleteFieldInput {
  delete: BaseTypeDeleteInput
  where: UserTypesConnectionWhere
}

input UserTypesDisconnectFieldInput {
  disconnect: BaseTypeDisconnectInput
  where: UserTypesConnectionWhere
}

input UserTypesFieldInput {
  connect: [UserTypesConnectFieldInput!]
  connectOrCreate: [UserTypesConnectOrCreateFieldInput!]
  create: [UserTypesCreateFieldInput!]
}

input UserTypesNodeAggregationWhereInput {
  AND: [UserTypesNodeAggregationWhereInput!]
  NOT: UserTypesNodeAggregationWhereInput
  OR: [UserTypesNodeAggregationWhereInput!]
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
}

type UserTypesRelationship {
  cursor: String!
  node: BaseType!
}

input UserTypesUpdateConnectionInput {
  node: BaseTypeUpdateInput
}

input UserTypesUpdateFieldInput {
  connect: [UserTypesConnectFieldInput!]
  connectOrCreate: [UserTypesConnectOrCreateFieldInput!]
  create: [UserTypesCreateFieldInput!]
  delete: [UserTypesDeleteFieldInput!]
  disconnect: [UserTypesDisconnectFieldInput!]
  update: UserTypesUpdateConnectionInput
  where: UserTypesConnectionWhere
}

input UserUniqueWhere {
  auth0Id: String
  id: ID
  username: String
}

input UserUpdateInput {
  apps: [UserAppsUpdateFieldInput!]
  atoms: [UserAtomsUpdateFieldInput!]
  auth0Id: String
  components: [UserComponentsUpdateFieldInput!]
  elements: [UserElementsUpdateFieldInput!]
  email: String
  id: ID
  roles: [Role!]
  tags: [UserTagsUpdateFieldInput!]
  types: [UserTypesUpdateFieldInput!]
  username: String
}

input UserWhere {
  AND: [UserWhere!]
  NOT: UserWhere
  OR: [UserWhere!]
  appsAggregate: UserAppsAggregateInput

  """
  Return Users where all of the related UserAppsConnections match this filter
  """
  appsConnection_ALL: UserAppsConnectionWhere

  """
  Return Users where none of the related UserAppsConnections match this filter
  """
  appsConnection_NONE: UserAppsConnectionWhere

  """
  Return Users where one of the related UserAppsConnections match this filter
  """
  appsConnection_SINGLE: UserAppsConnectionWhere

  """
  Return Users where some of the related UserAppsConnections match this filter
  """
  appsConnection_SOME: UserAppsConnectionWhere

  """
  Return Users where all of the related Apps match this filter
  """
  apps_ALL: AppWhere

  """
  Return Users where none of the related Apps match this filter
  """
  apps_NONE: AppWhere

  """
  Return Users where one of the related Apps match this filter
  """
  apps_SINGLE: AppWhere

  """
  Return Users where some of the related Apps match this filter
  """
  apps_SOME: AppWhere
  atomsAggregate: UserAtomsAggregateInput

  """
  Return Users where all of the related UserAtomsConnections match this filter
  """
  atomsConnection_ALL: UserAtomsConnectionWhere

  """
  Return Users where none of the related UserAtomsConnections match this filter
  """
  atomsConnection_NONE: UserAtomsConnectionWhere

  """
  Return Users where one of the related UserAtomsConnections match this filter
  """
  atomsConnection_SINGLE: UserAtomsConnectionWhere

  """
  Return Users where some of the related UserAtomsConnections match this filter
  """
  atomsConnection_SOME: UserAtomsConnectionWhere

  """
  Return Users where all of the related Atoms match this filter
  """
  atoms_ALL: AtomWhere

  """
  Return Users where none of the related Atoms match this filter
  """
  atoms_NONE: AtomWhere

  """
  Return Users where one of the related Atoms match this filter
  """
  atoms_SINGLE: AtomWhere

  """
  Return Users where some of the related Atoms match this filter
  """
  atoms_SOME: AtomWhere
  auth0Id: String
  auth0Id_CONTAINS: String
  auth0Id_ENDS_WITH: String
  auth0Id_IN: [String!]
  auth0Id_MATCHES: String
  auth0Id_STARTS_WITH: String
  componentsAggregate: UserComponentsAggregateInput

  """
  Return Users where all of the related UserComponentsConnections match this filter
  """
  componentsConnection_ALL: UserComponentsConnectionWhere

  """
  Return Users where none of the related UserComponentsConnections match this filter
  """
  componentsConnection_NONE: UserComponentsConnectionWhere

  """
  Return Users where one of the related UserComponentsConnections match this filter
  """
  componentsConnection_SINGLE: UserComponentsConnectionWhere

  """
  Return Users where some of the related UserComponentsConnections match this filter
  """
  componentsConnection_SOME: UserComponentsConnectionWhere

  """
  Return Users where all of the related Components match this filter
  """
  components_ALL: ComponentWhere

  """
  Return Users where none of the related Components match this filter
  """
  components_NONE: ComponentWhere

  """
  Return Users where one of the related Components match this filter
  """
  components_SINGLE: ComponentWhere

  """
  Return Users where some of the related Components match this filter
  """
  components_SOME: ComponentWhere
  elementsAggregate: UserElementsAggregateInput

  """
  Return Users where all of the related UserElementsConnections match this filter
  """
  elementsConnection_ALL: UserElementsConnectionWhere

  """
  Return Users where none of the related UserElementsConnections match this filter
  """
  elementsConnection_NONE: UserElementsConnectionWhere

  """
  Return Users where one of the related UserElementsConnections match this filter
  """
  elementsConnection_SINGLE: UserElementsConnectionWhere

  """
  Return Users where some of the related UserElementsConnections match this filter
  """
  elementsConnection_SOME: UserElementsConnectionWhere

  """
  Return Users where all of the related Elements match this filter
  """
  elements_ALL: ElementWhere

  """
  Return Users where none of the related Elements match this filter
  """
  elements_NONE: ElementWhere

  """
  Return Users where one of the related Elements match this filter
  """
  elements_SINGLE: ElementWhere

  """
  Return Users where some of the related Elements match this filter
  """
  elements_SOME: ElementWhere
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String!]
  email_MATCHES: String
  email_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_MATCHES: String
  id_STARTS_WITH: ID
  roles: [Role!]
  roles_INCLUDES: Role
  tagsAggregate: UserTagsAggregateInput

  """
  Return Users where all of the related UserTagsConnections match this filter
  """
  tagsConnection_ALL: UserTagsConnectionWhere

  """
  Return Users where none of the related UserTagsConnections match this filter
  """
  tagsConnection_NONE: UserTagsConnectionWhere

  """
  Return Users where one of the related UserTagsConnections match this filter
  """
  tagsConnection_SINGLE: UserTagsConnectionWhere

  """
  Return Users where some of the related UserTagsConnections match this filter
  """
  tagsConnection_SOME: UserTagsConnectionWhere

  """
  Return Users where all of the related Tags match this filter
  """
  tags_ALL: TagWhere

  """
  Return Users where none of the related Tags match this filter
  """
  tags_NONE: TagWhere

  """
  Return Users where one of the related Tags match this filter
  """
  tags_SINGLE: TagWhere

  """
  Return Users where some of the related Tags match this filter
  """
  tags_SOME: TagWhere
  typesAggregate: UserTypesAggregateInput

  """
  Return Users where all of the related UserTypesConnections match this filter
  """
  typesConnection_ALL: UserTypesConnectionWhere

  """
  Return Users where none of the related UserTypesConnections match this filter
  """
  typesConnection_NONE: UserTypesConnectionWhere

  """
  Return Users where one of the related UserTypesConnections match this filter
  """
  typesConnection_SINGLE: UserTypesConnectionWhere

  """
  Return Users where some of the related UserTypesConnections match this filter
  """
  typesConnection_SOME: UserTypesConnectionWhere

  """
  Return Users where all of the related BaseTypes match this filter
  """
  types_ALL: BaseTypeWhere

  """
  Return Users where none of the related BaseTypes match this filter
  """
  types_NONE: BaseTypeWhere

  """
  Return Users where one of the related BaseTypes match this filter
  """
  types_SINGLE: BaseTypeWhere

  """
  Return Users where some of the related BaseTypes match this filter
  """
  types_SOME: BaseTypeWhere
  username: String
  username_CONTAINS: String
  username_ENDS_WITH: String
  username_IN: [String!]
  username_MATCHES: String
  username_STARTS_WITH: String
}

type UsersConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type VercelDomainConfig {
  misconfigured: Boolean!
}

type VercelProjectDomain {
  verified: Boolean!
}

interface WithDescendants {
  descendantTypesIds: [ID!]!
}

interface WithOwner {
  owner: User!
  ownerConnection: WithOwnerOwnerConnection!
}

input WithOwnerOwnerConnectFieldInput {
  connect: UserConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: UserConnectWhere
}

input WithOwnerOwnerConnectOrCreateFieldInput {
  onCreate: WithOwnerOwnerConnectOrCreateFieldInputOnCreate!
  where: UserConnectOrCreateWhere!
}

input WithOwnerOwnerConnectOrCreateFieldInputOnCreate {
  node: UserOnCreateInput!
}

type WithOwnerOwnerConnection {
  edges: [WithOwnerOwnerRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input WithOwnerOwnerConnectionSort {
  node: UserSort
}

input WithOwnerOwnerConnectionWhere {
  AND: [WithOwnerOwnerConnectionWhere!]
  NOT: WithOwnerOwnerConnectionWhere
  OR: [WithOwnerOwnerConnectionWhere!]
  node: UserWhere
}

input WithOwnerOwnerCreateFieldInput {
  node: UserCreateInput!
}

input WithOwnerOwnerDeleteFieldInput {
  delete: UserDeleteInput
  where: WithOwnerOwnerConnectionWhere
}

input WithOwnerOwnerDisconnectFieldInput {
  disconnect: UserDisconnectInput
  where: WithOwnerOwnerConnectionWhere
}

input WithOwnerOwnerFieldInput {
  connect: WithOwnerOwnerConnectFieldInput
  connectOrCreate: WithOwnerOwnerConnectOrCreateFieldInput
  create: WithOwnerOwnerCreateFieldInput
}

type WithOwnerOwnerRelationship {
  cursor: String!
  node: User!
}

input WithOwnerOwnerUpdateConnectionInput {
  node: UserUpdateInput
}

input WithOwnerOwnerUpdateFieldInput {
  connect: WithOwnerOwnerConnectFieldInput
  connectOrCreate: WithOwnerOwnerConnectOrCreateFieldInput
  create: WithOwnerOwnerCreateFieldInput
  delete: WithOwnerOwnerDeleteFieldInput
  disconnect: WithOwnerOwnerDisconnectFieldInput
  update: WithOwnerOwnerUpdateConnectionInput
  where: WithOwnerOwnerConnectionWhere
}
