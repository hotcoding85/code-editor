// Directives taken from the neo4j docs and the generated sdql schema
import { gql } from '@apollo/client'

// Adding them here helps ide autocompletion and error checking for gql segments
export const defaultDirectives = gql`
  """
  Informs @neo4j/graphql of node metadata
  """
  directive @node(
    """
    Map the GraphQL type to a custom Neo4j node label
    """
    label: String
    """
    Map the GraphQL type to match additional Neo4j node labels
    """
    labels: [String]
  ) on OBJECT

  """
  Instructs @neo4j/graphql to invoke the specified callback function when updating or creating the properties on a node or relationship.
  """
  enum CallbackOperation {
    CREATE
    UPDATE
  }

  directive @callback(
    """
    Which events to invoke the callback on.
    """
    operations: [CallbackOperation!]! = [CREATE, UPDATE]
    """
    The name of the callback function.
    """
    name: String!
  ) on FIELD_DEFINITION

  """
  Indicates that the field is an identifier for the object type. By default; autogenerated, and has a unique node property constraint in the database.
  """
  directive @id(
    autogenerate: Boolean! = true
    unique: Boolean! = true
  ) on FIELD_DEFINITION

  enum TimestampOperation {
    CREATE
    UPDATE
  }

  """
  Instructs @neo4j/graphql to generate timestamps on particular events, which will be available as the value of the specified field.
  """
  directive @timestamp(
    """
    Which events to generate timestamps on. Defaults to both create and update.
    """
    operations: [TimestampOperation!]! = [CREATE, UPDATE]
  ) on FIELD_DEFINITION

  """
  Instructs @neo4j/graphql to run the specified Cypher statement in order to resolve the value of the field to which the directive is applied.
  """
  directive @cypher(
    """
    The Cypher statement to run which returns a value of the same type composition as the field definition on which the directive is applied.
    """
    statement: String!
  ) on FIELD_DEFINITION

  """
  Instructs @neo4j/graphql to only include a field in generated input type for creating, and in the object type within which the directive is applied.
  """
  directive @readonly on FIELD_DEFINITION

  enum ExcludeOperation {
    CREATE
    READ
    UPDATE
    DELETE
  }

  """
  Instructs @neo4j/graphql to exclude the specified operations from query and mutation generation. If used without an argument, no queries or mutations will be generated for this type.
  """
  directive @exclude(
    operations: [ExcludeOperation!]! = [CREATE, READ, UPDATE, DELETE]
  ) on OBJECT

  """
  Int | Float | String | Boolean | ID | DateTime
  """
  scalar Scalar

  """
  Instructs @neo4j/graphql to set the specified value as the default value in the CreateInput type for the object type in which this directive is used.
  """
  directive @default(
    """
    The default value to use. Must be a scalar type and must match the type of the field with which this directive decorates.
    """
    value: Scalar!
  ) on FIELD_DEFINITION

  """
  Informs @neo4j/graphql that there should be a uniqueness constraint in the database for the decorated field.
  """
  directive @unique(
    """
    The name which should be used for this constraint. By default; type name, followed by an underscore, followed by the field name.
    """
    constraintName: String
  ) on FIELD_DEFINITION

  enum DIRECTION {
    IN
    OUT
  }

  directive @relationship(
    type: String
    properties: String
    direction: DIRECTION
  ) on FIELD_DEFINITION
`
